{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-1db3987a3f5175b36e94fd32e8d37aa9--","val":"<h1>React Patterns:</h1>\n<iframe height=\"600px\" width=\"1000px\" sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://codesandbox.io/embed/lucid-pateu-ln8ex?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react patterns\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h2>React Cheat Sheet</h2>\n<hr>\n<hr>\n<details>\n<summary>  See More </summary>   \n<h3>Components</h3>\n<pre><code class=\"language-jsx\">import React from 'react'\nimport ReactDOM from 'react-dom'\n</code></pre>\n<pre><code class=\"language-jsx\">class Hello extends React.Component {\n  render () {\n    return &#x3C;div className='message-box'>\n      Hello {this.props.name}\n    &#x3C;/div>\n  }\n}\n</code></pre>\n<pre><code>const el = document.body\nReactDOM.render(&#x3C;Hello name='John' />, el)\n</code></pre>\n<p>Use the <a href=\"https://jsfiddle.net/reactjs/69z2wepo/\">React.js jsfiddle</a> to start hacking. (or the unofficial <a href=\"http://jsbin.com/yafixat/edit?js,output\">jsbin</a>)</p>\n<h3>Import multiple exports</h3>\n<pre><code>import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\n</code></pre>\n<pre><code>class Hello extends Component {\n  ...\n}\n</code></pre>\n<h3>Properties</h3>\n<pre><code>&#x3C;Video fullscreen={true} autoplay={false} />\n</code></pre>\n<pre><code>render () {\n  this.props.fullscreen\n  const { fullscreen, autoplay } = this.props\n  ···\n}\n</code></pre>\n<p>Use <code>this.props</code> to access properties passed to the component.</p>\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#using-props\">Properties</a></p>\n<h3>States</h3>\n<pre><code>constructor(props) {\n  super(props)\n  this.state = { username: undefined }\n}\n</code></pre>\n<pre><code>this.setState({ username: 'rstacruz' })\n</code></pre>\n<pre><code>render () {\n  this.state.username\n  const { username } = this.state\n  ···\n}\n</code></pre>\n<p>Use states (<code>this.state</code>) to manage dynamic data.</p>\n<p>With <a href=\"https://babeljs.io/\">Babel</a> you can use <a href=\"https://github.com/tc39/proposal-class-fields\">proposal-class-fields</a> and get rid of constructor</p>\n<pre><code>class Hello extends Component {\n  state = { username: undefined };\n  ...\n}\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#reactive-state\">States</a></p>\n<h3>Nesting</h3>\n<pre><code>class Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return &#x3C;div>\n      &#x3C;UserAvatar src={avatar} />\n      &#x3C;UserProfile username={username} />\n    &#x3C;/div>\n  }\n}\n</code></pre>\n<p>As of React v16.2.0, fragments can be used to return multiple children without adding extra wrapping nodes to the DOM.</p>\n<pre><code>import React, {\n  Component,\n  Fragment\n} from 'react'\n\nclass Info extends Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return (\n      &#x3C;Fragment>\n        &#x3C;UserAvatar src={avatar} />\n        &#x3C;UserProfile username={username} />\n      &#x3C;/Fragment>\n    )\n  }\n}\n</code></pre>\n<p>Nest components to separate concerns.</p>\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#composing-components\">Composing Components</a></p>\n<h3>Children</h3>\n<pre><code>&#x3C;AlertBox>\n  &#x3C;h1>You have pending notifications&#x3C;/h1>\n&#x3C;/AlertBox>\n</code></pre>\n<pre><code>class AlertBox extends Component {\n  render () {\n    return &#x3C;div className='alert-box'>\n      {this.props.children}\n    &#x3C;/div>\n  }\n}\n</code></pre>\n<p>Children are passed as the <code>children</code> property.</p>\n<h2><a href=\"https://devhints.io/react#defaults\">#</a>Defaults</h2>\n<h3>Setting default props</h3>\n<pre><code>Hello.defaultProps = {\n  color: 'blue'\n}\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/docs/react-component.html#defaultprops\">defaultProps</a></p>\n<h3>Setting default state</h3>\n<pre><code>class Hello extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { visible: true }\n  }\n}\n</code></pre>\n<p>Set the default state in the <code>constructor()</code>.</p>\n<p>And without constructor using <a href=\"https://babeljs.io/\">Babel</a> with <a href=\"https://github.com/tc39/proposal-class-fields\">proposal-class-fields</a>.</p>\n<pre><code>class Hello extends Component {\n  state = { visible: true }\n}\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state\">Setting the default state</a></p>\n<h2><a href=\"https://devhints.io/react#other-components\">#</a>Other components</h2>\n<h3>Functional components</h3>\n<pre><code>function MyComponent ({ name }) {\n  return &#x3C;div className='message-box'>\n    Hello {name}\n  &#x3C;/div>\n}\n</code></pre>\n<p>Functional components have no state. Also, their <code>props</code> are passed as the first parameter to a function.</p>\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">Function and Class Components</a></p>\n<h3>Pure components</h3>\n<pre><code>import React, {PureComponent} from 'react'\n\nclass MessageBox extends PureComponent {\n  ···\n}\n</code></pre>\n<p>Performance-optimized version of <code>React.Component</code>. Doesn't rerender if props/state hasn't changed.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html#react.purecomponent\">Pure components</a></p>\n<h3>Component API</h3>\n<pre><code>this.forceUpdate()\n</code></pre>\n<pre><code>this.setState({ ... })\nthis.setState(state => { ... })\n</code></pre>\n<pre><code>this.state\nthis.props\n</code></pre>\n<p>These methods and properties are available for <code>Component</code> instances.</p>\n<p>See: <a href=\"https://facebook.github.io/react/docs/component-api.html\">Component API</a></p>\n<h2><a href=\"https://devhints.io/react#lifecycle\">#</a>Lifecycle</h2>\n<h3>Mounting</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>constructor</code> <em>(props)</em></td>\n<td>Before rendering <a href=\"https://reactjs.org/docs/react-component.html#constructor\">#</a></td>\n</tr>\n<tr>\n<td><code>componentWillMount()</code></td>\n<td><em>Don't use this</em> <a href=\"https://reactjs.org/docs/react-component.html#componentwillmount\">#</a></td>\n</tr>\n<tr>\n<td><code>render()</code></td>\n<td>Render <a href=\"https://reactjs.org/docs/react-component.html#render\">#</a></td>\n</tr>\n<tr>\n<td><code>componentDidMount()</code></td>\n<td>After rendering (DOM available) <a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">#</a></td>\n</tr>\n<tr>\n<td><code>componentWillUnmount()</code></td>\n<td>Before DOM removal <a href=\"https://reactjs.org/docs/react-component.html#componentwillunmount\">#</a></td>\n</tr>\n<tr>\n<td><code>componentDidCatch()</code></td>\n<td>Catch errors (16+) <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">#</a></td>\n</tr>\n</tbody>\n</table>\n<p>Set initial the state on <code>constructor()</code>. Add DOM event handlers, timers (etc) on <code>componentDidMount()</code>, then remove them on <code>componentWillUnmount()</code>.</p>\n<h3>Updating</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>componentDidUpdate</code> <em>(prevProps, prevState, snapshot)</em></td>\n<td>Use <code>setState()</code> here, but remember to compare props</td>\n</tr>\n<tr>\n<td><code>shouldComponentUpdate</code> <em>(newProps, newState)</em></td>\n<td>Skips <code>render()</code> if returns false</td>\n</tr>\n<tr>\n<td><code>render()</code></td>\n<td>Render</td>\n</tr>\n<tr>\n<td><code>componentDidUpdate</code> <em>(prevProps, prevState)</em></td>\n<td>Operate on the DOM here</td>\n</tr>\n</tbody>\n</table>\n<p>Called when parents change properties and <code>.setState()</code>. These are not called for initial renders.</p>\n<p>See: <a href=\"https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\">Component specs</a></p>\n<h2><a href=\"https://devhints.io/react#hooks-new\">#</a>Hooks (New)</h2>\n<h3>State Hook</h3>\n<pre><code>import React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &#x3C;div>\n      &#x3C;p>You clicked {count} times&#x3C;/p>\n      &#x3C;button onClick={() => setCount(count + 1)}>\n        Click me\n      &#x3C;/button>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>Hooks are a new addition in React 16.8.</p>\n<p>See: <a href=\"https://reactjs.org/docs/hooks-overview.html\">Hooks at a Glance</a></p>\n<h3>Declaring multiple state variables</h3>\n<pre><code>function ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n</code></pre>\n<h3>Effect hook</h3>\n<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n\n  return (\n    &#x3C;div>\n      &#x3C;p>You clicked {count} times&#x3C;/p>\n      &#x3C;button onClick={() => setCount(count + 1)}>\n        Click me\n      &#x3C;/button>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>If you're familiar with React class lifecycle methods, you can think of <code>useEffect</code> Hook as <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code> combined.</p>\n<p>By default, React runs the effects after every render — including the first render.</p>\n<h3>Building your own hooks</h3>\n<h4>Define FriendStatus</h4>\n<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  }, [props.friend.id]);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n</code></pre>\n<p>Effects may also optionally specify how to “clean up” after them by returning a function.</p>\n<h4>Use FriendStatus</h4>\n<pre><code>function FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a></p>\n<h3>Hooks API Reference</h3>\n<p>Also see: <a href=\"https://reactjs.org/docs/hooks-faq.html\">Hooks FAQ</a></p>\n<h4>Basic Hooks</h4>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>useState</code><em>(initialState)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useEffect</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useContext</code><em>(MyContext)</em></td>\n<td>value returned from <code>React.createContext</code></td>\n</tr>\n</tbody>\n</table>\n<p>Full details: <a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\">Basic Hooks</a></p>\n<h4>Additional Hooks</h4>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>useReducer</code><em>(reducer, initialArg, init)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useCallback</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useMemo</code><em>(() => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useRef</code><em>(initialValue)</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useImperativeHandle</code><em>(ref, () => { … })</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>useLayoutEffect</code></td>\n<td>identical to <code>useEffect</code>, but it fires synchronously after all DOM mutations</td>\n</tr>\n<tr>\n<td><code>useDebugValue</code><em>(value)</em></td>\n<td>display a label for custom hooks in React DevTools</td>\n</tr>\n</tbody>\n</table>\n<p>Full details: <a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\">Additional Hooks</a></p>\n<h2><a href=\"https://devhints.io/react#dom-nodes\">#</a>DOM nodes</h2>\n<h3>References</h3>\n<pre><code>class MyComponent extends Component {\n  render () {\n    return &#x3C;div>\n      &#x3C;input ref={el => this.input = el} />\n    &#x3C;/div>\n  }\n\n  componentDidMount () {\n    this.input.focus()\n  }\n}\n</code></pre>\n<p>Allows access to DOM nodes.</p>\n<p>See: <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs and the DOM</a></p>\n<h3>DOM Events</h3>\n<pre><code>class MyComponent extends Component {\n  render () {\n    &#x3C;input type=\"text\"\n        value={this.state.value}\n        onChange={event => this.onChange(event)} />\n  }\n\n  onChange (event) {\n    this.setState({ value: event.target.value })\n  }\n}\n</code></pre>\n<p>Pass functions to attributes like <code>onChange</code>.</p>\n<p>See: <a href=\"https://reactjs.org/docs/events.html\">Events</a></p>\n<h2><a href=\"https://devhints.io/react#other-features\">#</a>Other features</h2>\n<h3>Transferring props</h3>\n<pre><code>&#x3C;VideoPlayer src=\"video.mp4\" />\n</code></pre>\n<pre><code>class VideoPlayer extends Component {\n  render () {\n    return &#x3C;VideoEmbed {...this.props} />\n  }\n}\n</code></pre>\n<p>Propagates <code>src=\"...\"</code> down to the sub-component.</p>\n<p>See <a href=\"https://facebook.github.io/react/docs/transferring-props.html\">Transferring props</a></p>\n<h3>Top-level API</h3>\n<pre><code>React.createClass({ ... })\nReact.isValidElement(c)\n</code></pre>\n<pre><code>ReactDOM.render(&#x3C;Component />, domnode, [callback])\nReactDOM.unmountComponentAtNode(domnode)\n</code></pre>\n<pre><code>ReactDOMServer.renderToString(&#x3C;Component />)\nReactDOMServer.renderToStaticMarkup(&#x3C;Component />)\n</code></pre>\n<p>There are more, but these are most common.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html\">React top-level API</a></p>\n<h2><a href=\"https://devhints.io/react#jsx-patterns\">#</a>JSX patterns</h2>\n<h3>Style shorthand</h3>\n<pre><code>const style = { height: 10 }\nreturn &#x3C;div style={style}>&#x3C;/div>\n</code></pre>\n<pre><code>return &#x3C;div style={{ margin: 0, padding: 0 }}>&#x3C;/div>\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/tips/inline-styles.html\">Inline styles</a></p>\n<h3>Inner HTML</h3>\n<pre><code>function markdownify() { return \"&#x3C;p>...&#x3C;/p>\"; }\n&#x3C;div dangerouslySetInnerHTML={{__html: markdownify()}} />\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/tips/dangerously-set-inner-html.html\">Dangerously set innerHTML</a></p>\n<h3>Lists</h3>\n<pre><code>class TodoList extends Component {\n  render () {\n    const { items } = this.props\n\n    return &#x3C;ul>\n      {items.map(item =>\n        &#x3C;TodoItem item={item} key={item.key} />)}\n    &#x3C;/ul>\n  }\n}\n</code></pre>\n<p>Always supply a <code>key</code> property.</p>\n<h3>Conditionals</h3>\n<pre><code>&#x3C;Fragment>\n  {showMyComponent\n    ? &#x3C;MyComponent />\n    : &#x3C;OtherComponent />}\n&#x3C;/Fragment>\n</code></pre>\n<h3>Short-circuit evaluation</h3>\n<pre><code>&#x3C;Fragment>\n  {showPopup &#x26;&#x26; &#x3C;Popup />}\n  ...\n&#x3C;/Fragment>\n</code></pre>\n<h2><a href=\"https://devhints.io/react#new-features\">#</a>New features</h2>\n<h3>Returning multiple elements</h3>\n<p>You can return multiple elements as arrays or fragments.</p>\n<h4>Arrays</h4>\n<pre><code>render () {\n  // Don't forget the keys!\n  return [\n    &#x3C;li key=\"A\">First item&#x3C;/li>,\n    &#x3C;li key=\"B\">Second item&#x3C;/li>\n  ]\n}\n</code></pre>\n<h4>Fragments</h4>\n<pre><code>render () {\n  // Fragments don't require keys!\n  return (\n    &#x3C;Fragment>\n      &#x3C;li>First item&#x3C;/li>\n      &#x3C;li>Second item&#x3C;/li>\n    &#x3C;/Fragment>\n  )\n}\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n<h3>Returning strings</h3>\n<pre><code>render() {\n  return 'Look ma, no spans!';\n}\n</code></pre>\n<p>You can return just a string.</p>\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n<h3>Errors</h3>\n<pre><code>class MyComponent extends Component {\n  ···\n  componentDidCatch (error, info) {\n    this.setState({ error })\n  }\n}\n</code></pre>\n<p>Catch errors via <code>componentDidCatch</code>. (React 16+)</p>\n<p>See: <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">Error handling in React 16</a></p>\n<h3>Portals</h3>\n<pre><code>render () {\n  return React.createPortal(\n    this.props.children,\n    document.getElementById('menu')\n  )\n}\n</code></pre>\n<p>This renders <code>this.props.children</code> into any location in the DOM.</p>\n<p>See: <a href=\"https://reactjs.org/docs/portals.html\">Portals</a></p>\n<h3>Hydration</h3>\n<pre><code>const el = document.getElementById('app')\nReactDOM.hydrate(&#x3C;App />, el)\n</code></pre>\n<p>Use <code>ReactDOM.hydrate</code> instead of using <code>ReactDOM.render</code> if you're rendering over the output of <a href=\"https://reactjs.org/docs/react-dom-server.html\">ReactDOMServer</a>.</p>\n<p>See: <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">Hydrate</a></p>\n<h2><a href=\"https://devhints.io/react#property-validation\">#</a>Property validation</h2>\n<h3>PropTypes</h3>\n<pre><code>import PropTypes from 'prop-types'\n</code></pre>\n<p>See: <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">Typechecking with PropTypes</a></p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>any</code></td>\n<td>Anything</td>\n</tr>\n</tbody>\n</table>\n<h4>Basic</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>string</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>func</code></td>\n<td>Function</td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td>True or false</td>\n</tr>\n</tbody>\n</table>\n<h4>Enum</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>oneOf</code><em>(any)</em></td>\n<td>Enum types</td>\n</tr>\n<tr>\n<td><code>oneOfType</code><em>(type array)</em></td>\n<td>Union</td>\n</tr>\n</tbody>\n</table>\n<h4>Array</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>array</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>arrayOf</code><em>(…)</em></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Object</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>object</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>objectOf</code><em>(…)</em></td>\n<td>Object with values of a certain type</td>\n</tr>\n<tr>\n<td><code>instanceOf</code><em>(…)</em></td>\n<td>Instance of a class</td>\n</tr>\n<tr>\n<td><code>shape</code><em>(…)</em></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>Elements</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>element</code></td>\n<td>React element</td>\n</tr>\n<tr>\n<td><code>node</code></td>\n<td>DOM node</td>\n</tr>\n</tbody>\n</table>\n<h4>Required</h4>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(···).isRequired</code></td>\n<td>Required</td>\n</tr>\n</tbody>\n</table>\n<h3>Basic types</h3>\n<pre><code>MyComponent.propTypes = {\n  email:      PropTypes.string,\n  seats:      PropTypes.number,\n  callback:   PropTypes.func,\n  isClosed:   PropTypes.bool,\n  any:        PropTypes.any\n}\n</code></pre>\n<h3>Required types</h3>\n<pre><code>MyCo.propTypes = {\n  name:  PropTypes.string.isRequired\n}\n</code></pre>\n<h3>Elements</h3>\n<pre><code>MyCo.propTypes = {\n  // React element\n  element: PropTypes.element,\n\n  // num, string, element, or an array of those\n  node: PropTypes.node\n}\n</code></pre>\n<h3>Enumerables (oneOf)</h3>\n<pre><code>MyCo.propTypes = {\n  direction: PropTypes.oneOf([\n    'left', 'right'\n  ])\n}\n</code></pre>\n<h3>Arrays and objects</h3>\n<pre><code>MyCo.propTypes = {\n  list: PropTypes.array,\n  ages: PropTypes.arrayOf(PropTypes.number),\n  user: PropTypes.object,\n  user: PropTypes.objectOf(PropTypes.number),\n  message: PropTypes.instanceOf(Message)\n}\n</code></pre>\n<pre><code>MyCo.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    age:  PropTypes.number\n  })\n}\n</code></pre>\n<p>Use <code>.array[Of]</code>, <code>.object[Of]</code>, <code>.instanceOf</code>, <code>.shape</code>.</p>\n<h3>Custom validation</h3>\n<pre><code>MyCo.propTypes = {\n  customProp: (props, key, componentName) => {\n    if (!/matchme/.test(props[key])) {\n      return new Error('Validation failed!')\n    }\n  }\n}\n</code></pre>\n<hr>\n<hr>\n<h1>React:</h1>\n<ul>\n<li><code>&#x3C;script src=\"https://unpkg.com/react@15/dist/react.js\">&#x3C;/script></code></li>\n<li><code>$ npm install react --save</code></li>\n<li><code>$ bower install react --save</code></li>\n</ul>\n<p>React DOM:</p>\n<ul>\n<li><code>&#x3C;script src=\"https://unpkg.com/react-dom@15/dist/react-dom.js\">&#x3C;/script></code></li>\n<li><code>$ npm install react-dom</code></li>\n<li><code>$ bower install react-dom --save</code></li>\n</ul>\n<h2>Rendering</h2>\n<h3>Rendering (ES5)</h3>\n<pre><code class=\"language-js\">ReactDOM.render(React.createElement(Link, { name: 'HackHall.com' }), document.getElementById('menu'));\n</code></pre>\n<h3>Rendering (ES5+JSX)</h3>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;Link name=\"HackHall.com\" />, document.getElementById('menu'));\n</code></pre>\n<h2>Server-side Rendering</h2>\n<pre><code class=\"language-js\">var ReactDOMServer = require('react-dom/server');\nReactDOMServer.renderToString(Link, { name: 'HackHall.com' });\nReactDOMServer.renderToStaticMarkup(Link, { name: 'HackHall.com' });\n</code></pre>\n<h2>Components</h2>\n<h3>ES5</h3>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    displayName: 'Link',\n    render: function () {\n        return React.createElement('a', { className: 'btn', title: this.props.name }, 'Click ->', this.props.name);\n    }\n});\n</code></pre>\n<h3>ES5 + JSX</h3>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    render: function () {\n        return (\n            &#x3C;a className=\"btn\" title={this.props.name}>\n                Click -> this.props.name\n            &#x3C;/a>\n        );\n    }\n});\n</code></pre>\n<h3>ES6 + JSX</h3>\n<pre><code class=\"language-js\">class Link extends React.Component {\n    render() {\n        return (\n            &#x3C;a className=\"btn\" title={this.props.name}>\n                Click -> this.props.name\n            &#x3C;/a>\n        );\n    }\n}\n</code></pre>\n</details>\n<hr>\n<hr>\n<details>\n<summary>  </summary>   \n<pre><code class=\"language-sh\">npm install --save react       // declarative and flexible JavaScript library for building UI\nnpm install --save react-dom   // serves as the entry point of the DOM-related rendering paths\nnpm install --save prop-types  // runtime type checking for React props and similar objects\n</code></pre>\n<p>// notes: don't forget the command lines</p>\n<pre><code class=\"language-js\">/* *******************************************************************************************\n * REACT\n * https://reactjs.org/docs/react-api.html\n * ******************************************************************************************* */\n\n// Create and return a new React element of the given type.\n// Code written with JSX will be converted to use React.createElement().\n// You will not typically invoke React.createElement() directly if you are using JSX.\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n\n// Clone and return a new React element using element as the starting point.\n// The resulting element will have the original element's props with the new props merged in shallowly.\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n\n// Verifies the object is a React element. Returns true or false.\nReact.isValidElement(object)\n\nReact.Children  // provides utilities for dealing with the this.props.children opaque data structure.\n\n// Invokes a function on every immediate child contained within children with this set to thisArg.\nReact.Children.map(children, function[(thisArg)])\n\n// Like React.Children.map() but does not return an array.\nReact.Children.forEach(children, function[(thisArg)])\n\n// Returns the total number of components in children,\n// equal to the number of times that a callback passed to map or forEach would be invoked.\nReact.Children.count(children)\n\n// Verifies that children has only one child (a React element) and returns it.\n// Otherwise this method throws an error.\nReact.Children.only(children)\n\n// Returns the children opaque data structure as a flat array with keys assigned to each child.\n// Useful if you want to manipulate collections of children in your render methods,\n// especially if you want to reorder or slice this.props.children before passing it down.\nReact.Children.toArray(children)\n\n// The React.Fragment component lets you return multiple elements in a render() method without creating an additional DOM element\n// You can also use it with the shorthand &#x3C;>&#x3C;/> syntax.\nReact.Fragment\n\n/* *******************************************************************************************\n * REACT.COMPONENT\n * React.Component is an abstract base class, so it rarely makes sense to refer to React.Component\n * directly. Instead, you will typically subclass it, and define at least a render() method.\n * https://reactjs.org/docs/react-component.html\n * ******************************************************************************************* */\n\nclass Component extends React.Component {\n  // Will be called before it is mounted\n  constructor(props) {\n    // Call this method before any other statement\n    // or this.props will be undefined in the constructor\n    super(props);\n\n    // The constructor is also often used to bind event handlers to the class instance.\n    // Binding makes sure the method has access to component attributes like this.props and this.state\n    this.method = this.method.bind(this);\n\n    // The constructor is the right place to initialize state.\n    this.state = {\n      active: true,\n\n      // In rare cases, it's okay to initialize state based on props.\n      // This effectively \"forks\" the props and sets the state with the initial props.\n      // If you \"fork\" props by using them for state, you might also want to implement componentWillReceiveProps(nextProps)\n      // to keep the state up-to-date with them. But lifting state up is often easier and less bug-prone.\n      color: props.initialColor\n    };\n  }\n\n  // Enqueues changes to the component state and\n  // tells React that this component and its children need to be re-rendered with the updated state.\n  // setState() does not always immediately update the component. It may batch or defer the update until later.\n  // This makes reading this.state right after calling setState() a potential pitfall.\n  // Instead, use componentDidUpdate or a setState callback.\n  // You may optionally pass an object as the first argument to setState() instead of a function.\n  setState(updater[, callback]) { }\n\n  // Invoked just before mounting occurs (before render())\n  // This is the only lifecycle hook called on server rendering.\n  componentWillMount() { }\n\n  // Invoked immediately after a component is mounted.\n  // Initialization that requires DOM nodes should go here.\n  // If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n  // This method is a good place to set up any subscriptions. If you do that, don't forget to unsubscribe in componentWillUnmount().\n  componentDidMount() { }\n\n  // Invoked before a mounted component receives new props.\n  // If you need to update the state in response to prop changes (for example, to reset it),\n  // you may compare this.props and nextProps and perform state transitions using this.setState() in this method.\n  componentWillReceiveProps(nextProps) { }\n\n  // Let React know if a component's output is not affected by the current change in state or props.\n  // The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\n  // shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true.\n  // This method is not called for the initial render or when forceUpdate() is used.\n  // Returning false does not prevent child components from re-rendering when their state changes.\n  shouldComponentUpdate(nextProps, nextState) { }\n\n  // Invoked just before rendering when new props or state are being received.\n  // Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\n  // Note that you cannot call this.setState() here; nor should you do anything else\n  // (e.g. dispatch a Redux action) that would trigger an update to a React component before componentWillUpdate() returns.\n  // If you need to update state in response to props changes, use componentWillReceiveProps() instead.\n  componentWillUpdate(nextProps, nextState) { }\n\n  // Invoked immediately after updating occurs. This method is not called for the initial render.\n  // Use this as an opportunity to operate on the DOM when the component has been updated.\n  // This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\n  componentDidUpdate(prevProps, prevState) { }\n\n  // Invoked immediately before a component is unmounted and destroyed.\n  // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests,\n  // or cleaning up any subscriptions that were created in componentDidMount().\n  componentWillUnmount() { }\n\n  // Error boundaries are React components that catch JavaScript errors anywhere in their child component tree,\n  // log those errors, and display a fallback UI instead of the component tree that crashed.\n  // Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\n  componentDidCatch() { }\n\n  // This method is required.\n  // It should be pure, meaning that it does not modify component state,\n  // it returns the same result each time it's invoked, and\n  // it does not directly interact with the browser (use lifecycle methods for this)\n  // It must return one of the following types: react elements, string and numbers, portals, null or booleans.\n  render() {\n    // Contains the props that were defined by the caller of this component.\n    console.log(this.props);\n\n    // Contains data specific to this component that may change over time.\n    // The state is user-defined, and it should be a plain JavaScript object.\n    // If you don't use it in render(), it shouldn't be in the state.\n    // For example, you can put timer IDs directly on the instance.\n    // Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made.\n    // Treat this.state as if it were immutable.\n    console.log(this.state);\n\n    return (\n      &#x3C;div>\n        {/* Comment goes here */}\n        Hello, {this.props.name}!\n      &#x3C;/div>\n    );\n  }\n}\n\n// Can be defined as a property on the component class itself, to set the default props for the class.\n// This is used for undefined props, but not for null props.\nComponent.defaultProps = {\n  color: 'blue'\n};\n\ncomponent = new Component();\n\n// By default, when your component's state or props change, your component will re-render.\n// If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().\n// Normally you should try to avoid all uses of forceUpdate() and only read from this.props and this.state in render().\ncomponent.forceUpdate(callback)\n\n/* *******************************************************************************************\n * REACT.DOM\n * The react-dom package provides DOM-specific methods that can be used at the top level of\n * your app and as an escape hatch to get outside of the React model if you need to.\n * Most of your components should not need to use this module.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */\n\n// Render a React element into the DOM in the supplied container and return a reference\n// to the component (or returns null for stateless components).\nReactDOM.render(element, container[, callback])\n\n// Same as render(), but is used to hydrate a container whose HTML contents were rendered\n// by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nReactDOM.hydrate(element, container[, callback])\n\n// Remove a mounted React component from the DOM and clean up its event handlers and state.\n// If no component was mounted in the container, calling this function does nothing.\n// Returns true if a component was unmounted and false if there was no component to unmount.\nReactDOM.unmountComponentAtNode(container)\n\n// If this component has been mounted into the DOM, this returns the corresponding native browser\n// DOM element. This method is useful for reading values out of the DOM, such as form field values\n// and performing DOM measurements. In most cases, you can attach a ref to the DOM node and avoid\n// using findDOMNode at all.\nReactDOM.findDOMNode(component)\n\n// Creates a portal. Portals provide a way to render children into a DOM node that exists outside\n// the hierarchy of the DOM component.\nReactDOM.createPortal(child, container)\n\n/* *******************************************************************************************\n * REACTDOMSERVER\n * The ReactDOMServer object enables you to render components to static markup.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */\n\n// Render a React element to its initial HTML. React will return an HTML string.\n// You can use this method to generate HTML on the server and send the markup down on the initial\n// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nReactDOMServer.renderToString(element)\n\n// Similar to renderToString, except this doesn't create extra DOM attributes that React uses\n// internally, such as data-reactroot. This is useful if you want to use React as a simple static\n// page generator, as stripping away the extra attributes can save some bytes.\nReactDOMServer.renderToStaticMarkup(element)\n\n// Render a React element to its initial HTML. Returns a Readable stream that outputs an HTML string.\n// The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return.\n// You can use this method to generate HTML on the server and send the markup down on the initial\n// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nReactDOMServer.renderToNodeStream(element)\n\n// Similar to renderToNodeStream, except this doesn't create extra DOM attributes that React uses\n// internally, such as data-reactroot. This is useful if you want to use React as a simple static\n// page generator, as stripping away the extra attributes can save some bytes.\nReactDOMServer.renderToStaticNodeStream(element)\n\n/* *******************************************************************************************\n * TYPECHECKING WITH PROPTYPES\n * https://reactjs.org/docs/typechecking-with-proptypes.html\n * ******************************************************************************************* */\n\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS type. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n</code></pre>\n<hr>\n<hr>\n<h2>Advanced Components</h2>\n<h3>Options (ES5)</h3>\n<ul>\n<li><code>propTypes object</code>: Type validation in development mode</li>\n<li><code>getDefaultProps function()</code>: object of default props</li>\n<li><code>getInitialState function()</code>: object of the initial state</li>\n</ul>\n<p>ES5:</p>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    propTypes: { name: React.PropTypes.string },\n    getDefaultProps: function () {\n        return { initialCount: 0 };\n    },\n    getInitialState: function () {\n        return { count: this.props.initialCount };\n    },\n    tick: function () {\n        this.setState({ count: this.state.count + 1 });\n    },\n    render: function () {\n        return React.createElement(\n            'a',\n            { className: 'btn', href: '#', title: this.props.name, onClick: this.tick.bind(this) },\n            'Click ->',\n            this.props.name ? this.props.name : 'webapplog.com',\n            ' (Clicked: ' + this.state.count + ')'\n        );\n    }\n});\n</code></pre>\n<p>ES5 + JSX:</p>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    propTypes: { name: React.PropTypes.string },\n    getDefaultProps: function () {\n        return { initialCount: 0 };\n    },\n    getInitialState: function () {\n        return { count: this.props.initialCount };\n    },\n    tick: function () {\n        this.setState({ count: this.state.count + 1 });\n    },\n    render: function () {\n        return (\n            &#x3C;a onClick={this.tick.bind(this)} href=\"#\" className=\"btn\" title={this.props.name}>\n                Click -> {this.props.name ? this.props.name : 'webapplog.com'}\n                (Clicked: {this.state.count})\n            &#x3C;/a>\n        );\n    }\n});\n</code></pre>\n<p>ES6 + JSX:</p>\n<pre><code class=\"language-js\">export class Link extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { count: props.initialCount };\n    }\n    tick() {\n        this.setState({ count: this.state.count + 1 });\n    }\n    render() {\n        return (\n            &#x3C;a onClick={this.tick.bind(this)} href=\"#\" className=\"btn\" title={this.props.name}>\n                Click -> {this.props.name ? this.props.name : 'webapplog.com'}\n                (Clicked: {this.state.count})\n            &#x3C;/a>\n        );\n    }\n}\nLink.propTypes = { initialCount: React.PropTypes.number };\nLink.defaultProps = { initialCount: 0 };\n</code></pre>\n<h2>Lifecycle Events</h2>\n<p>Modern React lifecycle methods (v16+)\n<img src=\"DZ-97vzW4AAbcZj.jpg\"></p>\n<p>Legacy Lifecycle Events:</p>\n<ul>\n<li><code>componentWillMount function()</code></li>\n<li><code>componentDidMount function()</code></li>\n<li><code>componentWillReceiveProps function(nextProps)</code></li>\n<li><code>shouldComponentUpdate function(nextProps, nextState)-> bool</code></li>\n<li><code>componentWillUpdate function(nextProps, nextState)</code></li>\n<li><code>componentDidUpdate function(prevProps, prevState)</code></li>\n<li><code>componentWillUnmount function()</code></li>\n</ul>\n<p>Sequence of lifecycle events:</p>\n<p><img src=\"lifecycle-events.png\"></p>\n<p>Inspired by <a href=\"http://react.tips\">http://react.tips</a></p>\n<h2>Special Props</h2>\n<ul>\n<li><code>key</code>: Unique identifier for an element to turn arrays/lists into hashes for better performance, e.g., <code>key={id}</code></li>\n<li><code>ref</code>: Reference to an element via <code>this.refs.NAME</code>, e.g., <code>ref=\"email\"</code> will create <code>this.refs.email</code> DOM node or <code>ReactDOM.findDOMNode(this.refs.email)</code></li>\n<li><code>style</code>: Accept an object of styles, instead of a string (immutable since v0.14), e.g., <code>style={{color: red}}</code></li>\n<li><code>className</code>: the HTML <code>class</code> attribute, e.g., <code>className=\"btn\"</code></li>\n<li><code>htmlFor</code>: the HTML <code>for</code> attribute, e.g., <code>htmlFor=\"email\"</code></li>\n<li><code>dangerouslySetInnerHTML</code>: raw HTML by providing an object with the key <code>__html</code></li>\n<li><code>children</code>: content of the element via <code>this.props.children</code>, e.g., <code>this.props.children[0]</code></li>\n<li><code>data-NAME</code>: custom attribute, e.g., <code>data-tooltip-text=\"...\"</code></li>\n</ul>\n<h2>propTypes</h2>\n<p>Types available under <code>React.PropTypes</code>:</p>\n<ul>\n<li><code>any</code></li>\n<li><code>array</code></li>\n<li><code>bool</code></li>\n<li><code>element</code></li>\n<li><code>func</code></li>\n<li><code>node</code></li>\n<li><code>number</code></li>\n<li><code>object</code></li>\n<li><code>string</code></li>\n</ul>\n<p>To make required, append <code>.isRequired</code>.</p>\n<p>More methods:</p>\n<ul>\n<li><code>instanceOf(constructor)</code></li>\n<li><code>oneOf(['News', 'Photos'])</code></li>\n<li><code>oneOfType([propType, propType])</code></li>\n</ul>\n<h3>Custom Validation</h3>\n<pre><code class=\"language-js\">propTypes: {\n  customProp: function(props, propName, componentName) {\n    if (!/regExPattern/.test(props[propName])) {\n      return new Error('Validation failed!');\n    }\n  }\n}\n</code></pre>\n<h2>Component Properties and Methods</h2>\n<p>Properties:</p>\n<ul>\n<li><code>this.refs</code>: Lists components with a <code>ref</code> prop</li>\n<li><code>this.props</code>: Any props passed to an element (immutable)</li>\n<li><code>this.state</code>: State set by setState and getInitialState (muttable) — avoid setting state manually with <code>this.state=...</code></li>\n<li><code>this.isMounted</code>: Flag whether the element has a corresponding DOM node or not</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><code>setState(changes)</code>: Change state (partially) to <code>this.state</code> and trigger re-render</li>\n<li><code>replaceState(newState)</code>: Replace <code>this.state</code> and trigger re-render</li>\n<li><code>forceUpdate()</code>: Trigger DOM re-render immediately</li>\n</ul>\n<h2>React Addons</h2>\n<p>As npm modules:</p>\n<ul>\n<li><a href=\"http://facebook.github.io/react/docs/animation.html\"><code>react-addons-css-transition-group</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/perf.html\"><code>react-addons-perf</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/test-utils.html\"><code>react-addons-test-utils</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/pure-render-mixin.html\"><code>react-addons-pure-render-mixin</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/two-way-binding-helpers.html\"><code>react-addons-linked-state-mixin</code></a></li>\n<li><code>react-addons-clone-with-props</code></li>\n<li><code>react-addons-create-fragment</code></li>\n<li><code>react-addons-css-transition-group</code></li>\n<li><code>react-addons-linked-state-mixin</code></li>\n<li><code>react-addons-pure-render-mixin</code></li>\n<li><code>react-addons-shallow-compare</code></li>\n<li><code>react-addons-transition-group</code></li>\n<li><a href=\"http://facebook.github.io/react/docs/update.html\"><code>react-addons-update</code></a></li>\n</ul>\n<h2>React Components</h2>\n<ul>\n<li><a href=\"https://github.com/brillout/awesome-react-components\">https://github.com/brillout/awesome-react-components</a> and <a href=\"http://devarchy.com/react-components\">http://devarchy.com/react-components</a>: List of React components</li>\n<li><a href=\"http://www.material-ui.com\">Material-UI</a>: Material design React components</li>\n<li><a href=\"http://react-toolbox.com\">http://react-toolbox.com</a>: Set of React components that implement Google Material Design specification</li>\n<li><a href=\"https://js.coach\">https://js.coach</a>: Opinionated catalog of open source JS (mostly React) packages</li>\n<li><a href=\"https://react.rocks\">https://react.rocks</a>: Catalog of React components</li>\n<li><a href=\"https://khan.github.io/react-components\">https://khan.github.io/react-components</a>: Khan Academy React components</li>\n<li><a href=\"http://www.reactjsx.com\">http://www.reactjsx.com</a>: Registry of React components</li>\n</ul>"}