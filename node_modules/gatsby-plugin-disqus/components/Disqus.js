"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var Disqus = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(Disqus, _React$Component);

  function Disqus(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.shortname = typeof GATSBY_DISQUS_SHORTNAME !== "undefined" && GATSBY_DISQUS_SHORTNAME !== '' ? GATSBY_DISQUS_SHORTNAME : '';
    _this.embedUrl = "https://" + _this.shortname + ".disqus.com/embed.js";
    return _this;
  }

  var _proto = Disqus.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.loadInstance();
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (this.props === nextProps) {
      return false;
    }

    return (0, _utils.shallowComparison)(this.props, nextProps);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.loadInstance();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cleanInstance();
  };

  _proto.getDisqusConfig = function getDisqusConfig(config) {
    return function () {
      this.page.identifier = config.identifier;
      this.page.url = config.url;
      this.page.title = config.title;
      this.page.remote_auth_s3 = config.remoteAuthS3;
      this.page.api_key = config.apiKey;
      this.language = config.language;
    };
  };

  _proto.loadInstance = function loadInstance() {
    if (typeof window !== 'undefined' && window.document) {
      window.disqus_config = this.getDisqusConfig(this.props.config);

      if (window.document.getElementById('dsq-embed-scr')) {
        this.reloadInstance();
      } else {
        (0, _utils.insertScript)(this.embedUrl, 'dsq-embed-scr', window.document.body);
      }
    }
  };

  _proto.reloadInstance = function reloadInstance() {
    if (window && window.DISQUS) {
      window.DISQUS.reset({
        reload: true
      });
    }
  };

  _proto.cleanInstance = function cleanInstance() {
    (0, _utils.removeScript)('dsq-embed-scr', window.document.body);

    try {
      delete window.DISQUS;
    } catch (error) {
      window.DISQUS = undefined;
    }

    var thread = window.document.getElementById('disqus_thread');

    if (thread) {
      while (thread.hasChildNodes()) {
        thread.removeChild(thread.firstChild);
      }
    } // Retrieve and remove the sidebar iframe


    var iframeQuery = window.document.querySelector('[id^="dsq-app"]');

    if (iframeQuery) {
      var iframe = window.document.getElementById(iframeQuery.id);
      iframe.parentNode.removeChild(iframe);
    }
  };

  _proto.render = function render() {
    // eslint-disable-next-line no-unused-vars
    var _this$props = this.props,
        config = _this$props.config,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["config"]);
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
      id: "disqus_thread"
    }, props));
  };

  return Disqus;
}(_react.default.Component);

exports.default = Disqus;
Disqus.propTypes = {
  config: _propTypes.default.shape({
    /*
    * Tells the Disqus service how to identify the current page.
    * When the Disqus embed is loaded, the identifier is used to look up
    * the correct thread.
    */
    identifier: _propTypes.default.string,

    /*
    * Tells the Disqus service the title of the current page.
    * This is used when creating the thread on Disqus.
    */
    title: _propTypes.default.string,

    /*
    * Tells the Disqus service the URL of the current page.
    * This URL is used when a thread is created so that Disqus knows which
    * page a thread belongs to.
    * (If undefined, Disqus will use the global.location.href)
    */
    url: _propTypes.default.string,

    /*
    * Tells the Disqus service to override the default site language for the
    * current page.
    * This allows for dynamically loading the Disqus embed in different
    * languages on a per-page basis.
    * (If undefined, Disqus will use the default site language)
    */
    language: _propTypes.default.string,

    /*
    The generated payload used to pass Single Sign-On (SSO) user data
    */
    remoteAuthS3: _propTypes.default.string,

    /*
    * This is the public API key for your Single Sign-On (SSO) integration
    */
    apiKey: _propTypes.default.string
  })
};