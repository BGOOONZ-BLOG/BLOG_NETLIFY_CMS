{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-17ab982d896707494692888a7e715dbd--","val":"<h1>Promise.all()</h1>\n<p>The <code>Promise.all()</code> method takes an iterable of promises as an input, and returns a single <a href=\"../promise\"><code>Promise</code></a> that resolves to an array of the results of the input promises. This returned promise will resolve when all of the input's promises have resolved, or if the input iterable contains no promises. It rejects immediately upon any of the input promises rejecting or non-promises throwing an error, and will reject with this first rejection message / error.</p>\n<h2>Syntax</h2>\n<pre><code>Promise.all(iterable);\n</code></pre>\n<h3>Parameters</h3>\n<p><code>iterable</code>\nAn <a href=\"../../iteration_protocols#the_iterable_protocol\">iterable</a> object such as an <a href=\"../array\"><code>Array</code></a>.</p>\n<h3>Return value</h3>\n<ul>\n<li>An <strong>already resolved</strong> <a href=\"../promise\"><code>Promise</code></a> if the iterable passed is empty.</li>\n<li>An <strong>asynchronously resolved</strong> <a href=\"../promise\"><code>Promise</code></a> if the iterable passed contains no promises. Note, Google Chrome 58 returns an <strong>already resolved</strong> promise in this case.</li>\n<li>A <strong>pending</strong> <a href=\"../promise\"><code>Promise</code></a> in all other cases. This returned promise is then resolved/rejected <strong>asynchronously</strong> (as soon as the stack is empty) when all the promises in the given iterable have resolved, or if any of the promises reject. See the example about \"Asynchronicity or synchronicity of Promise.all\" below. Returned values will be in order of the Promises passed, regardless of completion order.</li>\n</ul>\n<h2>Description</h2>\n<p>This method can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully â€” all of whom we want to fulfill before the code execution continues.</p>\n<p><code>Promise.all()</code> will reject immediately upon <strong>any</strong> of the input promises rejecting. In comparison, the promise returned by <a href=\"allsettled\"><code>Promise.allSettled()</code></a> will wait for all input promises to complete, regardless of whether or not one rejects. Consequently, it will always return the final result of every promise and function from the input iterable.</p>\n<h3>Fulfillment</h3>\n<p>The returned promise is fulfilled with an array containing <strong>all</strong> the resolved values (including non-promise values) in the iterable passed as the argument.</p>\n<ul>\n<li>If an empty iterable is passed, then the promise returned by this method is fulfilled synchronously. The resolved value is an empty array.</li>\n<li>If a nonempty <em>iterable</em> is passed, and <strong>all</strong> of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</li>\n</ul>\n<h3>Rejection</h3>\n<p>If any of the passed-in promises reject, <code>Promise.all</code> asynchronously rejects with the value of the promise that rejected, whether or not the other promises have resolved.</p>\n<h2>Examples</h2>\n<h3>Using <code>Promise.all</code></h3>\n<p><code>Promise.all</code> waits for all fulfillments (or the first rejection).</p>\n<pre><code>var p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 100);\n});\n\nPromise.all([p1, p2, p3]).then(values => {\n  console.log(values); // [3, 1337, \"foo\"]\n});\n</code></pre>\n<p>If the iterable contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):</p>\n<pre><code>// this will be counted as if the iterable passed is empty, so it gets fulfilled\nvar p = Promise.all([1,2,3]);\n// this will be counted as if the iterable passed contains only the resolved promise with value \"444\", so it gets fulfilled\nvar p2 = Promise.all([1,2,3, Promise.resolve(444)]);\n// this will be counted as if the iterable passed contains only the rejected promise with value \"555\", so it gets rejected\nvar p3 = Promise.all([1,2,3, Promise.reject(555)]);\n\n// using setTimeout we can execute code after the stack is empty\nsetTimeout(function() {\n    console.log(p);\n    console.log(p2);\n    console.log(p3);\n});\n\n// logs\n// Promise { &#x3C;state>: \"fulfilled\", &#x3C;value>: Array[3] }\n// Promise { &#x3C;state>: \"fulfilled\", &#x3C;value>: Array[4] }\n// Promise { &#x3C;state>: \"rejected\", &#x3C;reason>: 555 }\n</code></pre>\n<h3>Asynchronicity or synchronicity of <code>Promise.all</code></h3>\n<p>This following example demonstrates the asynchronicity (or synchronicity, if the iterable passed is empty) of <code>Promise.all</code>:</p>\n<pre><code>// we are passing as argument an array of promises that are already resolved,\n// to trigger Promise.all as soon as possible\nvar resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nvar p = Promise.all(resolvedPromisesArray);\n// immediately logging the value of p\nconsole.log(p);\n\n// using setTimeout we can execute code after the stack is empty\nsetTimeout(function() {\n    console.log('the stack is now empty');\n    console.log(p);\n});\n\n// logs, in order:\n// Promise { &#x3C;state>: \"pending\" }\n// the stack is now empty\n// Promise { &#x3C;state>: \"fulfilled\", &#x3C;value>: Array[2] }\n</code></pre>\n<p>The same thing happens if <code>Promise.all</code> rejects:</p>\n<pre><code>var mixedPromisesArray = [Promise.resolve(33), Promise.reject(44)];\nvar p = Promise.all(mixedPromisesArray);\nconsole.log(p);\nsetTimeout(function() {\n    console.log('the stack is now empty');\n    console.log(p);\n});\n\n// logs\n// Promise { &#x3C;state>: \"pending\" }\n// the stack is now empty\n// Promise { &#x3C;state>: \"rejected\", &#x3C;reason>: 44 }\n</code></pre>\n<p>But, <code>Promise.all</code> resolves synchronously <strong>if and only if</strong> the iterable passed is empty:</p>\n<pre><code>var p = Promise.all([]); // will be immediately resolved\nvar p2 = Promise.all([1337, \"hi\"]); // non-promise values will be ignored, but the evaluation will be done asynchronously\nconsole.log(p);\nconsole.log(p2)\nsetTimeout(function() {\n    console.log('the stack is now empty');\n    console.log(p2);\n});\n\n// logs\n// Promise { &#x3C;state>: \"fulfilled\", &#x3C;value>: Array[0] }\n// Promise { &#x3C;state>: \"pending\" }\n// the stack is now empty\n// Promise { &#x3C;state>: \"fulfilled\", &#x3C;value>: Array[2] }\n</code></pre>\n<h3><code>Promise.all</code> fail-fast behavior</h3>\n<p><code>Promise.all</code> is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then <code>Promise.all</code> will reject immediately.</p>\n<pre><code>var p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('one'), 1000);\n});\nvar p2 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('two'), 2000);\n});\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('three'), 3000);\n});\nvar p4 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('four'), 4000);\n});\nvar p5 = new Promise((resolve, reject) => {\n  reject(new Error('reject'));\n});\n\n// Using .catch:\nPromise.all([p1, p2, p3, p4, p5])\n.then(values => {\n  console.log(values);\n})\n.catch(error => {\n  console.error(error.message)\n});\n\n//From console:\n//\"reject\"\n</code></pre>\n<p>It is possible to change this behavior by handling possible rejections:</p>\n<pre><code>var p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('p1_delayed_resolution'), 1000);\n});\n\nvar p2 = new Promise((resolve, reject) => {\n  reject(new Error('p2_immediate_rejection'));\n});\n\nPromise.all([\n  p1.catch(error => { return error }),\n  p2.catch(error => { return error }),\n]).then(values => {\n  console.log(values[0]) // \"p1_delayed_resolution\"\n  console.error(values[1]) // \"Error: p2_immediate_rejection\"\n})\n</code></pre>"}