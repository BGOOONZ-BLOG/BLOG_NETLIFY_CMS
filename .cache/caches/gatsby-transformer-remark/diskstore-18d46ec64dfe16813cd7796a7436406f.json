{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-ef712835fb7afe869b12cb68f61c93f8--","val":"<p><strong>What we know:</strong></p>\n<p>A top-level <code>App</code> component returns <code>&#x3C;Button /></code> from its <code>render()</code> method.</p>\n<p><strong>Question:</strong></p>\n<blockquote>\n<p>What is the relationship between <code>&#x3C;Button /></code> and <code>this</code> in that <code>Button</code>'s <code>render()</code>?</p>\n</blockquote>\n<p><strong>Answer:</strong></p>\n<p><code>&#x3C;Button></code> is a React \"element\".<br>\nIf you log it, you will see a plain object like <code>{ type: Button, props: {} }</code>.</p>\n<p>The element does not represent anything on the screen at that point.<br>\nIt is a <em>description</em> of what <code>App</code> wants to be rendered.</p>\n<p>At some point, React will look at that description and think: \"Hmm, there was no <code>Button</code> here but now there should be. So I'll create a <code>Button</code> instance.\"</p>\n<p>This <code>Button</code> instance created by React is <code>this</code> value in the <code>render()</code> and lifecycle methods. It's only useful for calling <code>setState()</code> or reading the props and state.</p>\n<p>If <code>App</code> gets re-rendered and React sees a <code>&#x3C;Button /></code> in its output again, it will think: \"Hmm, I already have a <code>Button</code> instance exactly at the same spot. Rather than create a new one, I will just update props on the existing one and re-render it.\"</p>\n<p>Let's recap.</p>\n<p><code>&#x3C;Button /></code> is an element, a description of what should be rendered. <code>this</code> inside the <code>Button</code> is the actual instance React created based on that description.</p>\n<p><code>App</code> can return a different <code>&#x3C;Button /></code> element every time but as long as its key doesn't change, and it is still a <code>&#x3C;Button /></code> and not a <code>&#x3C;Door /></code>, React will keep using the same instance.</p>\n<p><strong>Question:</strong></p>\n<blockquote>\n<p>Does rendering <code>&#x3C;Button>&#x3C;Icon />&#x3C;/Button></code> guarantee that an <code>Icon</code> mounts?</p>\n</blockquote>\n<p>It doesn't. Ultimately it's always up to the component to decide what to do with its children. For example, the <code>Button</code> implementation could completely ignore them and render something else:</p>\n<pre><code class=\"language-jsx\">function Button(props) {\n    return &#x3C;h1>I render whatever I want&#x3C;/h1>;\n}\n</code></pre>\n<p>Interestingly, it could also render <code>children</code> multiple times:</p>\n<pre><code class=\"language-jsx\">function Button(props) {\n    return (\n        &#x3C;div>\n            I like to repeat things.\n            {props.children}\n            {props.children}\n            {props.children}\n        &#x3C;/div>\n    );\n}\n</code></pre>\n<p>Ultimately, <code>children</code> is not a special prop in any way except for JSX sugar syntax. <code>&#x3C;Button>&#x3C;Icon />&#x3C;/Button></code> is technically the same as <code>&#x3C;Button children={&#x3C;Icon />} /></code>, and it's up to the component how to treat its input props.</p>\n<p><strong>Question:</strong></p>\n<blockquote>\n<p>Can the <code>App</code> change anything in the <code>Button</code> output? What and how?</p>\n</blockquote>\n<p><strong>Answer:</strong></p>\n<p>There have been a few fun answers in the <a href=\"https://gist.github.com/gaearon/8fa9fdd2c4197ee0b52894877bf587a4\">quiz comments</a> so I will direct you to them. Indeed, since JavaScript doesn't provide any guarantees, technically you can hijack <code>Button</code> before React gets a chance to render it.</p>\n<p>However, normally there is no way for a parent component to control the child output except by two mechanisms: passing props and providing context. You probably already know about props, and I won't talk about the context because it's an experimental API and has a few pitfalls. Don't use context in apps unless <a href=\"https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076\">you know its pitfalls well</a>.</p>\n<p>Of course, if you get a DOM node for the component via refs, you can do anything you want with the DOM nodes of other components, but it will likely mess up React.</p>\n<h1>React.js</h1>\n<h3>Q1. If you want to import just the Component from the React library, what syntax do you use?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>import React.Component from 'react'</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>import [ Component ] from 'react'</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>import Component from 'react'</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>import { Component } from 'react'</code></li>\n</ul>\n<h3>Q2. If a function component should always render the same way given the same props, what is a simple performance optimization available for it?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Wrap it in the <code>React.memo</code> higher-order component.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Implement the <code>useReducer</code> Hook.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Implement the <code>useMemo</code> Hook.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Implement the <code>shouldComponentUpdate</code> lifecycle method.</li>\n</ul>\n<h3>Q3. How do you fix the syntax error that results from running this code?</h3>\n<pre><code class=\"language-js\">const person =(firstName, lastName) =>\n{\n  first: firstName,\n  last: lastName\n}\nconsole.log(person(\"Jill\", \"Wilson\"))\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Wrap the object in parentheses.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Call the function from another file.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add a return statement before the first curly brace.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Replace the object with an array.</li>\n</ul>\n<h3>Q4. If you see the following import in a file, what is being used for state management in the component?</h3>\n<p><code>import React, {useState} from 'react';</code></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] React Hooks</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> stateful components</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> math</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> class components</li>\n</ul>\n<h3>Q5. Using object literal enhancement, you can put values back into an object. When you log person to the console, what is the output?</h3>\n<pre><code class=\"language-js\">const name = 'Rachel';\nconst age = 31;\nconst person = { name, age };\nconsole.log(person);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>{{name: \"Rachel\", age: 31}}</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>{name: \"Rachel\", age: 31}</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>{person: \"Rachel\", person: 31}}</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>{person: {name: \"Rachel\", age: 31}}</code></li>\n</ul>\n<h3>Q6. What is the testing library most often associated with React?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Mocha</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Chai</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Sinon</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Jest</li>\n</ul>\n<h3>Q7. To get the first item from the array (\"cooking\") using array destructuring, how do you adjust this line?</h3>\n<pre><code class=\"language-js\">const topics = ['cooking', 'art', 'history'];\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const first = [\"cooking\", \"art\", \"history\"]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const [] = [\"cooking\", \"art\", \"history\"]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const [, first][\"cooking\", \"art\", \"history\"]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>const [first] = [\"cooking\", \"art\", \"history\"]</code></li>\n</ul>\n<h3>Q8. How do you handle passing through the component tree without having to pass props down manually at every level?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React Send</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React Pinpoint</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React Router</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] React Context</li>\n</ul>\n<h3>Q9. What should the console read when the following code is run?</h3>\n<pre><code class=\"language-js\">const [, , animal] = ['Horse', 'Mouse', 'Cat'];\nconsole.log(animal);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Horse</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Cat</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Mouse</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> undefined</li>\n</ul>\n<h3>10. What is the name of the tool used to take JSX and turn it into createElement calls?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> JSX Editor</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> ReactDOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Browser Buddy</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Babel</li>\n</ul>\n<h3>11. Why might you use useReducer over useState in a React component?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you want to replace Redux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when you need to manage more complex state in an app</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you want to improve performance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you want to break your production app</li>\n</ul>\n<h3>12. Which props from the props object is available to the component with the following syntax?</h3>\n<pre><code class=\"language-js\">&#x3C;Message {...props} />\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> any that have not changed</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] all of them</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> child props</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> any that have changed</li>\n</ul>\n<h3>13. Consider the following code from React Router. What do you call :id in the path prop?</h3>\n<pre><code class=\"language-js\">&#x3C;Route path=\"/:id\" />\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> This is a route modal</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] This is a route parameter</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> This is a route splitter</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> This is a route link</li>\n</ul>\n<h3>14. If you created a component called Dish and rendered it to the DOM, what type of element would be rendered?</h3>\n<hr>\n<pre><code class=\"language-js\">function Dish() {\n    return &#x3C;h1>Mac and Cheese&#x3C;/h1>;\n}\n\nReactDOM.render(&#x3C;Dish />, document.getElementById('root'));\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>div</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> section</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> component</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>h1</code></li>\n</ul>\n<h3>15. What does this React element look like given the following function? (Alternative: Given the following code, what does this React element look like?)</h3>\n<pre><code class=\"language-js\">React.createElement('h1', null, \"What's happening?\");\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;h1 props={null}>What's happening?&#x3C;/h1></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>&#x3C;h1>What's happening?&#x3C;/h1></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;h1 id=\"component\">What's happening?&#x3C;/h1></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;h1 id=\"element\">What's happening?&#x3C;/h1></code></li>\n</ul>\n<h3>16. What property do you need to add to the Suspense component in order to display a spinner or loading state?</h3>\n<hr>\n<pre><code class=\"language-js\">function MyComponent() {\n    return (\n        &#x3C;Suspense>\n            &#x3C;div>\n                &#x3C;Message />\n            &#x3C;/div>\n        &#x3C;/Suspense>\n    );\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> lazy</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> loading</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] fallback</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> spinner</li>\n</ul>\n<h3>17. What do you call the message wrapped in curly braces below?</h3>\n<pre><code class=\"language-js\">const message = 'Hi there';\nconst element = &#x3C;p>{message}&#x3C;/p>;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a JS function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a JS element</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a JS expression</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a JSX wrapper</li>\n</ul>\n<h3>18. What can you use to handle code splitting?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.memo</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.split</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>React.lazy</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.fallback</code></li>\n</ul>\n<h3>19. When do you use <code>useLayoutEffect</code>?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to optimize for all devices</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to complete the update</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to change the layout of the screen</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when you need the browser to paint before the effect runs</li>\n</ul>\n<h3>20. What is the difference between the click behaviors of these two buttons (assuming that this.handleClick is bound correctly)?</h3>\n<pre><code class=\"language-js\">A. &#x3C;button onClick={this.handleClick}>Click Me&#x3C;/button>\nB. &#x3C;button onClick={event => this.handleClick(event)}>Click Me&#x3C;/button>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Button A will not have access to the event object on click of the button.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Button B will not fire the handler this.handleClick successfully.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Button A will not fire the handler this.handleClick successfully.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] There is no difference.</li>\n</ul>\n<h3>21. How do you destructure the properties that are sent to the Dish component?</h3>\n<hr>\n<pre><code class=\"language-js\">function Dish(props) {\n    return (\n        &#x3C;h1>\n            {props.name} {props.cookingTime}\n        &#x3C;/h1>\n    );\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>function Dish([name, cookingTime]) { return &#x3C;h1>{name} {cookingTime}&#x3C;/h1>; }</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>function Dish({name, cookingTime}) { return &#x3C;h1>{name} {cookingTime}&#x3C;/h1>; }</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>function Dish(props) { return &#x3C;h1>{name} {cookingTime}&#x3C;/h1>; }</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>function Dish(...props) { return &#x3C;h1>{name} {cookingTime}&#x3C;/h1>; }</code></li>\n</ul>\n<h3>22. When might you use <code>React.PureComponent</code>?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you do not want your component to have props</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you have sibling components that need to be compared</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when you want a default implementation of <code>shouldComponentUpdate()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you do not want your component to have state</li>\n</ul>\n<h3>23. Why is it important to avoid copying the values of props into a component's state where possible?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> because you should never mutate state</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> because <code>getDerivedStateFromProps()</code> is an unsafe method to use</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] because you want to allow a component to update in response to changes in the props</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> because you want to allow data to flow back up to the parent</li>\n</ul>\n<h3>24. What is the children prop?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a property that adds child components to state</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a property that lets you pass components as data to other components</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a property that lets you set an array as a property</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a property that lets you pass data to child elements</li>\n</ul>\n<h3>25. Which attribute do you use to replace innerHTML in the browser DOM?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> injectHTML</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] dangerouslySetInnerHTML</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> weirdSetInnerHTML</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> strangeHTML</li>\n</ul>\n<h3>26. Which of these terms commonly describe React applications?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] declarative</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> integrated</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> closed</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> imperative</li>\n</ul>\n<h3>27. When using webpack, why would you need to use a loader?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to put together physical file folders</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] to preprocess files</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to load external data</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to load the website into everyone's phone</li>\n</ul>\n<h3>28. A representation of a user interface that is kept in memory and is synced with the \"real\" DOM is called what?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] virtual DOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> DOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> virtual elements</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> shadow DOM</li>\n</ul>\n<h3>29. You have written the following code but nothing is rendering. How do you fix this problem?</h3>\n<pre><code class=\"language-js\">const Heading = () => {\n    &#x3C;h1>Hello!&#x3C;/h1>;\n};\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add a render function.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Change the curly braces to parentheses or add a return statement before the <code>h1</code> tag.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Move the <code>h1</code> to another component.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Surround the <code>h1</code> in a <code>div</code>.</li>\n</ul>\n<h3>Q30. To create a constant in JavaScript, which keyword do you use?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] const</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> let</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> constant</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> var</li>\n</ul>\n<h3>Q31. What do you call a React component that catches JavaScript errors anywhere in the child component tree?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> error bosses</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> error catchers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> error helpers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] error boundaries</li>\n</ul>\n<h3>Q32. In which lifecycle method do you make requests for data in a class component?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> constructor</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] componentDidMount</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> componentWillReceiveProps</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> componentWillMount</li>\n</ul>\n<h3>Q33. React components are composed to create a user interface. How are components composed?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> by putting them in the same file</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] by nesting components</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> with webpack</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> with code splitting</li>\n</ul>\n<h3>Q34. All React components must act like <strong>_</strong> with respect to their props.</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> monads</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] pure functions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> recursive functions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> higher-order functions</li>\n</ul>\n<h3>Q35. Why might you use a ref?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] to directly access the DOM node</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to refer to another JS file</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to call a function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to bind the function</li>\n</ul>\n<h3>Q36. What is <code>[e.target.id]</code> called in the following code snippet?</h3>\n<pre><code class=\"language-js\">handleChange(e) {\n  this.setState({ [e.target.id]: e.target.value })\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a computed property name</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a set value</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a dynamic key</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a JSX code string</li>\n</ul>\n<h3>Q37. What is the name of this component?</h3>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    render() {\n        return &#x3C;h1>Look at the time: {time}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Clock</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It does not have a name prop.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React.Component</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Component</li>\n</ul>\n<h3>Q38. What is sent to an <code>Array.map()</code> function?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a callback function that is called once for each element in the array</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the name of another array to iterate over</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the number of times you want to call the function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a string describing what the function should do</li>\n</ul>\n<h3>Q39. Why is it a good idea to pass a function to <code>setState</code> instead of an object?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It provides better encapsulation.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It makes sure that the object is not mutated.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It automatically updates a component.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>setState</code> is asynchronous and might result in out of sync values.</li>\n</ul>\n<h3>Q40. What package contains the render() function that renders a React element tree to the DOM?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>ReactDOM</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>Render</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>DOM</code></li>\n</ul>\n<h3>Q41. How do you set a default value for an uncontrolled form field?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Use the <code>value</code> property.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Use the <code>defaultValue</code> property.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Use the <code>default</code> property.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It assigns one automatically.</li>\n</ul>\n<h3>Q42. What do you need to change about this code to get it to run?</h3>\n<pre><code class=\"language-js\">class clock extends React.Component {\n    render() {\n        return &#x3C;h1>Look at the time: {this.props.time}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add quotes around the return value</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Remove <code>this</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Remove the render method</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Capitalize <code>clock</code></li>\n</ul>\n<p><strong>Explanation:</strong> In JSX, lower-case tag names are considered to be HTML tags. Read <a href=\"https://reactjs.org/docs/jsx-in-depth.html#html-tags-vs.-react-components\">this article</a></p>\n<h3>Q43. Which Hook could be used to update the document's title?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>useEffect(function updateTitle() { document.title = name + ' ' + lastname; });</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(() => { title = name + ' ' + lastname; });</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(function updateTitle() { name + ' ' + lastname; });</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(function updateTitle() { title = name + ' ' + lastname; });</code></li>\n</ul>\n<h3>Q44. What can you use to wrap Component imports in order to load them lazily?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.fallback</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.split</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>React.lazy</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React.memo</code></li>\n</ul>\n<h3>Q45. How do you invoke setDone only when component mounts, using hooks?</h3>\n<hr>\n<pre><code class=\"language-js\">function MyComponent(props) {\n    const [done, setDone] = useState(false);\n\n    return &#x3C;h1>Done: {done}&#x3C;/h1>;\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(() => { setDone(true); });</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>useEffect(() => { setDone(true); }, []);</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(() => { setDone(true); }, [setDone]);</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>useEffect(() => { setDone(true); }, [done, setDone]);</code></li>\n</ul>\n<h3>Q46. Which of the following click event handlers will allow you to pass the name of the person to be hugged?</h3>\n<pre><code class=\"language-js\">class Huggable extends React.Component {\n  hug(id) {\n    console.log(\"hugging \" + id);\n  }\n\n  render() {\n    let name = \"kitteh\";\n    let button = // Missing Code\n    return button;\n  }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onClick={(name) => this.hug(name)}>Hug Button&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onClick={this.hug(e, name)}>Hug Button&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onClick={(e) => hug(e, name)}>Hug Button&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>&#x3C;button onClick={(e) => this.hug(name,e)}>Hug Button&#x3C;/button></code></li>\n</ul>\n<h3>Q47. Currently, <code>handleClick</code> is being called instead of passed as a reference. How do you fix this?</h3>\n<pre><code class=\"language-js\">&#x3C;button onClick={this.handleClick()}>Click this&#x3C;/button>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onClick={this.handleClick.bind(handleClick)}>Click this&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onClick={handleClick()}>Click this&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>&#x3C;button onClick={this.handleClick}>Click this&#x3C;/button></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x3C;button onclick={this.handleClick}>Click this&#x3C;/button></code></li>\n</ul>\n<h3>Q48. Which answer best describes a function component?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A function component is the same as a class component.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A function component accepts a single props object and returns a React element.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A function component is the only way to create a component.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A function component is required to create a React component.</li>\n</ul>\n<h3>Q49. Which library does the <code>fetch()</code> function come from?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> FetchJS</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> ReactDOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] No library. <code>fetch()</code> is supported by most browsers.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React</li>\n</ul>\n<h3>Q50. What will happen when this useEffect Hook is executed, assuming name is not already equal to John?</h3>\n<pre><code class=\"language-js\">useEffect(() => {\n    setName('John');\n}, [name]);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It will cause an error immediately.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It will execute the code inside the function, but only after waiting to ensure that no other component is accessing the name variable.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It will update the value of name once and not run again until name is changed from the outside.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It will cause an infinite loop.</li>\n</ul>\n<h3>Q51. Which choice will not cause a React component to rerender?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> if the component calls <code>this.setState(...)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the value of one of the component's props changes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> if the component calls <code>this.forceUpdate()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] one of the component's siblings rerenders</li>\n</ul>\n<h3>Q52. You have created a new method in a class component called handleClick, but it is not working. Which code is missing?</h3>\n<pre><code class=\"language-js\">class Button extends React.Component{\n\n  constructor(props) {\n    super(props);\n    // Missing line\n  }\n\n  handleClick() {...}\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>this.handleClick.bind(this);</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>props.bind(handleClick);</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>this.handleClick.bind();</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>this.handleClick = this.handleClick.bind(this);</code></li>\n</ul>\n<h3>Q53. React does not render two sibling elements unless they are wrapped in a fragment. Below is one way to render a fragment. What is the shorthand for this?</h3>\n<pre><code class=\"language-js\">&#x3C;React.Fragment>\n    &#x3C;h1>Our Staff&#x3C;/h1>\n    &#x3C;p>Our staff is available 9-5 to answer your questions&#x3C;/p>\n&#x3C;/React.Fragment>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;...>\n  &#x3C;h1>Our Staff&#x3C;/h1>\n  &#x3C;p>Our staff is available 9-5 to answer your questions&#x3C;/p>\n&#x3C;/...>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> B</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;//>\n  &#x3C;h1>Our Staff&#x3C;/h1>\n  &#x3C;p>Our staff is available 9-5 to answer your questions&#x3C;/p>\n&#x3C;///>\n</code></pre>\n<ul>\n<li>[✅] C</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;>\n    &#x3C;h1>Our Staff&#x3C;/h1>\n    &#x3C;p>Our staff is available 9-5 to answer your questions&#x3C;/p>\n&#x3C;/>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> D</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;Frag>\n    &#x3C;h1>Our Staff&#x3C;/h1>\n    &#x3C;p>Our staff is available 9-5 to answer your questions&#x3C;/p>\n&#x3C;/Frag>\n</code></pre>\n<h3>Q54. If you wanted to display the count state value in the component, what do you need to add to the curly braces in the <code>h1</code>?</h3>\n<pre><code class=\"language-js\">class Ticker extends React.component {\n    constructor(props) {\n        super(props);\n        this.state = { count: 0 };\n    }\n    render() {\n        return &#x3C;h1>{}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] this.state.count</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> count</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> state</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> state.count</li>\n</ul>\n<h3>Q55. Per the following code, when is the Hello component displayed?</h3>\n<pre><code class=\"language-js\">const greeting = isLoggedIn ? &#x3C;Hello /> : null;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> never</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when <code>isLoggedIn</code> is true</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when a user logs in</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when the Hello function is called</li>\n</ul>\n<h3>Q56. In the following code block, what type is orderNumber?</h3>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;Message orderNumber=\"16\" />, document.getElementById('root'));\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] string</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> boolean</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> object</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> number</li>\n</ul>\n<h3>Q57. You have added a style property to the <code>h1</code> but there is an unexpected token error when it runs. How do you fix this?</h3>\n<pre><code class=\"language-js\">const element = &#x3C;h1 style={ backgroundColor: \"blue\" }>Hi&#x3C;/h1>;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const element = &#x3C;h1 style=\"backgroundColor: \"blue\"\"}>Hi&#x3C;/h1>;</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>const element = &#x3C;h1 style={{backgroundColor: \"blue\"}}>Hi&#x3C;/h1>;</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const element = &#x3C;h1 style={blue}>Hi&#x3C;/h1>;</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>const element = &#x3C;h1 style=\"blue\">Hi&#x3C;/h1>;</code></li>\n</ul>\n<h3>Q58. Which function is used to update state variables in a React class component?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>replaceState</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>refreshState</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>updateState</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>setState</code></li>\n</ul>\n<h3>Q59. Consider the following component. What is the default color for the star?</h3>\n<pre><code class=\"language-js\">const Star = ({ selected = false }) => &#x3C;Icon color={selected ? 'red' : 'grey'} />;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> black</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> red</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] grey</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> white</li>\n</ul>\n<h3>Q60. Which answer best describes a function component?(Not sure answer)</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>A function component is the same as a class component.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>A function component accepts a single props object and returns a React element.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>A function component is the only way to create a component.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>A function component is required to create a React component.</code></li>\n</ul>\n<h3>Q61.Which library does the fetch() function come from?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>FetchJS</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>ReactDOM</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>No library. fetch() is supported by most browsers.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>React</code></li>\n</ul>\n<h3>Q62.What is the difference between the click behaviors of these two buttons(assuming that this.handleClick is bound correctly)</h3>\n<pre><code class=\"language-js\">  A. &#x3C;button onClick=this.handleClick>Click Me&#x3C;/button>\n  B. &#x3C;button onClick={event => this.handleClick(event)}>Click Me&#x3C;/button>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>Button A will not have access to the event object on click of the button</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>Button A will not fire the handler this.handleClick successfully</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>There is no difference</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>Button B will not fire the handler this.handleClick successfully</code></li>\n</ul>\n<h3>Q63.What will happen when this useEffect Hook is executed, assuming name is not already equal to John?</h3>\n<pre><code class=\"language-js\">useEffect(() => {\n    setName('John');\n}, [name]);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>It will cause an error immediately.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>It will execute the code inside the function, but only after waiting to ensure that no other component is accessing the name variable.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>It will update the value of name once and not run again until name is changed from the outside.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>It will cause an infinite loop.</code></li>\n</ul>\n<h3>Q64. How would you add to this code, from React Router, to display a component called About?</h3>\n<pre><code class=\"language-js\">&#x3C;Route path=\"/:id\" />\n</code></pre>\n<ul>\n<li>[✅] A</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;Route path=\"/:id\">\n    {' '}\n    &#x3C;About />\n&#x3C;/Route>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> B</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;Route path=\"/tid\" about={Component} />\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> C</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;Route path=\"/:id\" route={About} />\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> D</li>\n</ul>\n<pre><code class=\"language-js\">&#x3C;Route>\n    &#x3C;About path=\"/:id\" />\n&#x3C;/Route>\n</code></pre>\n<h3>Q65. Which class-based component is equivalent to this function component?</h3>\n<pre><code class=\"language-js\">const Greeting ({ name }) > &#x3C;h1>Hello {name}!&#x3C;/h1>;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A</li>\n</ul>\n<pre><code class=\"language-js\">class Greeting extends React.Component {\n    constructor() {\n        return &#x3C;h1>Hello {this.props.name}!&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> B</li>\n</ul>\n<pre><code class=\"language-js\">class Greeting extends React.Component {\n  &#x3C;h1>Hello {this.props.name}!&#x3C;/h1>;\n}\n</code></pre>\n<ul>\n<li>[✅] C</li>\n</ul>\n<pre><code class=\"language-js\">class Greeting extends React.Component {\n    render() {\n        return &#x3C;h1>Hello {this.props.name}!&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> D</li>\n</ul>\n<pre><code class=\"language-js\">class Greeting extends React.Component {\n    render({ name }) {\n        return &#x3C;h1>Hello {name}!&#x3C;/h1>;\n    }\n}\n</code></pre>\n<h3>Q66. Give the code below, what does the second argument that is sent to the render function describe?</h3>\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x3C;h1>Hi&#x3C;h1>,\n    document.getElementById('root')\n)\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] where the React element should be added to the DOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where to call the function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where the root component is</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where to create a new JavaScript file</li>\n</ul>\n<h3>Q67. Why should you use React Router's Link component instead of a basic <code>&#x3C;a></code> tag in React?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The link component allows the user to use the browser's <code>Back</code> button.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> There is no difference--the <code>Link</code> component is just another name for the <code>&#x3C;a></code> tag.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>&#x3C;a></code> tag will cause an error when used in React.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The <code>&#x3C;a></code> tag triggers a full page reload, while the <code>Link</code> component does not.</li>\n</ul>\n<h3>Q68. What is the first argument, <code>x</code>, that is sent to the <code>createElement</code> function?</h3>\n<pre><code class=\"language-js\">React.createElement(x, y, z);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] the element that should be created</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the order in which this element should be placed on the page</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the properties of the element</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> data that should be displayed in the element</li>\n</ul>\n<h3>Q69. Which class-based lifecycle method would be called at the same time as this effect Hook?</h3>\n<pre><code class=\"language-js\">useEffect(() => {\n    // do things\n}, []);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> componentWillUnmount</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] componentDidMount</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> render</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> componentDidUpdate</li>\n</ul>\n<h3>Q70. Given the code below, what does the second argument that is sent to the render function describe?</h3>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;h1>Hi&#x3C;/h1>, document.getElementById('root'));\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] where the React element should be added to the DOM</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where to call the function</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where the root component is</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> where to create a new JavaScript file</li>\n</ul>\n<h3>Q71. What is the first argument, x, that is sent to the <code>createElement</code> function?</h3>\n<p><code>React.createElement(x,y,z);</code></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] the element that should be created</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the order in which this element should be placed on the page</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the properties of the element</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> data that should be displayed in the element.</li>\n</ul>\n<h3>Q72. What is the name of this component?</h3>\n<pre><code class=\"language-js\">class Comp extends React.Component {\n    render() {\n        return &#x3C;h1>Look at the time: {time}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Comp</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> h1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React.Component</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Component</li>\n</ul>\n<p>This question might be an updated version of Q37.</p>\n<h3>Q73. When using a portal, what is the first argument?</h3>\n<pre><code class=\"language-js\">ReactDOM.createPortal(x, y);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the current state</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] the element to render</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the App component</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the page</li>\n</ul>\n<p><strong>Explanation:</strong> From official docs: <a href=\"https://reactjs.org/docs/portals.html\">Portals</a></p>\n<h3>Q74. What is <code>setCount</code>?</h3>\n<pre><code class=\"language-js\">const [count, setCount] = useState(0);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the initial state value</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a variable</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a state object</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a function to update the state</li>\n</ul>\n<p><strong>Reference:</strong> From official docs: <a href=\"https://reactjs.org/docs/hooks-state.html#:~:text=If%20we%20want%20to%20update%20the%20current\">Hooks-State</a></p>\n<h3>Q75. What is the use of map function below?</h3>\n<pre><code class=\"language-js\">const database = [user1:{},user2:{},user3:{}];\ndatabase.map((user)=>&#x3C;h1>user.data&#x3C;/h1>);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> gives a map of all the entries in database</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] returns a heading tag for every entry in the database containing it's data</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> returns one heading tag for all the entries in database</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> checks which entry in the database is suitable for heading tag</li>\n</ul>\n<h3>Q76. Describe what is happening in this code?</h3>\n<pre><code class=\"language-js\">const { name: firstName } = person;\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is creating a new object that contains the same name property as the person object.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is assigning the value of the person object's firstName property to a constant called name.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is retrieving the value of person.name.firstName.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It is assigning the value of the person object's name property to a constant called firstName.</li>\n</ul>\n<h3>Q77. What is wrong with this code?</h3>\n<pre><code class=\"language-js\">const MyComponent = ({ names }) => (\n  &#x3C;h1>Hello&#x3C;/h1>\n  &#x3C;p>Hello again&#x3C;/p>\n);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> React components cannot be defined using functions.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] React does not allow components to return more than one element.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The component needs to use the return keyword.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> String literals must be surrounded by quotes.</li>\n</ul>\n<h3>Q78. When using a portal, what is the second argument?</h3>\n<pre><code class=\"language-js\">ReactDOM.createPortal(x, y);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the App component</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the page</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the current state</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] the DOM element that exists outside of the parent component</li>\n</ul>\n<h3>Q79. Given this code, what will be printed in the</h3>\n<p><strong>tag?</strong></p>\n<pre><code class=\"language-js\">const MyComponent = ({ children }) => (\n  &#x3C;h1>{children.length}&#x3C;/h1>\n);\n...\n&#x3C;MyComponent>\n&#x3C;p>Hello&#x3C;/p>\n&#x3C;p>Goodbye&#x3C;/p>\n&#x3C;/MyComponent>\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It will produce an error saying \"cannot read property \"length\" of undefined.\"</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> undefined</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] 2</li>\n</ul>\n<h2>Q80. What is this pattern called?</h2>\n<pre><code class=\"language-js\">const [count, setCount] = useState(0);\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> object destructuring</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] array destructuring</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> spread operating</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> code pushing</li>\n</ul>"}