"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var queueResetCount = (0, _utils.debounce)(function () {
  if (window.DISQUSWIDGETS) {
    window.DISQUSWIDGETS.getCount({
      reset: true
    });
  }
}, 300, false);

var CommentCount = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(CommentCount, _React$Component);

  function CommentCount(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.shortname = typeof GATSBY_DISQUS_SHORTNAME !== "undefined" && GATSBY_DISQUS_SHORTNAME !== '' ? GATSBY_DISQUS_SHORTNAME : '';
    return _this;
  }

  var _proto = CommentCount.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.loadInstance();
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (this.props === nextProps) {
      return false;
    }

    return (0, _utils.shallowComparison)(this.props, nextProps);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.loadInstance();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cleanInstance();
  };

  _proto.loadInstance = function loadInstance() {
    if (window.document.getElementById('dsq-count-scr')) {
      queueResetCount();
    } else {
      (0, _utils.insertScript)("https://" + this.shortname + ".disqus.com/count.js", 'dsq-count-scr', window.document.body);
    }
  };

  _proto.cleanInstance = function cleanInstance() {
    (0, _utils.removeScript)('dsq-count-scr', window.document.body);
    window.DISQUSWIDGETS = undefined;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        config = _this$props.config,
        className = _this$props.className,
        placeholder = _this$props.placeholder,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["config", "className", "placeholder"]);
    var componentClass = "disqus-comment-count" + (className ? " " + className : '');
    return /*#__PURE__*/_react.default.createElement("span", (0, _extends2.default)({
      className: componentClass,
      "data-disqus-identifier": config.identifier,
      "data-disqus-url": config.url
    }, props), placeholder);
  };

  return CommentCount;
}(_react.default.Component);

exports.default = CommentCount;
CommentCount.defaultProps = {
  placeholder: '...'
};
CommentCount.propTypes = {
  config: _propTypes.default.shape({
    /*
    * Tells the Disqus service how to identify the current page.
    * When the Disqus embed is loaded, the identifier is used to look up
    * the correct thread.
    */
    identifier: _propTypes.default.string,

    /*
    * Tells the Disqus service the title of the current page.
    * This is used when creating the thread on Disqus.
    */
    title: _propTypes.default.string,

    /*
    * Tells the Disqus service the URL of the current page.
    * This URL is used when a thread is created so that Disqus knows which
    * page a thread belongs to.
    * (If undefined, Disqus will use the global.location.href)
    */
    url: _propTypes.default.string
  }),

  /*
  * This is the text that will be used as a placeholder prior to
  * loading the response.
  */
  placeholder: _propTypes.default.string,

  /*
  * This allows users to pass a custom class to the comment-count component
  */
  className: _propTypes.default.string
};