{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-17060702f8cad39732c33bcc85358e8f--","val":"<h2>My Commands:</h2>\n<h4>Find:</h4>\n<h1>To find files by case-insensitive extension (ex: .jpg, .jpg, .jpG):</h1>\n<p>find . -iname \"*.jpg\"</p>\n<h1>To find directories:</h1>\n<p>find . -type d</p>\n<h1>To find files:</h1>\n<p>find . -type f</p>\n<h1>To find files by octal permission:</h1>\n<p>find . -type f -perm 777</p>\n<h1>To find files with setuid bit set:</h1>\n<p>find . -xdev ( -perm -4000 ) -type f -print0 | xargs -0 ls -l</p>\n<h1>To find files with extension '.txt' and remove them:</h1>\n<p>find ./path/ -name '*.txt' -exec rm '{}' ;</p>\n<h1>To find files with extension '.txt' and look for a string into them:</h1>\n<p>find ./path/ -name '*.txt' | xargs grep 'string'</p>\n<h1>To find files with size bigger than 5 Mebibyte and sort them by size:</h1>\n<p>find . -size +5M -type f -print0 | xargs -0 ls -Ssh | sort -z</p>\n<h1>To find files bigger than 2 Megabyte and list them:</h1>\n<p>find . -type f -size +200000000c -exec ls -lh {} ; | awk '{ print $9 \": \" $5 }'</p>\n<h1>To find files modified more than 7 days ago and list file information:</h1>\n<p>find . -type f -mtime +7d -ls</p>\n<h1>To find symlinks owned by a user and list file information:</h1>\n<p>find . -type l -user <username-or-userid> -ls</p>\n<h1>To search for and delete empty directories:</h1>\n<p>find . -type d -empty -exec rmdir {} ;</p>\n<h1>To search for directories named build at a max depth of 2 directories:</h1>\n<p>find . -maxdepth 2 -name build -type d</p>\n<h1>To search all files who are not in .git directory:</h1>\n<p>find . ! -iwholename '<em>.git</em>' -type f</p>\n<h1>To find all files that have the same node (hard link) as MY<em>FILE</em>HERE:</h1>\n<p>find . -type f -samefile MY<em>FILE</em>HERE 2>/dev/null</p>\n<h1>To find all files in the current directory and modify their permissions:</h1>\n<p>find . -type f -exec chmod 644 {} ;</p>\n<hr>\n<h1>1. Remove spaces from file and folder names and then remove numbers from files and folder names....</h1>\n<h3>Description: need to : <code>sudo apt install rename</code></h3>\n<blockquote>\n<p>Notes: Issue when renaming file without numbers collides with existing file name...</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name \"* *\" -type d | rename 's/ /_/g'\nfind . -name \"* *\" -type f | rename 's/ /_/g'\n</code></pre>\n<pre><code class=\"language-sh\">```sh\nfind $dir -type f | sed 's|\\(.*/\\)[^A-Z]*\\([A-Z].*\\)|mv \\\"&#x26;\\\" \\\"\\1\\2\\\"|' | sh\n\nfind $dir -type d | sed 's|\\(.*/\\)[^A-Z]*\\([A-Z].*\\)|mv \\\"&#x26;\\\" \\\"\\1\\2\\\"|' | sh\n\nfor i in *.html; do mv \"$i\" \"${i%-*}.html\"; done\n\nfor i in *.*; do mv \"$i\" \"${i%-*}.${i##*.}\"; done\n\n---\n### Description: combine the contents of every file in the contaning directory.\n\n>Notes: this includes the contents of the file it's self...\n\n###### code:\n\n```js\n//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process')\n  .execSync('cat *')\n  .toString('UTF-8');\nfs.writeFile('output.md', cat, err => {\n  if (err) throw err;\n});\n</code></pre>\n<hr>\n<h1>2. Download Website Using Wget:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes: ==> sudo apt install wget</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">wget --limit-rate=200k --no-clobber --convert-links --random-wait -r -p -E -e robots=off -U mozilla https://bootcamp42.gitbook.io/python/\n</code></pre>\n<hr>\n<h1>3. Clean Out Messy Git Repo:</h1>\n<h3>Description: recursively removes git related folders as well as internal use files / attributions in addition to empty folders</h3>\n<blockquote>\n<p>Notes: To clear up clutter in repositories that only get used on your local machine.</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -empty -type d -print -delete\n\nfind . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} +\n\nfind . \\( -name \"*SECURITY.txt\" -o -name \"*RELEASE.txt\" -o  -name \"*CHANGELOG.txt\" -o -name \"*LICENSE.txt\" -o -name \"*CONTRIBUTING.txt\" -name \"*HISTORY.md\" -o -name \"*LICENSE\" -o -name \"*SECURITY.md\" -o -name \"*RELEASE.md\" -o  -name \"*CHANGELOG.md\" -o -name \"*LICENSE.md\" -o -name \"*CODE_OF_CONDUCT.md\" -o -name \"*CONTRIBUTING.md\" \\) -exec rm -rf -- {} +\n</code></pre>\n<hr>\n<h1>4. clone all of a user's git repositories</h1>\n<h3>Description: clone all of a user or organization's git repositories.</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<h1>Generalized:</h1>\n<pre><code class=\"language-sh\">CNTX={users|orgs}; NAME={username|orgname}; PAGE=1\ncurl \"https://api.github.com/$CNTX/$NAME/repos?page=$PAGE&#x26;per_page=100\" |\n  grep -e 'git_url*' |\n  cut -d \\\" -f 4 |\n  xargs -L1 git clone\n</code></pre>\n<h1>Clone all Git User</h1>\n<pre><code class=\"language-sh\">CNTX={users}; NAME={bgoonz}; PAGE=1\ncurl \"https://api.github.com/$CNTX/$NAME/repos?page=$PAGE&#x26;per_page=200\"?branch=master |\n  grep -e 'git_url*' |\n  cut -d \\\" -f 4 |\n  xargs -L1 git clone\n</code></pre>\n<h1>Clone all Git Organization:</h1>\n<pre><code class=\"language-sh\">CNTX={organizations}; NAME={TheAlgorithms}; PAGE=1\ncurl \"https://api.github.com/$CNTX/$NAME/repos?page=$PAGE&#x26;per_page=200\"?branch=master |\n  grep -e 'git_url*' |\n  cut -d \\\" -f 4 |\n  xargs -L1 git clone\n</code></pre>\n<hr>\n<h1>5. Git Workflow</h1>\n<h3>Description:</h3>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git pull\ngit init\ngit add .\ngit commit -m\"update\"\ngit push -u origin master\n</code></pre>\n<pre><code class=\"language-sh\">git init\ngit add .\ngit commit -m\"update\"\ngit push -u origin main\n</code></pre>\n<pre><code class=\"language-sh\">git init\ngit add .\ngit commit -m\"update\"\ngit push -u origin bryan-guner\n</code></pre>\n<pre><code class=\"language-sh\">git init\ngit add .\ngit commit -m\"update\"\ngit push -u origin gh-pages\n</code></pre>\n<pre><code class=\"language-sh\">git init\ngit add .\ngit commit -m\"update\"\ngit push -u origin preview\n</code></pre>\n<hr>\n<h1>6. Recursive Unzip In Place</h1>\n<h3>Description: recursively unzips folders and then deletes the zip file by the same name.</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name \"*.zip\" | while read filename; do unzip -o -d \"`dirname \"$filename\"`\" \"$filename\"; done;\n\nfind . -name \"*.zip\" -type f -print -delete\n</code></pre>\n<hr>\n<h1>7. git pull keeping local changes:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git stash\ngit pull\ngit stash pop\n</code></pre>\n<hr>\n<h1>8. Prettier Code Formatter:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo npm i prettier -g\n\nprettier --write .\n</code></pre>\n<hr>\n<h1>9. Pandoc</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find ./ -iname \"*.md\" -type f -exec sh -c 'pandoc --standalone \"${0}\" -o \"${0%.md}.html\"' {} \\;\n\nfind ./ -iname \"*.html\" -type f -exec sh -c 'pandoc --wrap=none --from html --to markdown_strict \"${0}\" -o \"${0%.html}.md\"' {} \\;\n\nfind ./ -iname \"*.docx\" -type f -exec sh -c 'pandoc \"${0}\" -o \"${0%.docx}.md\"' {} \\;\n</code></pre>\n<hr>\n<h1>10. Gitpod Installs</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo apt install tree\nsudo apt install pandoc -y\nsudo apt install rename -y\nsudo apt install black -y\nsudo apt install wget -y\nnpm i lebab -g\nnpm i prettier -g\nnpm i npm-recursive-install -g\n</code></pre>\n<pre><code class=\"language-sh\">black .\n\nprettier --write .\nnpm-recursive-install\n</code></pre>\n<hr>\n<h1>11. Repo Utils Package:</h1>\n<h3>Description: my standard repo utis package</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">npm i @bgoonz11/repoutils\n</code></pre>\n<hr>\n<h1>12. Unix Tree Package Usage:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">tree -d -I  'node_modules'\n\ntree  -I  'node_modules'\n\ntree -f  -I  'node_modules' >TREE.md\n\ntree -f -L 2  >README.md\n\ntree -f  -I  'node_modules' >listing-path.md\n\ntree -f  -I  'node_modules' -d >TREE.md\n\ntree -f >README.md\n</code></pre>\n<hr>\n<h1>13. Find &#x26; Replace string in file &#x26; folder names recursively..</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -type f -exec rename 's/string1/string2/g' {} +\n\nfind . -type d -exec rename 's/-master//g' {} +\n\nfind . -type f -exec rename 's/\\.download//g' {} +\n\nfind . -type d -exec rename 's/-main//g' {} +\n\nrename 's/\\.js\\.download$/.js/' *.js\\.download\n\nrename 's/\\.html\\.markdown$/.md/' *.html\\.markdown\n\nfind . -type d -exec rename 's/es6//g' {} +\n</code></pre>\n<hr>\n<h1>14. Remove double extensions :</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">#!/bin/bash\n\nfor file in *.md.md\ndo\n    mv \"${file}\" \"${file%.md}\"\ndone\n\n#!/bin/bash\n\nfor file in *.html.html\ndo\n    mv \"${file}\" \"${file%.html}\"\ndone\n</code></pre>\n<pre><code class=\"language-sh\">#!/bin/bash\n\nfor file in *.html.png\ndo\n    mv \"${file}\" \"${file%.png}\"\ndone\n\nfor file in *.jpg.jpg\ndo\n    mv \"${file}\" \"${file%.png}\"\ndone\n</code></pre>\n<hr>\n<h1>15. Truncate folder names down to 12 characters:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">for d in ./*; do mv $d ${d:0:12}; done\n</code></pre>\n<hr>\n<h1>16.Appendir.js</h1>\n<h3>Description: combine the contents of every file in the contaning directory.</h3>\n<blockquote>\n<p>Notes: this includes the contents of the file it's self...</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-js\">//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});\n</code></pre>\n<hr>\n<h1>17. Replace space in filename with underscore</h1>\n<h3>Description: followed by replace <code>'#' with '_'</code> in directory name</h3>\n<blockquote>\n<p>Notes: Can be re-purposed to find and replace any set of strings in file or folder names.</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name \"* *\" -type f | rename 's/_//g'\n\nfind . -name \"* *\" -type d | rename 's/#/_/g'\n</code></pre>\n<hr>\n<h1>18. Filter &#x26; delete files by name and extension</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name '.bin' -type d -prune -exec rm -rf '{}' +\n\nfind . -name '*.html' -type d -prune -exec rm -rf '{}' +\n\nfind . -name 'nav-index' -type d -prune -exec rm -rf '{}' +\n\nfind . -name 'node-gyp' -type d -prune -exec rm -rf '{}' +\n\nfind . -name 'deleteme.txt' -type f -prune -exec rm -rf '{}' +\n\nfind . -name 'right.html' -type f -prune -exec rm -rf '{}' +\n\nfind . -name 'left.html' -type f -prune -exec rm -rf '{}' +\n</code></pre>\n<hr>\n<h1>19. Remove lines containing string:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes: Remove lines not containing <code>'.js'</code></p>\n</blockquote>\n<pre><code class=\"language-sh\">sudo sed -i '/\\.js/!d' ./*scrap2.md\n</code></pre>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo sed -i '/githubusercontent/d' ./*sandbox.md\n\nsudo sed -i '/githubusercontent/d' ./*scrap2.md\n\nsudo sed -i '/github\\.com/d' ./*out.md\n\nsudo sed -i '/author/d' ./*\n</code></pre>\n<hr>\n<h1>20. Remove duplicate lines from a text file</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:\n//...syntax of uniq...//\n$uniq [OPTION] [INPUT[OUTPUT]]\nThe syntax of this is quite easy to understand. Here, INPUT refers to the input file in which repeated lines need to be filtered out and if INPUT isn't specified then uniq reads from the standard input. OUTPUT refers to the output file in which you can store the filtered output generated by uniq command and as in case of INPUT if OUTPUT isn't specified then uniq writes to the standard output.</p>\n</blockquote>\n<p>Now, let's understand the use of this with the help of an example. Suppose you have a text file named kt.txt which contains repeated lines that needs to be omitted. This can simply be done with uniq.</p>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo apt install uniq\nuniq -u input.txt output.txt\n</code></pre>\n<hr>\n<h1>21. Remove lines containing string:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo sed -i '/githubusercontent/d' ./*sandbox.md\n\nsudo sed -i '/githubusercontent/d' ./*scrap2.md\n\nsudo sed -i '/github\\.com/d' ./*out.md\n\n---\ntitle: add_days\ntags: date,intermediate\nfirstSeen: 2020-10-28T16:19:04+02:00\nlastUpdated: 2020-10-28T16:19:04+02:00\n---\n\nsudo sed -i '/title:/d' ./*output.md\nsudo sed -i '/firstSeen/d' ./*output.md\nsudo sed -i '/lastUpdated/d' ./*output.md\nsudo sed -i '/tags:/d' ./*output.md\n\nsudo sed -i '/badstring/d' ./*\n\nsudo sed -i '/stargazers/d' ./repo.txt\nsudo sed -i '/node_modules/d' ./index.html\nsudo sed -i '/right\\.html/d' ./index.html\nsudo sed -i '/right\\.html/d' ./right.html\n</code></pre>\n<hr>\n<h1>22. Zip directory excluding .git and node_modules all the way down (Linux)</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">#!/bin/bash\nTSTAMP=`date '+%Y%m%d-%H%M%S'`\nzip -r $1.$TSTAMP.zip $1 -x \"**.git/*\" -x \"**node_modules/*\" `shift; echo $@;`\n\nprintf \"\\nCreated: $1.$TSTAMP.zip\\n\"\n\n# usage:\n# - zipdir thedir\n# - zip thedir -x \"**anotherexcludedsubdir/*\"    (important the double quotes to prevent glob expansion)\n\n# if in windows/git-bash, add 'zip' command this way:\n# https://stackoverflow.com/a/55749636/1482990\n</code></pre>\n<hr>\n<h1>23. Delete files containing a certain string:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . | xargs grep -l www.redhat.com | awk '{print \"rm \"$1}' > doit.sh\nvi doit.sh // check for murphy and his law\nsource doit.sh\n</code></pre>\n<hr>\n<h1>24.</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">#!/bin/sh\n\n# find ./ | grep -i \"\\.*$\" >files\nfind ./ | sed -E -e 's/([^ ]+[ ]+){8}//' | grep -i \"\\.*$\">files\nlisting=\"files\"\n\nout=\"\"\n\nhtml=\"sitemap.html\"\nout=\"basename $out.html\"\nhtml=\"sitemap.html\"\ncmd() {\n\n  echo '  &#x3C;!DOCTYPE html>'\n  echo '&#x3C;html>'\n  echo '&#x3C;head>'\n\n  echo '  &#x3C;meta http-equiv=\"Content-Type\" content=\"text/html\">'\n\n  echo '  &#x3C;meta name=\"Author\" content=\"Bryan Guner\">'\n  echo '&#x3C;link rel=\"stylesheet\" href=\"./assets/prism.css\">'\n  echo ' &#x3C;link rel=\"stylesheet\" href=\"./assets/style.css\">'\n  echo ' &#x3C;script async defer src=\"./assets/prism.js\">&#x3C;/script>'\n\n  echo \"  &#x3C;title> directory &#x3C;/title>\"\n    echo '&#x3C;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/bgoonz/GIT-CDN-FILES/mdn-article.css\">'\n  echo '&#x3C;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/bgoonz/GIT-CDN-FILES/markdown-to-html-style.css\">'\n  echo \"\"\n  echo '&#x3C;style>'\n\necho '    a {'\necho '      color: black;'\necho '    }'\necho ''\necho '    li {'\necho '      border: 1px solid black !important;'\necho '      font-size: 20px;'\necho '      letter-spacing: 0px;'\necho '      font-weight: 700;'\necho '      line-height: 16px;'\necho '      text-decoration: none !important;'\necho '      text-transform: uppercase;'\necho '      background: #194ccdaf !important;'\necho '      color: black !important;'\necho '      border: none;'\necho '      cursor: pointer;'\necho '      justify-content: center;'\necho '      padding: 30px 60px;'\necho '      height: 48px;'\necho '      text-align: center;'\necho '      white-space: normal;'\necho '      border-radius: 10px;'\necho '      min-width: 45em;'\necho '      padding: 1.2em 1em 0;'\necho '      box-shadow: 0 0 5px;'\necho '      margin: 1em;'\necho '      display: grid;'\necho '      -webkit-border-radius: 10px;'\necho '      -moz-border-radius: 10px;'\necho '      -ms-border-radius: 10px;'\necho '      -o-border-radius: 10px;'\necho '    }'\necho '  &#x3C;/style>'\n  echo '&#x3C;/head>'\n\n  echo '&#x3C;body>'\n\n  echo \"\"\n\n  # continue with the HTML stuff\n\n  echo \"\"\n\n  echo \"\"\n\n  echo \"&#x3C;ul>\"\n\n  awk '{print \"&#x3C;li>&#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x26;nbsp;&#x3C;/a>&#x3C;/li>\"}' $listing\n\n  # awk '{print \"&#x3C;li>\"};\n\n  #     {print \" &#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x3C;/a>&#x3C;/li>&#x26;nbsp;\"}' \\ $listing\n\n  echo \"\"\n\n  echo \"&#x3C;/ul>\"\n\n  echo \"&#x3C;/body>\"\n\n  echo \"&#x3C;/html>\"\n\n}\n\ncmd $listing --sort=extension >>$html\n</code></pre>\n<hr>\n<h1>25. Index of Iframes</h1>\n<h3>Description: Creates an index.html file that contains all the files in the working directory or any of it's sub folders as iframes instead of anchor tags.</h3>\n<blockquote>\n<p>Notes: Useful Follow up Code:</p>\n</blockquote>\n<pre><code class=\"language-sh\"></code></pre>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">#!/bin/sh\n\n# find ./ | grep -i \"\\.*$\" >files\nfind ./ | sed -E -e 's/([^ ]+[ ]+){8}//' | grep -i \"\\.*$\">files\nlisting=\"files\"\n\nout=\"\"\n\nhtml=\"index.html\"\nout=\"basename $out.html\"\nhtml=\"index.html\"\ncmd() {\n\n  echo '  &#x3C;!DOCTYPE html>'\n  echo '&#x3C;html>'\n  echo '&#x3C;head>'\n\n  echo '  &#x3C;meta http-equiv=\"Content-Type\" content=\"text/html\">'\n\n  echo '  &#x3C;meta name=\"Author\" content=\"Bryan Guner\">'\n  echo '&#x3C;link rel=\"stylesheet\" href=\"./assets/prism.css\">'\n  echo ' &#x3C;link rel=\"stylesheet\" href=\"./assets/style.css\">'\n  echo ' &#x3C;script async defer src=\"./assets/prism.js\">&#x3C;/script>'\n\n  echo \"  &#x3C;title> directory &#x3C;/title>\"\n\n  echo \"\"\n  echo '&#x3C;style>'\n\necho '    a {'\necho '      color: black;'\necho '    }'\necho ''\necho '    li {'\necho '      border: 1px solid black !important;'\necho '      font-size: 20px;'\necho '      letter-spacing: 0px;'\necho '      font-weight: 700;'\necho '      line-height: 16px;'\necho '      text-decoration: none !important;'\necho '      text-transform: uppercase;'\necho '      background: #194ccdaf !important;'\necho '      color: black !important;'\necho '      border: none;'\necho '      cursor: pointer;'\necho '      justify-content: center;'\necho '      padding: 30px 60px;'\necho '      height: 48px;'\necho '      text-align: center;'\necho '      white-space: normal;'\necho '      border-radius: 10px;'\necho '      min-width: 45em;'\necho '      padding: 1.2em 1em 0;'\necho '      box-shadow: 0 0 5px;'\necho '      margin: 1em;'\necho '      display: grid;'\necho '      -webkit-border-radius: 10px;'\necho '      -moz-border-radius: 10px;'\necho '      -ms-border-radius: 10px;'\necho '      -o-border-radius: 10px;'\necho '    }'\necho '  &#x3C;/style>'\n  echo '&#x3C;/head>'\n\n  echo '&#x3C;body>'\n\n  echo \"\"\n\n  # continue with the HTML stuff\n\n  echo \"\"\n\n  echo \"\"\n\n  echo \"&#x3C;ul>\"\n\n  awk '{print \"&#x3C;iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\\\"\"$1\"\\\">\",\"&#x3C;/iframe>\"}' $listing\n\n  # awk '{print \"&#x3C;li>\"};\n\n  #     {print \" &#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x3C;/a>&#x3C;/li>&#x26;nbsp;\"}' \\ $listing\n\n  echo \"\"\n\n  echo \"&#x3C;/ul>\"\n\n  echo \"&#x3C;/body>\"\n\n  echo \"&#x3C;/html>\"\n\n}\n\ncmd $listing --sort=extension >>$html\n</code></pre>\n<hr>\n<h1>26. Filter Corrupted Git Repo For Troublesome File:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git filter-branch --index-filter 'git rm -r --cached --ignore-unmatch assets/_index.html' HEAD\n</code></pre>\n<hr>\n<h1>27. OVERWRITE LOCAL CHANGES:</h1>\n<h3>Description:</h3>\n<p>Important: If you have any local changes, they will be lost. With or without --hard option, any local commits that haven't been pushed will be lost.[*]\nIf you have any files that are not tracked by Git (e.g. uploaded user content), these files will not be affected.</p>\n<blockquote>\n<p>Notes:\nFirst, run a fetch to update all origin/<branch> refs to latest:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git fetch --all\n# Backup your current branch:\n\ngit branch backup-master\n# Then, you have two options:\n\ngit reset --hard origin/master\n# OR If you are on some other branch:\n\ngit reset --hard origin/&#x3C;branch_name>\n# Explanation:\n# git fetch downloads the latest from remote without trying to merge or rebase anything.\n\n# Then the git reset resets the master branch to what you just fetched. The --hard option changes all the files in your working tree to match the files in origin/master\ngit fetch --all\ngit reset --hard origin/master\n</code></pre>\n<hr>\n<h1>28. Remove Submodules:</h1>\n<h3>Description: To remove a submodule you need to:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<blockquote>\n<p>Delete the relevant section from the .gitmodules file.\nStage the .gitmodules changes git add .gitmodules\nDelete the relevant section from .git/config.\nRun git rm --cached path<em>to</em>submodule (no trailing slash).\nRun rm -rf .git/modules/path<em>to</em>submodule (no trailing slash).\nCommit git commit -m \"Removed submodule \"\nDelete the now untracked submodule files rm -rf path<em>to</em>submodule</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git submodule deinit\n</code></pre>\n<hr>\n<h1>29. GET GISTS</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo apt install wget\n\nwget -q -O - https://api.github.com/users/bgoonz/gists | grep raw_url | awk -F\\\" '{print $4}' | xargs -n3 wget\n\nwget -q -O - https://api.github.com/users/amitness/gists | grep raw_url | awk -F\\\" '{print $4}' | xargs -n3 wget\n\nwget -q -O - https://api.github.com/users/drodsou/gists | grep raw_url | awk -F\\\" '{print $4}' | xargs -n1 wget\n\nwget -q -O - https://api.github.com/users/thomasmb/gists | grep raw_url | awk -F\\\" '{print $4}' | xargs -n1 wget\n</code></pre>\n<hr>\n<h1>30. Remove Remote OriginL</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git remote remove origin\n</code></pre>\n<hr>\n<h1>31. just clone .git folder:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git clone --bare --branch=master --single-branch https://github.com/bgoonz/My-Web-Dev-Archive.git\n</code></pre>\n<hr>\n<h1>32. Undo recent pull request:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">git reset --hard master@{\"10 minutes ago\"}\n</code></pre>\n<hr>\n<h1>33. Lebab</h1>\n<h3>Description: ES5 --> ES6</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\"># Safe:\n\n lebab --replace ./ --transform arrow\n lebab --replace ./ --transform arrow-return\n lebab --replace ./ --transform for-of\n lebab --replace ./ --transform for-each\n lebab --replace ./ --transform arg-rest\n lebab --replace ./ --transform arg-spread\n lebab --replace ./ --transform obj-method\n lebab --replace ./ --transform obj-shorthand\n lebab --replace ./ --transform multi-var\n\n# ALL:\n\nlebab --replace ./ --transform obj-method\nlebab --replace ./ --transform class\nlebab --replace ./ --transform arrow\nlebab --replace ./ --transform let\nlebab --replace ./ --transform arg-spread\nlebab --replace ./ --transform arg-rest\nlebab --replace ./ --transform for-each\nlebab --replace ./ --transform for-of\nlebab --replace ./ --transform commonjs\nlebab --replace ./ --transform exponent\nlebab --replace ./ --transform multi-var\nlebab --replace ./ --transform template\nlebab --replace ./ --transform default-param\nlebab --replace ./ --transform  destruct-param\nlebab --replace ./ --transform includes\nlebab --replace ./ --transform obj-method\nlebab --replace ./ --transform class\nlebab --replace ./ --transform arrow\nlebab --replace ./ --transform arg-spread\nlebab --replace ./ --transform arg-rest\nlebab --replace ./ --transform for-each\nlebab --replace ./ --transform for-of\nlebab --replace ./ --transform commonjs\nlebab --replace ./ --transform exponent\nlebab --replace ./ --transform multi-var\nlebab --replace ./ --transform template\nlebab --replace ./ --transform default-param\nlebab --replace ./ --transform  destruct-param\nlebab --replace ./ --transform includes\n</code></pre>\n<hr>\n<h1>34. Troubleshoot Ubuntu Input/Output Error</h1>\n<h3>Description: Open Powershell as Administrator...</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-ps1\"> wsl.exe --shutdown\n\n Get-Service LxssManager | Restart-Service\n</code></pre>\n<hr>\n<h1>35. Export Medium as Markdown</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">npm i mediumexporter -g\n\nmediumexporter https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4 >ds.md\n</code></pre>\n<hr>\n<h1>36. Delete files in violation of a given size range (100MB for git)</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -size +75M -a -print -a -exec rm -f {} \\;\n\nfind . -size +98M -a -print -a -exec rm -f {} \\;\n</code></pre>\n<hr>\n<h1>37. download all links of given file type</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">wget -r -A.pdf https://overapi.com/git\n</code></pre>\n<hr>\n<h1>38. Kill all node processes</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">killall -s KILL node\n</code></pre>\n<hr>\n<h1>39. Remove string from file names recursively</h1>\n<h3>Description: In the example below I am using this command to remove the string \"-master\" from all file names in the working directory and all of it's sub directories.</h3>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find &#x3C;mydir> -type f -exec sed -i 's/&#x3C;string1>/&#x3C;string2>/g' {} +\n\nfind . -type f -exec rename 's/-master//g' {} +\n</code></pre>\n<blockquote>\n<p>Notes: The same could be done for folder names by changing the <em>-type f</em> flag (for file) to a <em>-type d</em> flag (for directory)</p>\n</blockquote>\n<pre><code class=\"language-sh\">find &#x3C;mydir> -type d -exec sed -i 's/&#x3C;string1>/&#x3C;string2>/g' {} +\n\nfind . -type d -exec rename 's/-master//g' {} +\n</code></pre>\n<hr>\n<h1>40. Remove spaces from file and folder names recursively</h1>\n<h3>Description: replaces spaces in file and folder names with an <code>_</code> underscore</h3>\n<blockquote>\n<p>Notes: need to run <code>sudo apt install rename</code> to use this command</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name \"* *\" -type d | rename 's/ /_/g'\nfind . -name \"* *\" -type f | rename 's/ /_/g'\n</code></pre>\n<hr>\n<h1>41. Zip Each subdirectories in a given directory into their own zip file</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">for i in */; do zip -r \"${i%/}.zip\" \"$i\"; done\n</code></pre>\n<hr>\n<h1>42.</h1>\n<h1>43.</h1>\n<h1>44.</h1>\n<h1>45.</h1>\n<h1>46.</h1>\n<h1>47.</h1>\n<h1>48.</h1>\n<h1>49.</h1>\n<h1>50.</h1>\n<h1>51.</h1>\n<h1>52.</h1>\n<h1>53.</h1>\n<h1>54.</h1>\n<h1>55.</h1>\n<h1>56.</h1>\n<h1>57.</h1>\n<h1>58.</h1>\n<h1>59.</h1>\n<h1>60.</h1>\n<h1>61.</h1>\n<h1>62.</h1>\n<h1>63.</h1>\n<h1>64.</h1>\n<h1>65.</h1>\n<h1>66.</h1>\n<h1>67.</h1>\n<h1>68.</h1>\n<h1>69.</h1>\n<h1>70.</h1>\n<h1>71.</h1>\n<h1>72.</h1>\n<h1>73.</h1>\n<h1>74.</h1>\n<h1>75.</h1>\n<h1>76.</h1>\n<h1>77.</h1>\n<h1>78.</h1>\n<h1>79.</h1>\n<h1>80.</h1>\n<h1>81.</h1>\n<h1>82.</h1>\n<h1>83.</h1>\n<h1>84.</h1>\n<h1>85.</h1>\n<h1>86.</h1>\n<h1>87.</h1>\n<h1>88.</h1>\n<h1>89.</h1>\n<h1>90.</h1>\n<h1>91. Unzip PowerShell</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-ps1\">PARAM (\n    [string] $ZipFilesPath = \"./\",\n    [string] $UnzipPath = \"./RESULT\"\n)\n\n$Shell = New-Object -com Shell.Application\n$Location = $Shell.NameSpace($UnzipPath)\n\n$ZipFiles = Get-Childitem $ZipFilesPath -Recurse -Include *.ZIP\n\n$progress = 1\nforeach ($ZipFile in $ZipFiles) {\n    Write-Progress -Activity \"Unzipping to $($UnzipPath)\" -PercentComplete (($progress / ($ZipFiles.Count + 1)) * 100) -CurrentOperation $ZipFile.FullName -Status \"File $($Progress) of $($ZipFiles.Count)\"\n    $ZipFolder = $Shell.NameSpace($ZipFile.fullname)\n\n    $Location.Copyhere($ZipFolder.items(), 1040) # 1040 - No msgboxes to the user - https://msdn.microsoft.com/library/bb787866%28VS.85%29.aspx\n    $progress++\n}\n</code></pre>\n<hr>\n<h1>92. return to bash from zsh</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\"> sudo apt --purge remove zsh\n</code></pre>\n<hr>\n<h1>93. Symbolic Link</h1>\n<h3>Description: to working directory</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">ln -s \"$(pwd)\" ~/NameOfLink\n\nln -s \"$(pwd)\" ~/Downloads\n</code></pre>\n<hr>\n<h1>94. auto generate readme</h1>\n<h3>Description: rename existing readme to blueprint.md</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">npx @appnest/readme generate\n</code></pre>\n<hr>\n<h1>95. Log into postgres:</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">sudo -u postgres psql\n</code></pre>\n<hr>\n<h1>96. URL To Subscribe To YouTube Channel</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-txt\">https://www.youtube.com/channel/UC1HDa0wWnIKUf-b4yY9JecQ?sub_confirmation=1\n</code></pre>\n<hr>\n<h1>97. Embed Repl.it In Medium Post:</h1>\n<h6>code:</h6>\n<pre><code class=\"language-txt\">https://repl.it/@bgoonz/Data-Structures-Algos-Codebase?lite=true&#x26;amp;referrer=https%3A%2F%2Fbryanguner.medium.com\n\nhttps://repl.it/@bgoonz/node-db1-project?lite=true&#x26;amp;referrer=https%3A%2F%2Fbryanguner.medium.com\n\nhttps://repl.it/@bgoonz/interview-prac?lite=true&#x26;amp;referrer=https%3A%2F%2Fbryanguner.medium.com\n\nhttps://repl.it/@bgoonz/Database-Prac?lite=true&#x26;amp;referrer=https%3A%2F%2Fbryanguner.medium.com\n</code></pre>\n<hr>\n<h1>98.</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">find . -name *right.html  -type f -exec sed -i 's/target=\"_parent\"//g' {} +\n\nfind . -name *right.html  -type f -exec sed -i 's/target=\"_parent\"//g' {} +\n</code></pre>\n<hr>\n<h1>99. Cheat Sheet</h1>\n<h3>Description:</h3>\n<blockquote>\n<p>Notes:</p>\n</blockquote>\n<h6>code:</h6>\n<pre><code class=\"language-sh\">#!/bin/bash\n\n# SHORTCUTS and HISTORY\n\n\nCTRL+A  # move to beginning of line\nCTRL+B  # moves backward one character\nCTRL+C  # halts the current command\nCTRL+D  # deletes one character backward or logs out of current session, similar to exit\nCTRL+E  # moves to end of line\nCTRL+F  # moves forward one character\nCTRL+G  # aborts the current editing command and ring the terminal bell\nCTRL+H  # deletes one character under cursor (same as DELETE)\nCTRL+J  # same as RETURN\nCTRL+K  # deletes (kill) forward to end of line\nCTRL+L  # clears screen and redisplay the line\nCTRL+M  # same as RETURN\nCTRL+N  # next line in command history\nCTRL+O  # same as RETURN, then displays next line in history file\nCTRL+P  # previous line in command history\nCTRL+Q  # resumes suspended shell output\nCTRL+R  # searches backward\nCTRL+S  # searches forward or suspends shell output\nCTRL+T  # transposes two characters\nCTRL+U  # kills backward from point to the beginning of line\nCTRL+V  # makes the next character typed verbatim\nCTRL+W  # kills the word behind the cursor\nCTRL+X  # lists the possible filename completions of the current word\nCTRL+Y  # retrieves (yank) last item killed\nCTRL+Z  # stops the current command, resume with fg in the foreground or bg in the background\n\nALT+B   # moves backward one word\nALT+D   # deletes next word\nALT+F   # moves forward one word\nALT+H   # deletes one character backward\nALT+T   # transposes two words\nALT+.   # pastes last word from the last command. Pressing it repeatedly traverses through command history.\nALT+U   # capitalizes every character from the current cursor position to the end of the word\nALT+L   # uncapitalizes every character from the current cursor position to the end of the word\nALT+C   # capitalizes the letter under the cursor. The cursor then moves to the end of the word.\nALT+R   # reverts any changes to a command you've pulled from your history if you've edited it.\nALT+?   # list possible completions to what is typed\nALT+^   # expand line to most recent match from history\n\nCTRL+X then (   # start recording a keyboard macro\nCTRL+X then )   # finish recording keyboard macro\nCTRL+X then E   # recall last recorded keyboard macro\nCTRL+X then CTRL+E   # invoke text editor (specified by $EDITOR) on current command line then execute resultes as shell commands\n\nBACKSPACE  # deletes one character backward\nDELETE     # deletes one character under cursor\n\nhistory   # shows command line history\n!!        # repeats the last command\n!&#x3C;n>      # refers to command line 'n'\n!&#x3C;string> # refers to command starting with 'string'\n\nexit      # logs out of current session\n\n\n# BASH BASICS\n\n\nenv                 # displays all environment variables\n\necho $SHELL         # displays the shell you're using\necho $BASH_VERSION  # displays bash version\n\nbash                # if you want to use bash (type exit to go back to your previously opened shell)\nwhereis bash        # locates the binary, source and manual-page for a command\nwhich bash          # finds out which program is executed as 'bash' (default: /bin/bash, can change across environments)\n\nclear               # clears content on window (hide displayed lines)\n\n\n# FILE COMMANDS\n\n\nls                            # lists your files in current directory, ls &#x3C;dir> to print files in a specific directory\nls -l                         # lists your files in 'long format', which contains the exact size of the file, who owns the file and who has the right to look at it, and when it was last modified\nls -a                         # lists all files in 'long format', including hidden files (name beginning with '.')\nln -s &#x3C;filename> &#x3C;link>       # creates symbolic link to file\nreadlink &#x3C;filename>           # shows where a symbolic links points to\ntree                          # show directories and subdirectories in easilly readable file tree\nmc                            # terminal file explorer (alternative to ncdu)\ntouch &#x3C;filename>              # creates or updates (edit) your file\nmktemp -t &#x3C;filename>            # make a temp file in /tmp/ which is deleted at next boot (-d to make directory)\ncat &#x3C;filename>                # prints file raw content (will not be interpreted)\nany_command > &#x3C;filename>      # '>' is used to perform redirections, it will set any_command's stdout to file instead of \"real stdout\" (generally /dev/stdout)\nmore &#x3C;filename>               # shows the first part of a file (move with space and type q to quit)\nhead &#x3C;filename>               # outputs the first lines of file (default: 10 lines)\ntail &#x3C;filename>               # outputs the last lines of file (useful with -f option) (default: 10 lines)\nvim &#x3C;filename>                # opens a file in VIM (VI iMproved) text editor, will create it if it doesn't exist\nmv &#x3C;filename1> &#x3C;dest>         # moves a file to destination, behavior will change based on 'dest' type (dir: file is placed into dir; file: file will replace dest (tip: useful for renaming))\ncp &#x3C;filename1> &#x3C;dest>         # copies a file\nrm &#x3C;filename>                 # removes a file\nfind . -name &#x3C;name> &#x3C;type>    # searches for a file or a directory in the current directory and all its sub-directories by its name\ndiff &#x3C;filename1> &#x3C;filename2>  # compares files, and shows where they differ\nwc &#x3C;filename>                 # tells you how many lines, words and characters there are in a file. Use -lwc (lines, word, character) to ouput only 1 of those informations\nsort &#x3C;filename>               # sorts the contents of a text file line by line in alphabetical order, use -n for numeric sort and -r for reversing order.\nsort -t -k &#x3C;filename>         # sorts the contents on specific sort key field starting from 1, using the field separator t.\nrev                           # reverse string characters (hello becomes olleh)\nchmod -options &#x3C;filename>     # lets you change the read, write, and execute permissions on your files (more infos: SUID, GUID)\ngzip &#x3C;filename>               # compresses files using gzip algorithm\ngunzip &#x3C;filename>             # uncompresses files compressed by gzip\ngzcat &#x3C;filename>              # lets you look at gzipped file without actually having to gunzip it\nlpr &#x3C;filename>                # prints the file\nlpq                           # checks out the printer queue\nlprm &#x3C;jobnumber>              # removes something from the printer queue\ngenscript                     # converts plain text files into postscript for printing and gives you some options for formatting\ndvips &#x3C;filename>              # prints .dvi files (i.e. files produced by LaTeX)\ngrep &#x3C;pattern> &#x3C;filenames>    # looks for the string in the files\ngrep -r &#x3C;pattern> &#x3C;dir>       # search recursively for pattern in directory\nhead -n file_name | tail +n   # Print nth line from file.\nhead -y lines.txt | tail +x   # want to display all the lines from x to y. This includes the xth and yth lines.\n\n\n# DIRECTORY COMMANDS\n\n\nmkdir &#x3C;dirname>               # makes a new directory\nrmdir &#x3C;dirname>               # remove an empty directory\nrmdir -rf &#x3C;dirname>           # remove a non-empty directory\nmv &#x3C;dir1> &#x3C;dir2>              # rename a directory from &#x3C;dir1> to &#x3C;dir2>\ncd                            # changes to home\ncd ..                         # changes to the parent directory\ncd &#x3C;dirname>                  # changes directory\ncp -r &#x3C;dir1> &#x3C;dir2>           # copy &#x3C;dir1> into &#x3C;dir2> including sub-directories\npwd                           # tells you where you currently are\ncd ~                          # changes to home.\ncd -                        # changes to previous working directory\n\n\n# SSH, SYSTEM INFO &#x26; NETWORK COMMANDS\n\n\nssh user@host            # connects to host as user\nssh -p &#x3C;port> user@host  # connects to host on specified port as user\nssh-copy-id user@host    # adds your ssh key to host for user to enable a keyed or passwordless login\n\nwhoami                   # returns your username\npasswd                   # lets you change your password\nquota -v                 # shows what your disk quota is\ndate                     # shows the current date and time\ncal                      # shows the month's calendar\nuptime                   # shows current uptime\nw                        # displays whois online\nfinger &#x3C;user>            # displays information about user\nuname -a                 # shows kernel information\nman &#x3C;command>            # shows the manual for specified command\ndf                       # shows disk usage\ndu &#x3C;filename>            # shows the disk usage of the files and directories in filename (du -s give only a total)\nlast &#x3C;yourUsername>      # lists your last logins\nps -u yourusername       # lists your processes\nkill &#x3C;PID>               # kills the processes with the ID you gave\nkillall &#x3C;processname>    # kill all processes with the name\ntop                      # displays your currently active processes\nlsof                     # lists open files\nbg                       # lists stopped or background jobs ; resume a stopped job in the background\nfg                       # brings the most recent job in the foreground\nfg &#x3C;job>                 # brings job to the foreground\n\nping &#x3C;host>              # pings host and outputs results\nwhois &#x3C;domain>           # gets whois information for domain\ndig &#x3C;domain>             # gets DNS information for domain\ndig -x &#x3C;host>            # reverses lookup host\nwget &#x3C;file>              # downloads file\n\ntime &#x3C;command>             # report time consumed by command execution\n\n\n# VARIABLES\n\n\nvarname=value                # defines a variable\nvarname=value command        # defines a variable to be in the environment of a particular subprocess\necho $varname                # checks a variable's value\necho $$                      # prints process ID of the current shell\necho $!                      # prints process ID of the most recently invoked background job\necho $?                      # displays the exit status of the last command\nread &#x3C;varname>               # reads a string from the input and assigns it to a variable\nread -p \"prompt\" &#x3C;varname>   # same as above but outputs a prompt to ask user for value\ncolumn -t &#x3C;filename>         # display info in pretty columns (often used with pipe)\nlet &#x3C;varname> = &#x3C;equation>   # performs mathematical calculation using operators like +, -, *, /, %\nexport VARNAME=value         # defines an environment variable (will be available in subprocesses)\n\narray[0]=valA                # how to define an array\narray[1]=valB\narray[2]=valC\narray=([2]=valC [0]=valA [1]=valB)  # another way\narray=(valA valB valC)              # and another\n\n${array[i]}                  # displays array's value for this index. If no index is supplied, array element 0 is assumed\n${#array[i]}                 # to find out the length of any element in the array\n${#array[@]}                 # to find out how many values there are in the array\n\ndeclare -a                   # the variables are treated as arrays\ndeclare -f                   # uses function names only\ndeclare -F                   # displays function names without definitions\ndeclare -i                   # the variables are treated as integers\ndeclare -r                   # makes the variables read-only\ndeclare -x                   # marks the variables for export via the environment\n\n${varname:-word}             # if varname exists and isn't null, return its value; otherwise return word\n${varname:word}              # if varname exists and isn't null, return its value; otherwise return word\n${varname:=word}             # if varname exists and isn't null, return its value; otherwise set it word and then return its value\n${varname:?message}          # if varname exists and isn't null, return its value; otherwise print varname, followed by message and abort the current command or script\n${varname:+word}             # if varname exists and isn't null, return word; otherwise return null\n${varname:offset:length}     # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters\n\n${variable#pattern}          # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest\n${variable##pattern}         # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest\n${variable%pattern}          # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest\n${variable%%pattern}         # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest\n${variable/pattern/string}   # the longest match to pattern in variable is replaced by string. Only the first match is replaced\n${variable//pattern/string}  # the longest match to pattern in variable is replaced by string. All matches are replaced\n\n${#varname}                  # returns the length of the value of the variable as a character string\n\n*(patternlist)               # matches zero or more occurrences of the given patterns\n+(patternlist)               # matches one or more occurrences of the given patterns\n?(patternlist)               # matches zero or one occurrence of the given patterns\n@(patternlist)               # matches exactly one of the given patterns\n!(patternlist)               # matches anything except one of the given patterns\n\n$(UNIX command)              # command substitution: runs the command and returns standard output\n\n\n# FUNCTIONS\n\n\n# The function refers to passed arguments by position (as if they were positional parameters), that is, $1, $2, and so forth.\n# $@ is equal to \"$1\" \"$2\"... \"$N\", where N is the number of positional parameters. $# holds the number of positional parameters.\n\nfunction functname() {\n  shell commands\n}\n\nunset -f functname  # deletes a function definition\ndeclare -f          # displays all defined functions in your login session\n\n\n# FLOW CONTROLS\n\n\nstatement1 &#x26;&#x26; statement2  # and operator\nstatement1 || statement2  # or operator\n\n-a                        # and operator inside a test conditional expression\n-o                        # or operator inside a test conditional expression\n\n# STRINGS\n\nstr1 == str2               # str1 matches str2\nstr1 != str2               # str1 does not match str2\nstr1 &#x3C; str2                # str1 is less than str2 (alphabetically)\nstr1 > str2                # str1 is greater than str2 (alphabetically)\nstr1 \\> str2               # str1 is sorted after str2\nstr1 \\&#x3C; str2               # str1 is sorted before str2\n-n str1                    # str1 is not null (has length greater than 0)\n-z str1                    # str1 is null (has length 0)\n\n# FILES\n\n-a file                   # file exists or its compilation is successful\n-d file                   # file exists and is a directory\n-e file                   # file exists; same -a\n-f file                   # file exists and is a regular file (i.e., not a directory or other special type of file)\n-r file                   # you have read permission\n-s file                   # file exists and is not empty\n-w file                   # your have write permission\n-x file                   # you have execute permission on file, or directory search permission if it is a directory\n-N file                   # file was modified since it was last read\n-O file                   # you own file\n-G file                   # file's group ID matches yours (or one of yours, if you are in multiple groups)\nfile1 -nt file2           # file1 is newer than file2\nfile1 -ot file2           # file1 is older than file2\n\n# NUMBERS\n\n-lt                       # less than\n-le                       # less than or equal\n-eq                       # equal\n-ge                       # greater than or equal\n-gt                       # greater than\n-ne                       # not equal\n\nif condition\nthen\n  statements\n[elif condition\n  then statements...]\n[else\n  statements]\nfi\n\nfor x in {1..10}\ndo\n  statements\ndone\n\nfor name [in list]\ndo\n  statements that can use $name\ndone\n\nfor (( initialisation ; ending condition ; update ))\ndo\n  statements...\ndone\n\ncase expression in\n  pattern1 )\n    statements ;;\n  pattern2 )\n    statements ;;\nesac\n\nselect name [in list]\ndo\n  statements that can use $name\ndone\n\nwhile condition; do\n  statements\ndone\n\nuntil condition; do\n  statements\ndone\n\n\n# COMMAND-LINE PROCESSING CYCLE\n\n\n# The default order for command lookup is functions, followed by built-ins, with scripts and executables last.\n# There are three built-ins that you can use to override this order: `command`, `builtin` and `enable`.\n\ncommand  # removes alias and function lookup. Only built-ins and commands found in the search path are executed\nbuiltin  # looks up only built-in commands, ignoring functions and commands found in PATH\nenable   # enables and disables shell built-ins\n\neval     # takes arguments and run them through the command-line processing steps all over again\n\n\n# INPUT/OUTPUT REDIRECTORS\n\n\ncmd1|cmd2  # pipe; takes standard output of cmd1 as standard input to cmd2\n&#x3C; file     # takes standard input from file\n> file     # directs standard output to file\n>> file    # directs standard output to file; append to file if it already exists\n>|file     # forces standard output to file even if noclobber is set\nn>|file    # forces output to file from file descriptor n even if noclobber is set\n&#x3C;> file    # uses file as both standard input and standard output\nn&#x3C;>file    # uses file as both input and output for file descriptor n\nn>file     # directs file descriptor n to file\nn&#x3C;file     # takes file descriptor n from file\nn>>file    # directs file description n to file; append to file if it already exists\nn>&#x26;        # duplicates standard output to file descriptor n\nn&#x3C;&#x26;        # duplicates standard input from file descriptor n\nn>&#x26;m       # file descriptor n is made to be a copy of the output file descriptor\nn&#x3C;&#x26;m       # file descriptor n is made to be a copy of the input file descriptor\n&#x26;>file     # directs standard output and standard error to file\n&#x3C;&#x26;-      # closes the standard input\n>&#x26;-      # closes the standard output\nn>&#x26;-     # closes the ouput from file descriptor n\nn&#x3C;&#x26;-     # closes the input from file descripor n\n\n|tee &#x3C;file># output command to both terminal and a file (-a to append to file)\n\n\n# PROCESS HANDLING\n\n\n# To suspend a job, type CTRL+Z while it is running. You can also suspend a job with CTRL+Y.\n# This is slightly different from CTRL+Z in that the process is only stopped when it attempts to read input from terminal.\n# Of course, to interrupt a job, type CTRL+C.\n\nmyCommand &#x26;  # runs job in the background and prompts back the shell\n\njobs         # lists all jobs (use with -l to see associated PID)\n\nfg           # brings a background job into the foreground\nfg %+        # brings most recently invoked background job\nfg %-      # brings second most recently invoked background job\nfg %N        # brings job number N\nfg %string   # brings job whose command begins with string\nfg %?string  # brings job whose command contains string\n\nkill -l               # returns a list of all signals on the system, by name and number\nkill PID              # terminates process with specified PID\nkill -s SIGKILL 4500  # sends a signal to force or terminate the process\nkill -15 913          # Ending PID 913 process with signal 15 (TERM)\nkill %1               # Where %1 is the number of job as read from 'jobs' command.\n\nps           # prints a line of information about the current running login shell and any processes running under it\nps -a        # selects all processes with a tty except session leaders\n\ntrap cmd sig1 sig2  # executes a command when a signal is received by the script\ntrap \"\" sig1 sig2   # ignores that signals\ntrap - sig1 sig2    # resets the action taken when the signal is received to the default\n\ndisown &#x3C;PID|JID>    # removes the process from the list of jobs\n\nwait                # waits until all background jobs have finished\nsleep &#x3C;number>      # wait # of seconds before continuing\n\npv                  # display progress bar for data handling commands. often used with pipe like |pv\nyes                 # give yes response everytime an input is requested from script/process\n\n\n# TIPS &#x26; TRICKS\n\n\n# set an alias\ncd; nano .bash_profile\n> alias gentlenode='ssh admin@gentlenode.com -p 3404'  # add your alias in .bash_profile\n\n# to quickly go to a specific directory\ncd; nano .bashrc\n> shopt -s cdable_vars\n> export websites=\"/Users/mac/Documents/websites\"\n\nsource .bashrc\ncd $websites\n\n\n# DEBUGGING SHELL PROGRAMS\n\n\nbash -n scriptname  # don't run commands; check for syntax errors only\nset -o noexec       # alternative (set option in script)\n\nbash -v scriptname  # echo commands before running them\nset -o verbose      # alternative (set option in script)\n\nbash -x scriptname  # echo commands after command-line processing\nset -o xtrace       # alternative (set option in script)\n\ntrap 'echo $varname' EXIT  # useful when you want to print out the values of variables at the point that your script exits\n\nfunction errtrap {\n  es=$?\n  echo \"ERROR line $1: Command exited with status $es.\"\n}\n\ntrap 'errtrap $LINENO' ERR  # is run whenever a command in the surrounding script or function exits with non-zero status\n\nfunction dbgtrap {\n  echo \"badvar is $badvar\"\n}\n\ntrap dbgtrap DEBUG  # causes the trap code to be executed before every statement in a function or script\n# ...section of code in which the problem occurs...\ntrap - DEBUG  # turn off the DEBUG trap\n\nfunction returntrap {\n  echo \"A return occurred\"\n}\n\ntrap returntrap RETURN  # is executed each time a shell function or a script executed with the . or source commands finishes executing\n\n\n# COLORS AND BACKGROUNDS\n\n# note: \\e or \\x1B also work instead of \\033\n# Reset\nColor_Off='\\033[0m' # Text Reset\n\n# Regular Colors\nBlack='\\033[0;30m'  # Black\nRed='\\033[0;31m'    # Red\nGreen='\\033[0;32m'  # Green\nYellow='\\033[0;33m' # Yellow\nBlue='\\033[0;34m'   # Blue\nPurple='\\033[0;35m' # Purple\nCyan='\\033[0;36m'   # Cyan\nWhite='\\033[0;97m'  # White\n\n# Additional colors\nLGrey='\\033[0;37m'  # Ligth Gray\nDGrey='\\033[0;90m'  # Dark Gray\nLRed='\\033[0;91m'   # Ligth Red\nLGreen='\\033[0;92m' # Ligth Green\nLYellow='\\033[0;93m'# Ligth Yellow\nLBlue='\\033[0;94m'  # Ligth Blue\nLPurple='\\033[0;95m'# Light Purple\nLCyan='\\033[0;96m'  # Ligth Cyan\n\n# Bold\nBBlack='\\033[1;30m' # Black\nBRed='\\033[1;31m'   # Red\nBGreen='\\033[1;32m' # Green\nBYellow='\\033[1;33m'# Yellow\nBBlue='\\033[1;34m'  # Blue\nBPurple='\\033[1;35m'# Purple\nBCyan='\\033[1;36m'  # Cyan\nBWhite='\\033[1;37m' # White\n\n# Underline\nUBlack='\\033[4;30m' # Black\nURed='\\033[4;31m'   # Red\nUGreen='\\033[4;32m' # Green\nUYellow='\\033[4;33m'# Yellow\nUBlue='\\033[4;34m'  # Blue\nUPurple='\\033[4;35m'# Purple\nUCyan='\\033[4;36m'  # Cyan\nUWhite='\\033[4;37m' # White\n\n# Background\nOn_Black='\\033[40m' # Black\nOn_Red='\\033[41m'   # Red\nOn_Green='\\033[42m' # Green\nOn_Yellow='\\033[43m'# Yellow\nOn_Blue='\\033[44m'  # Blue\nOn_Purple='\\033[45m'# Purple\nOn_Cyan='\\033[46m'  # Cyan\nOn_White='\\033[47m' # White\n\n# Example of usage\necho -e \"${Green}This is GREEN text${Color_Off} and normal text\"\necho -e \"${Red}${On_White}This is Red test on White background${Color_Off}\"\n# option -e is mandatory, it enable interpretation of backslash escapes\nprintf \"${Red} This is red \\n\"\n</code></pre>"}