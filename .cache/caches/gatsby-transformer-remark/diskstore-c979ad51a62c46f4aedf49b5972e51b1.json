{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-b6560a22f2028ca40cd9dc25477e9c73--","val":"<h1>const</h1>\n<p>Constants are block-scoped, much like variables declared using the <code>let</code> keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.</p>\n<h2>Syntax</h2>\n<pre><code>const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];\n</code></pre>\n<p><code>nameN</code>\nThe constant's name, which can be any legal <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Identifier\">identifier</a>.</p>\n<p><code>valueN</code>\nThe constant's value. This can be any legal <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#expressions\">expression</a>, including a function expression.</p>\n<p>The <a href=\"../operators/destructuring_assignment\">Destructuring Assignment</a> syntax can also be used to declare variables.</p>\n<pre><code>const { bar } = foo; // where foo = { bar:10, baz:12 };\n/* This creates a constant with the name 'bar', which has a value of 10 */\n</code></pre>\n<h2>Description</h2>\n<p>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do <strong>not</strong> become properties of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\"><code>window</code></a> object, unlike <a href=\"var\"><code>var</code></a> variables.</p>\n<p>An initializer for a constant is required. You must specify its value in the same statement in which it's declared. (This makes sense, given that it can't be changed later.)</p>\n<p>The <code>const</code> creates a read-only reference to a value. It does <strong>not</strong> mean the value it holds is immutableâ€”just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.</p>\n<p>All the considerations about the \"<a href=\"let#temporal_dead_zone_tdz\">temporal dead zone</a>\" apply to both <a href=\"let\"><code>let</code></a> and <code>const</code>.</p>\n<p>A constant cannot share its name with a function or a variable in the same scope.</p>\n<h2>Examples</h2>\n<h3>Basic const usage</h3>\n<p>Constants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.</p>\n<pre><code>// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// trying to redeclare a constant throws an error\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will fail too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;\n</code></pre>\n<h3>Block scoping</h3>\n<p>It's important to note the nature of block scoping.</p>\n<pre><code>if (MY_FAV === 7) {\n  // this is fine and creates a block scoped MY_FAV variable\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n\n  // MY_FAV is now 20\n  console.log('my favorite number is ' + MY_FAV);\n\n  // this gets hoisted into the global context and throws an error\n  var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log('my favorite number is ' + MY_FAV);\n</code></pre>\n<h3>const needs to be initialized</h3>\n<pre><code>// throws an error\n// Uncaught SyntaxError: Missing initializer in const declaration\n\nconst FOO;\n</code></pre>\n<h3>const in objects and arrays</h3>\n<p>const also works on objects and arrays.</p>\n<pre><code>const MY_OBJECT = {'key': 'value'};\n\n// Attempting to overwrite the object throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_OBJECT = {'OTHER_KEY': 'value'};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = 'otherValue'; // Use Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push('A'); // [\"A\"]\n// However, assigning a new array to the variable throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_ARRAY = ['B'];\n</code></pre>"}