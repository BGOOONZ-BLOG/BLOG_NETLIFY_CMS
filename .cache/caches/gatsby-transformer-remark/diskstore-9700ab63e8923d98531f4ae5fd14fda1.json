{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-aacc130af246ff2068fc877458879500--","val":"<h2>What is Jamstack</h2>\n<hr>\n<h3>History</h3>\n<p>\"Jamstack\" was originally cased as \"JAMstack\" where \"JAM\" stood for JavaScript, API &#x26; Markup.</p>\n<blockquote>\n<p>\"A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup\"</p>\n<p>â€” Mathias Biilmann (CEO &#x26; Co-founder of Netlify).</p>\n</blockquote>\n<h4>JavaScript</h4>\n<p>Dynamic functionalities are handled by JavaScript. There is no restriction on which framework or library you must use.</p>\n<h4>APIs</h4>\n<p>Server side operations are abstracted into reusable APIs and accessed over HTTPS with JavaScript. These can be third party services or your custom function.</p>\n<h4>Markup</h4>\n<p>Websites are served as static HTML files. These can be generated from source files, such as Markdown, using a Static Site Generator.</p>\n<hr>\n<h3>Meaning</h3>\n<p>Today, Jamstack is used to more broadly refer to an architectural approach for building websites. Though there are varying opinions on what exactly Jamstack means today, these attributes are present in most sites that claim to be Jamstack sites:</p>\n<h4>Decoupled</h4>\n<p>The front end uses tooling separate from the back end. The front end is typically built using a static site generator. And the back end is often integrated with the front through the use of APIs used during the build process. Server-side processes can also be run using serverless functions.</p>\n<h4>Static-first</h4>\n<p>While various practices exist for introducing dynamic elements to Jamstack sites, most are pre-rendered, which means the front end was built and compiled into HTML, CSS, and JavaScript files.</p>\n<h4>Progressively enhanced</h4>\n<p>JavaScript can be introduced to pre-rendered sites on an as-needed basis, thus increasing performance in the browser.</p>\n<hr>\n<h3>Benefits</h3>\n<p>Here are the main benefits provided by the Jamstack.</p>\n<h4>Faster performance</h4>\n<p>Serve pre-built markup and assets over a CDN.</p>\n<h4>More secure</h4>\n<p>No need to worry about server or database vulnerabilities.</p>\n<h4>Less expensive</h4>\n<p>Hosting of static files is cheap or <a href=\"https://www.netlify.com/\">even free.</a></p>\n<h4>Better developer experience</h4>\n<p>Front end developers can focus on the front end, without being tied to a monolithic architecture. This usually means quicker and more focused development.</p>\n<h4>Scalability</h4>\n<p>If your product suddenly goes viral and has many active users, the CDN seamlessly compensates.</p>\n<hr>\n<h3>Best practices</h3>\n<p>The following tips will help you leverage the best out of the stack.</p>\n<h4>Content delivery network</h4>\n<p>Since all the markup and assets are pre-built, they can be served via CDN. This provides better performance and easier scalability.</p>\n<p><a href=\"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/\" title=\"Read more about CDN\">Learn more</a></p>\n<h4>Atomic deploys</h4>\n<p>Each deploy is a full snapshot of the site. This helps guarantee a consistent version of the site globally.</p>\n<p><a href=\"https://buddy.works/blog/introducing-atomic-deployments#what-are-atomic-deployments\" title=\"Read more about atomic deploys\">Learn more</a></p>\n<h4>Cache invalidation</h4>\n<p>Once your build is uploaded, the CDN invalidates its cache. This means that your new build is live in an instant.</p>\n<p><a href=\"https://www.netlify.com/blog/2015/09/11/instant-cache-invalidation/\" title=\"Read more about cache invalidation\">Learn more</a></p>\n<h4>Everything in version control</h4>\n<p>Your codebase lives in version control system, such as Git. The main benefits are changing the history of every file, collaborators and traceability.</p>\n<p><a href=\"https://www.atlassian.com/git/tutorials/what-is-version-control\" title=\"Read more about version control\">Learn more</a></p>\n<h4>Automated builds</h4>\n<p>Your server is notified when a new build is required, typically via webhooks. Server builds the project, updates the CDNs and the site is live.</p>\n<p><a href=\"https://www.agilealliance.org/glossary/automated-build\" title=\"Read more about automated builds\">Learn more</a></p>\n<hr>\n<h3>Workflow</h3>\n<p>Here's an ideal Jamstack workflow:</p>\n<p>Develop</p>\n<p>Version Control</p>\n<p>Automated build</p>\n<p>Static assets</p>\n<p>Atomic deploy</p>\n<p>Pre-render &#x26; invalidate cache</p>\n<p>Update CDN</p>\n<hr>\n<h3>Timeline</h3>\n<p>A brief history of Jamstack shows its growth in popularity.</p>\n<h4>2015</h4>\n<p>Static sites are becoming popular due to the popularity of certain SSG such as Jekyll.</p>\n<h4>2016</h4>\n<p>A small group of developers believe that Static sites don't have to be static and the term \"Jamstack\" comes to life.</p>\n<h4>2017</h4>\n<p>The modern web revolution starts prioritising the importance of performance, scalability and developer experience. The term Jamstack starts to be adopted by a wider group of developers and the first enterprise Jamstack projects are announced.</p>\n<h4>2018</h4>\n<p>Tools like Netlify, Gatsby and Contentful have helped promote the term and the community is rapidly growing. This was also the year of the first Jamstack Conference.</p>\n<h4>2019</h4>\n<p>The year that Jamstack went mainstream. An explosion of new tools and services enter the market to support Jamstack sites.</p>\n<h4>2020</h4>\n<p>\"JAMstack\" becomes \"Jamstack\" and brought with it a new brand for the community. ZEIT becomes Vercel and begins blurring the lines of what Jamstack really means as Next.js grows in popularity, largely due to its ability to combine server-side and static rendering in the same site.</p>\n<h4>2021</h4>\n<p>While Jamstack continues to expand, confusion about what it really means has become a common theme. And yet, tools like <a href=\"https://redwoodjs.com/\">RedwoodJS</a> and <a href=\"https://blitzjs.com/\">Blitz.js</a> show us that Jamstack isn't slowing down.</p>\n<h2>Getting started</h2>\n<hr>\n<h3>Development</h3>\n<p>However you decide to generate your HTML assets is up to you. The three most common approaches are:</p>\n<h4>Hand coding</h4>\n<p>Simple and effective method of writing HTML, it's ideal for super simple pages.</p>\n<h4>Static Site Generators</h4>\n<p>Most Jamstack sites are powered by a static site generator. There's no enforcement on which SSG you decide to use.</p>\n<ul>\n<li><a href=\"https://nextjs.org/\" title=\"Next.js\">Next.js</a></li>\n<li><a href=\"https://www.gatsbyjs.com/\" title=\"Gatsby\">Gatsby</a></li>\n<li><a href=\"https://gohugo.io/\" title=\"Hugo\">Hugo</a></li>\n</ul>\n<h4>Site Builders</h4>\n<p>Tools that bring Jamstack to less technical users, while enabling developers to customize sites through modern tooling.</p>\n<ul>\n<li><a href=\"https://www.stackbit.com/\" title=\"Stackbit\">Stackbit</a></li>\n<li><a href=\"https://www.builder.io/\" title=\"Builder.io\">Builder.io</a></li>\n<li><a href=\"https://cloudcannon.com/\" title=\"CloudCannon\">CloudCannon</a></li>\n</ul>\n<hr>\n<h3>Dynamic parts</h3>\n<p>Jamstack websites don't have to be static. There are great services available to help bring some dynamic data to your product.</p>\n<hr>"}