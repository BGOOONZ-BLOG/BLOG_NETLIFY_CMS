{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-ast-f5a70a239f0bc2a7cd477ab82cf84c4b--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Introduction to React for Complete Beginners","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":47,"offset":47}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All of the code examples below will be included a second time at the bottom of this article as an embedded gist.","position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":113,"offset":161}}}],"position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":113,"offset":161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":6,"column":1,"offset":163},"end":{"line":6,"column":4,"offset":166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Introduction to React for Complete Beginners","position":{"start":{"line":8,"column":5,"offset":172},"end":{"line":8,"column":49,"offset":216}}}],"position":{"start":{"line":8,"column":1,"offset":168},"end":{"line":8,"column":49,"offset":216}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All of the code examples below will be included a second time at the bottom of this article as an embedded gist, so that it is properly syntax highlighted.","position":{"start":{"line":10,"column":1,"offset":218},"end":{"line":10,"column":156,"offset":373}}}],"position":{"start":{"line":10,"column":1,"offset":218},"end":{"line":10,"column":156,"offset":373}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.","position":{"start":{"line":12,"column":1,"offset":375},"end":{"line":12,"column":113,"offset":487}}}],"position":{"start":{"line":12,"column":1,"offset":375},"end":{"line":12,"column":113,"offset":487}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*Olfj44MF6WSzvlSM.png\" class=\"graf-image\" /></figure>","position":{"start":{"line":14,"column":1,"offset":489},"end":{"line":14,"column":114,"offset":602}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"React","position":{"start":{"line":16,"column":5,"offset":608},"end":{"line":16,"column":10,"offset":613}}}],"position":{"start":{"line":16,"column":1,"offset":604},"end":{"line":16,"column":10,"offset":613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript","position":{"start":{"line":18,"column":4,"offset":618},"end":{"line":18,"column":115,"offset":729}}}],"position":{"start":{"line":18,"column":3,"offset":617},"end":{"line":18,"column":116,"offset":730}}}],"position":{"start":{"line":18,"column":3,"offset":617},"end":{"line":18,"column":116,"offset":730}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":1,"offset":615},"end":{"line":18,"column":116,"offset":730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX","position":{"start":{"line":20,"column":4,"offset":735},"end":{"line":20,"column":109,"offset":840}}}],"position":{"start":{"line":20,"column":3,"offset":734},"end":{"line":20,"column":110,"offset":841}}}],"position":{"start":{"line":20,"column":3,"offset":734},"end":{"line":20,"column":110,"offset":841}}},{"type":"text","value":"\n"}],"position":{"start":{"line":20,"column":1,"offset":732},"end":{"line":20,"column":110,"offset":841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }","position":{"start":{"line":22,"column":4,"offset":846},"end":{"line":22,"column":119,"offset":961}}}],"position":{"start":{"line":22,"column":3,"offset":845},"end":{"line":22,"column":120,"offset":962}}}],"position":{"start":{"line":22,"column":3,"offset":845},"end":{"line":22,"column":120,"offset":962}}},{"type":"text","value":"\n"}],"position":{"start":{"line":22,"column":1,"offset":843},"end":{"line":22,"column":120,"offset":962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"JSX code must be compiled into JavaScript","position":{"start":{"line":24,"column":4,"offset":967},"end":{"line":24,"column":45,"offset":1008}}}],"position":{"start":{"line":24,"column":3,"offset":966},"end":{"line":24,"column":46,"offset":1009}}}],"position":{"start":{"line":24,"column":3,"offset":966},"end":{"line":24,"column":46,"offset":1009}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":964},"end":{"line":24,"column":46,"offset":1009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"under the hood the challenges are calling ReactDOM.render (JSX, document.getElementById('root'))","position":{"start":{"line":26,"column":4,"offset":1014},"end":{"line":26,"column":100,"offset":1110}}}],"position":{"start":{"line":26,"column":3,"offset":1013},"end":{"line":26,"column":101,"offset":1111}}}],"position":{"start":{"line":26,"column":3,"offset":1013},"end":{"line":26,"column":101,"offset":1111}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":1,"offset":1011},"end":{"line":26,"column":101,"offset":1111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"One important thing to know about nested JSX is that it must return a single element.","position":{"start":{"line":28,"column":4,"offset":1116},"end":{"line":28,"column":89,"offset":1201}}}],"position":{"start":{"line":28,"column":3,"offset":1115},"end":{"line":28,"column":90,"offset":1202}}}],"position":{"start":{"line":28,"column":3,"offset":1115},"end":{"line":28,"column":90,"offset":1202}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":1,"offset":1113},"end":{"line":28,"column":90,"offset":1202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.","position":{"start":{"line":30,"column":4,"offset":1207},"end":{"line":30,"column":109,"offset":1312}}}],"position":{"start":{"line":30,"column":3,"offset":1206},"end":{"line":30,"column":110,"offset":1313}}}],"position":{"start":{"line":30,"column":3,"offset":1206},"end":{"line":30,"column":110,"offset":1313}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":1204},"end":{"line":30,"column":110,"offset":1313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":32,"column":1,"offset":1315},"end":{"line":32,"column":4,"offset":1318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"From the React Docs:","position":{"start":{"line":34,"column":5,"offset":1324},"end":{"line":34,"column":25,"offset":1344}}}],"position":{"start":{"line":34,"column":1,"offset":1320},"end":{"line":34,"column":25,"offset":1344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What is React?","position":{"start":{"line":36,"column":5,"offset":1350},"end":{"line":36,"column":19,"offset":1364}}}],"position":{"start":{"line":36,"column":1,"offset":1346},"end":{"line":36,"column":19,"offset":1364}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components\".","position":{"start":{"line":38,"column":1,"offset":1366},"end":{"line":38,"column":189,"offset":1554}}}],"position":{"start":{"line":38,"column":1,"offset":1366},"end":{"line":38,"column":189,"offset":1554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React has a few different kinds of components, but we'll start with ","position":{"start":{"line":40,"column":1,"offset":1556},"end":{"line":40,"column":69,"offset":1624}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.Component"}],"position":{"start":{"line":40,"column":69,"offset":1624},"end":{"line":40,"column":86,"offset":1641}}},{"type":"text","value":" subclasses:","position":{"start":{"line":40,"column":86,"offset":1641},"end":{"line":40,"column":98,"offset":1653}}}],"position":{"start":{"line":40,"column":1,"offset":1556},"end":{"line":40,"column":98,"offset":1653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class ShoppingList extends React.Component {\n  render() {\n    return (\n      <div className=\"shopping-list\">\n        <h1>Shopping List for {this.props.name}</h1>\n        <ul>\n          <li>Instagram</li>\n          <li>WhatsApp</li>\n          <li>Oculus</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Example usage: <ShoppingList name=\"Mark\" />\n"}],"position":{"start":{"line":42,"column":1,"offset":1655},"end":{"line":57,"column":51,"offset":2060}}}],"position":{"start":{"line":42,"column":1,"offset":1655},"end":{"line":57,"column":51,"offset":2060}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We'll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.","position":{"start":{"line":59,"column":1,"offset":2062},"end":{"line":59,"column":193,"offset":2254}}}],"position":{"start":{"line":59,"column":1,"offset":2062},"end":{"line":59,"column":193,"offset":2254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, ShoppingList is a ","position":{"start":{"line":61,"column":1,"offset":2256},"end":{"line":61,"column":25,"offset":2280}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"React component class","position":{"start":{"line":61,"column":27,"offset":2282},"end":{"line":61,"column":48,"offset":2303}}}],"position":{"start":{"line":61,"column":25,"offset":2280},"end":{"line":61,"column":50,"offset":2305}}},{"type":"text","value":", or ","position":{"start":{"line":61,"column":50,"offset":2305},"end":{"line":61,"column":55,"offset":2310}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"React component type","position":{"start":{"line":61,"column":57,"offset":2312},"end":{"line":61,"column":77,"offset":2332}}}],"position":{"start":{"line":61,"column":55,"offset":2310},"end":{"line":61,"column":79,"offset":2334}}},{"type":"text","value":". A component takes in parameters, called ","position":{"start":{"line":61,"column":79,"offset":2334},"end":{"line":61,"column":121,"offset":2376}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props"}],"position":{"start":{"line":61,"column":121,"offset":2376},"end":{"line":61,"column":128,"offset":2383}}},{"type":"text","value":" (short for \"properties\"), and returns a hierarchy of views to display via the ","position":{"start":{"line":61,"column":128,"offset":2383},"end":{"line":61,"column":207,"offset":2462}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"render"}],"position":{"start":{"line":61,"column":207,"offset":2462},"end":{"line":61,"column":215,"offset":2470}}},{"type":"text","value":" method.","position":{"start":{"line":61,"column":215,"offset":2470},"end":{"line":61,"column":223,"offset":2478}}}],"position":{"start":{"line":61,"column":1,"offset":2256},"end":{"line":61,"column":223,"offset":2478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":63,"column":1,"offset":2480},"end":{"line":63,"column":5,"offset":2484}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"render"}],"position":{"start":{"line":63,"column":5,"offset":2484},"end":{"line":63,"column":13,"offset":2492}}},{"type":"text","value":" method returns a ","position":{"start":{"line":63,"column":13,"offset":2492},"end":{"line":63,"column":31,"offset":2510}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"description","position":{"start":{"line":63,"column":32,"offset":2511},"end":{"line":63,"column":43,"offset":2522}}}],"position":{"start":{"line":63,"column":31,"offset":2510},"end":{"line":63,"column":44,"offset":2523}}},{"type":"text","value":" of what you want to see on the screen. React takes the description and displays the result. In particular, ","position":{"start":{"line":63,"column":44,"offset":2523},"end":{"line":63,"column":152,"offset":2631}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"render"}],"position":{"start":{"line":63,"column":152,"offset":2631},"end":{"line":63,"column":160,"offset":2639}}},{"type":"text","value":" returns a ","position":{"start":{"line":63,"column":160,"offset":2639},"end":{"line":63,"column":171,"offset":2650}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"React element","position":{"start":{"line":63,"column":173,"offset":2652},"end":{"line":63,"column":186,"offset":2665}}}],"position":{"start":{"line":63,"column":171,"offset":2650},"end":{"line":63,"column":188,"offset":2667}}},{"type":"text","value":", which is a lightweight description of what to render. Most React developers use a special syntax called \"JSX\" which makes these structures easier to write. The ","position":{"start":{"line":63,"column":188,"offset":2667},"end":{"line":63,"column":350,"offset":2829}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<div />"}],"position":{"start":{"line":63,"column":350,"offset":2829},"end":{"line":63,"column":359,"offset":2838}}},{"type":"text","value":" syntax is transformed at build time to ","position":{"start":{"line":63,"column":359,"offset":2838},"end":{"line":63,"column":399,"offset":2878}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.createElement('div')"}],"position":{"start":{"line":63,"column":399,"offset":2878},"end":{"line":63,"column":427,"offset":2906}}},{"type":"text","value":". The example above is equivalent to:","position":{"start":{"line":63,"column":427,"offset":2906},"end":{"line":63,"column":464,"offset":2943}}}],"position":{"start":{"line":63,"column":1,"offset":2480},"end":{"line":63,"column":464,"offset":2943}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n"}],"position":{"start":{"line":65,"column":1,"offset":2945},"end":{"line":68,"column":7,"offset":3138}}}],"position":{"start":{"line":65,"column":1,"offset":2945},"end":{"line":68,"column":7,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"---\n\n### Valid JSX:\n\n    <div>\n      <p>Paragraph One</p>\n      <p>Paragraph Two</p>\n      <p>Paragraph Three</p>\n    </div>\n\n---\n\n### Invalid JSX:\n\n    <p>Paragraph One</p>\n    <p>Paragraph Two</p>\n    <p>Paragraph Three</p>\n\n#### To put comments inside JSX, you use the syntax {/\\* \\*/} to wrap around the comment text.\n\nTo put comments inside JSX, you use the syntax {/\\* \\*/} to wrap around the comment text.\n\nThe code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.\n\n\n```js\n\n    const JSX = (\n      <div>\n      {/* This is a comment */}\n        <h1>This is a block of JSX</h1>\n        <p>Here's a subtitle</p>\n      </div>\n    );\n"}],"position":{"start":{"line":70,"column":1,"offset":3140},"end":{"line":107,"column":4,"offset":3918}}}],"position":{"start":{"line":70,"column":1,"offset":3140},"end":{"line":107,"column":4,"offset":3918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":109,"column":1,"offset":3920},"end":{"line":109,"column":4,"offset":3923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.","position":{"start":{"line":111,"column":4,"offset":3928},"end":{"line":111,"column":110,"offset":4034}}}],"position":{"start":{"line":111,"column":3,"offset":3927},"end":{"line":111,"column":111,"offset":4035}}}],"position":{"start":{"line":111,"column":3,"offset":3927},"end":{"line":111,"column":111,"offset":4035}}},{"type":"text","value":"\n"}],"position":{"start":{"line":111,"column":1,"offset":3925},"end":{"line":111,"column":111,"offset":4035}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ReactDOM offers a simple method to render React elements to the DOM which looks like this:","position":{"start":{"line":113,"column":4,"offset":4040},"end":{"line":113,"column":94,"offset":4130}}}],"position":{"start":{"line":113,"column":3,"offset":4039},"end":{"line":113,"column":95,"offset":4131}}}],"position":{"start":{"line":113,"column":3,"offset":4039},"end":{"line":113,"column":95,"offset":4131}}},{"type":"text","value":"\n"}],"position":{"start":{"line":113,"column":1,"offset":4037},"end":{"line":113,"column":95,"offset":4131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactDOM.render(componentToRender, targetNode)"}],"position":{"start":{"line":115,"column":1,"offset":4133},"end":{"line":115,"column":49,"offset":4181}}}],"position":{"start":{"line":115,"column":1,"offset":4133},"end":{"line":115,"column":49,"offset":4181}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f724\">","position":{"start":{"line":117,"column":5,"offset":4187},"end":{"line":117,"column":21,"offset":4203}}},{"type":"text","value":"the first argument is the React element or component that you want to render,","position":{"start":{"line":117,"column":21,"offset":4203},"end":{"line":117,"column":98,"offset":4280}}},{"type":"raw","value":"</span>","position":{"start":{"line":117,"column":98,"offset":4280},"end":{"line":117,"column":105,"offset":4287}}}],"position":{"start":{"line":117,"column":1,"offset":4183},"end":{"line":117,"column":105,"offset":4287}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"7093\">","position":{"start":{"line":118,"column":5,"offset":4292},"end":{"line":118,"column":21,"offset":4308}}},{"type":"text","value":"and the second argument is the DOM node that you want to render the component to.","position":{"start":{"line":118,"column":21,"offset":4308},"end":{"line":118,"column":102,"offset":4389}}},{"type":"raw","value":"</span>","position":{"start":{"line":118,"column":102,"offset":4389},"end":{"line":118,"column":109,"offset":4396}}}],"position":{"start":{"line":118,"column":1,"offset":4288},"end":{"line":118,"column":109,"offset":4396}}},{"type":"text","value":"\n"}],"position":{"start":{"line":117,"column":1,"offset":4183},"end":{"line":118,"column":109,"offset":4396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.","position":{"start":{"line":120,"column":4,"offset":4401},"end":{"line":120,"column":132,"offset":4529}}}],"position":{"start":{"line":120,"column":3,"offset":4400},"end":{"line":120,"column":133,"offset":4530}}}],"position":{"start":{"line":120,"column":3,"offset":4400},"end":{"line":120,"column":133,"offset":4530}}},{"type":"text","value":"\n"}],"position":{"start":{"line":120,"column":1,"offset":4398},"end":{"line":120,"column":133,"offset":4530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"key difference in JSX is that you can no longer use the word class to define HTML classes.","position":{"start":{"line":122,"column":4,"offset":4535},"end":{"line":122,"column":94,"offset":4625}}}],"position":{"start":{"line":122,"column":3,"offset":4534},"end":{"line":122,"column":95,"offset":4626}}}],"position":{"start":{"line":122,"column":3,"offset":4534},"end":{"line":122,"column":95,"offset":4626}}},{"type":"text","value":"\n"}],"position":{"start":{"line":122,"column":1,"offset":4532},"end":{"line":122,"column":95,"offset":4626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"aafc\">","position":{"start":{"line":124,"column":5,"offset":4632},"end":{"line":124,"column":21,"offset":4648}}},{"type":"text","value":"— -","position":{"start":{"line":124,"column":21,"offset":4648},"end":{"line":124,"column":24,"offset":4651}}},{"type":"text","value":">","position":{"start":{"line":124,"column":24,"offset":4651},"end":{"line":124,"column":28,"offset":4655}}},{"type":"text","value":" This is because class is a reserved word in JavaScript. Instead, JSX uses className","position":{"start":{"line":124,"column":28,"offset":4655},"end":{"line":124,"column":112,"offset":4739}}},{"type":"raw","value":"</span>","position":{"start":{"line":124,"column":112,"offset":4739},"end":{"line":124,"column":119,"offset":4746}}}],"position":{"start":{"line":124,"column":1,"offset":4628},"end":{"line":124,"column":119,"offset":4746}}},{"type":"text","value":"\n"}],"position":{"start":{"line":124,"column":1,"offset":4628},"end":{"line":124,"column":119,"offset":4746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"the naming convention for all HTML attributes and event references in JSX become camelCase","position":{"start":{"line":126,"column":4,"offset":4751},"end":{"line":126,"column":94,"offset":4841}}}],"position":{"start":{"line":126,"column":3,"offset":4750},"end":{"line":126,"column":95,"offset":4842}}}],"position":{"start":{"line":126,"column":3,"offset":4750},"end":{"line":126,"column":95,"offset":4842}}},{"type":"text","value":"\n"}],"position":{"start":{"line":126,"column":1,"offset":4748},"end":{"line":126,"column":95,"offset":4842}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.","position":{"start":{"line":128,"column":4,"offset":4847},"end":{"line":128,"column":183,"offset":5026}}}],"position":{"start":{"line":128,"column":3,"offset":4846},"end":{"line":128,"column":184,"offset":5027}}}],"position":{"start":{"line":128,"column":3,"offset":4846},"end":{"line":128,"column":184,"offset":5027}}},{"type":"text","value":"\n"}],"position":{"start":{"line":128,"column":1,"offset":4844},"end":{"line":128,"column":184,"offset":5027}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Apply a class of myDiv to the div provided in the JSX code.","position":{"start":{"line":130,"column":5,"offset":5033},"end":{"line":130,"column":64,"offset":5092}}}],"position":{"start":{"line":130,"column":1,"offset":5029},"end":{"line":130,"column":64,"offset":5092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9500\">","position":{"start":{"line":132,"column":5,"offset":5098},"end":{"line":132,"column":21,"offset":5114}}},{"type":"text","value":"The constant JSX should return a div element.","position":{"start":{"line":132,"column":21,"offset":5114},"end":{"line":132,"column":66,"offset":5159}}},{"type":"raw","value":"</span>","position":{"start":{"line":132,"column":66,"offset":5159},"end":{"line":132,"column":73,"offset":5166}}}],"position":{"start":{"line":132,"column":1,"offset":5094},"end":{"line":132,"column":73,"offset":5166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8d42\">","position":{"start":{"line":133,"column":5,"offset":5171},"end":{"line":133,"column":21,"offset":5187}}},{"type":"text","value":"The div should have a class of myDiv.","position":{"start":{"line":133,"column":21,"offset":5187},"end":{"line":133,"column":58,"offset":5224}}},{"type":"raw","value":"</span>","position":{"start":{"line":133,"column":58,"offset":5224},"end":{"line":133,"column":65,"offset":5231}}}],"position":{"start":{"line":133,"column":1,"offset":5167},"end":{"line":133,"column":65,"offset":5231}}},{"type":"text","value":"\n"}],"position":{"start":{"line":132,"column":1,"offset":5094},"end":{"line":133,"column":65,"offset":5231}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- -->","position":{"start":{"line":135,"column":1,"offset":5233},"end":{"line":135,"column":9,"offset":5241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);\n"}],"position":{"start":{"line":137,"column":1,"offset":5243},"end":{"line":141,"column":7,"offset":5333}}}],"position":{"start":{"line":137,"column":1,"offset":5243},"end":{"line":141,"column":7,"offset":5333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Ans:","position":{"start":{"line":143,"column":5,"offset":5339},"end":{"line":143,"column":9,"offset":5343}}}],"position":{"start":{"line":143,"column":1,"offset":5335},"end":{"line":143,"column":9,"offset":5343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":" const JSX = (\n      <div className=\"myDiv\">\n        <h1>Add a class to this div</h1>\n      </div>\n    );\n\n### React: Learn About Self-Closing JSX Tags\n\n-Another important way in which JSX differs from HTML is in the idea of the self-closing tag.\n\n> _In HTML, almost all tags have both an opening and closing tag:_ `<div></div>;` _the closing tag always has a forward slash before the tag name that you are closing._\n\n> _there are special instances in HTML called \"self-closing tags\", or tags that don't require both an opening and closing tag before another tag can start._\n\n> _For example the line-break tag can be written as_ `<br>` _or as_ `<br />,` _but should never be written as_ `<br></br>`_, since it doesn't contain any content._\n\n> _In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.  \n> The line-break tag, for example, must always be written as_ `<br />` _in order to be valid JSX that can be transpiled.  \n> A_ `<div>`_, on the other hand, can be written as_ `<div />`_or_`<div></div>`_.  \n> The difference is that in the first syntax version there is no way to include anything in the_ `<div />`_._\n\n### Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content — you only need to close tags where they are needed.\n\n\n```js\n\n    const JSX = (\n      <div>\n        <h2>Welcome to React!</h2> <br >\n        <p>Be sure to close all tags!</p>\n        <hr >\n      </div>\n    );\n\n### Ans:\n\n```js\n\n const JSX = (\n      <div>\n        <h2>Welcome to React!</h2> <br />\n        <p>Be sure to close all tags!</p>\n        <hr />\n      </div>\n    );\n"}],"position":{"start":{"line":145,"column":1,"offset":5345},"end":{"line":193,"column":4,"offset":7062}}}],"position":{"start":{"line":145,"column":1,"offset":5345},"end":{"line":193,"column":4,"offset":7062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":195,"column":1,"offset":7064},"end":{"line":195,"column":4,"offset":7067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"React: Create a Stateless Functional Component","position":{"start":{"line":197,"column":5,"offset":7073},"end":{"line":197,"column":51,"offset":7119}}}],"position":{"start":{"line":197,"column":1,"offset":7069},"end":{"line":197,"column":51,"offset":7119}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"There are two ways to create a React component. The first way is to use a JavaScript function.","position":{"start":{"line":199,"column":4,"offset":7124},"end":{"line":199,"column":98,"offset":7218}}}],"position":{"start":{"line":199,"column":3,"offset":7123},"end":{"line":199,"column":99,"offset":7219}}}],"position":{"start":{"line":199,"column":3,"offset":7123},"end":{"line":199,"column":99,"offset":7219}}},{"type":"text","value":"\n"}],"position":{"start":{"line":199,"column":1,"offset":7121},"end":{"line":199,"column":99,"offset":7219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Defining a component in this way creates a stateless functional component.","position":{"start":{"line":201,"column":4,"offset":7224},"end":{"line":201,"column":78,"offset":7298}}}],"position":{"start":{"line":201,"column":3,"offset":7223},"end":{"line":201,"column":79,"offset":7299}}}],"position":{"start":{"line":201,"column":3,"offset":7223},"end":{"line":201,"column":79,"offset":7299}}},{"type":"text","value":"\n"}],"position":{"start":{"line":201,"column":1,"offset":7221},"end":{"line":201,"column":79,"offset":7299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.","position":{"start":{"line":203,"column":4,"offset":7304},"end":{"line":203,"column":129,"offset":7429}}}],"position":{"start":{"line":203,"column":3,"offset":7303},"end":{"line":203,"column":130,"offset":7430}}}],"position":{"start":{"line":203,"column":3,"offset":7303},"end":{"line":203,"column":130,"offset":7430}}},{"type":"text","value":"\n"}],"position":{"start":{"line":203,"column":1,"offset":7301},"end":{"line":203,"column":130,"offset":7430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"To create a component with a function, you simply write a JavaScript function that returns either JSX or null","position":{"start":{"line":205,"column":6,"offset":7437},"end":{"line":205,"column":115,"offset":7546}}}],"position":{"start":{"line":205,"column":1,"offset":7432},"end":{"line":205,"column":115,"offset":7546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b514\">","position":{"start":{"line":207,"column":5,"offset":7552},"end":{"line":207,"column":21,"offset":7568}}},{"type":"text","value":"React requires your function name to begin with a capital letter.","position":{"start":{"line":207,"column":21,"offset":7568},"end":{"line":207,"column":86,"offset":7633}}},{"type":"raw","value":"</span>","position":{"start":{"line":207,"column":86,"offset":7633},"end":{"line":207,"column":93,"offset":7640}}}],"position":{"start":{"line":207,"column":1,"offset":7548},"end":{"line":207,"column":93,"offset":7640}}},{"type":"text","value":"\n"}],"position":{"start":{"line":207,"column":1,"offset":7548},"end":{"line":207,"column":93,"offset":7640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Here's an example of a stateless functional component that assigns an HTML class in JSX:","position":{"start":{"line":209,"column":4,"offset":7645},"end":{"line":209,"column":92,"offset":7733}}}],"position":{"start":{"line":209,"column":3,"offset":7644},"end":{"line":209,"column":93,"offset":7734}}}],"position":{"start":{"line":209,"column":3,"offset":7644},"end":{"line":209,"column":93,"offset":7734}}},{"type":"text","value":"\n"}],"position":{"start":{"line":209,"column":1,"offset":7642},"end":{"line":209,"column":93,"offset":7734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// After being transpiled, the <div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    <div className='customClass' />\n  );\n};\n"}],"position":{"start":{"line":211,"column":1,"offset":7736},"end":{"line":216,"column":7,"offset":7925}}}],"position":{"start":{"line":211,"column":1,"offset":7736},"end":{"line":216,"column":7,"offset":7925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.","position":{"start":{"line":218,"column":4,"offset":7930},"end":{"line":218,"column":122,"offset":8048}}}],"position":{"start":{"line":218,"column":3,"offset":7929},"end":{"line":218,"column":123,"offset":8049}}}],"position":{"start":{"line":218,"column":3,"offset":7929},"end":{"line":218,"column":123,"offset":8049}}},{"type":"text","value":"\n"}],"position":{"start":{"line":218,"column":1,"offset":7927},"end":{"line":218,"column":123,"offset":8049}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text.","position":{"start":{"line":220,"column":5,"offset":8055},"end":{"line":220,"column":149,"offset":8199}}}],"position":{"start":{"line":220,"column":1,"offset":8051},"end":{"line":220,"column":149,"offset":8199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag.","position":{"start":{"line":222,"column":1,"offset":8201},"end":{"line":222,"column":108,"offset":8308}}}],"position":{"start":{"line":222,"column":1,"offset":8201},"end":{"line":222,"column":108,"offset":8308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const MyComponent = function() {\n  // Change code below this line\n\n  // Change code above this line\n}\n"}],"position":{"start":{"line":224,"column":1,"offset":8310},"end":{"line":228,"column":6,"offset":8427}}}],"position":{"start":{"line":224,"column":1,"offset":8310},"end":{"line":228,"column":6,"offset":8427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"ANS:","position":{"start":{"line":230,"column":5,"offset":8433},"end":{"line":230,"column":9,"offset":8437}}}],"position":{"start":{"line":230,"column":1,"offset":8429},"end":{"line":230,"column":9,"offset":8437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const MyComponent = function() {\n  // Change code below this line\n\nreturn (\n   <div> Some Text </div >\n  );\n\n  // Change code above this line\n};\n"}],"position":{"start":{"line":232,"column":1,"offset":8439},"end":{"line":240,"column":7,"offset":8611}}}],"position":{"start":{"line":232,"column":1,"offset":8439},"end":{"line":240,"column":7,"offset":8611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":242,"column":1,"offset":8613},"end":{"line":242,"column":4,"offset":8616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"React: Create a React Component","position":{"start":{"line":244,"column":5,"offset":8622},"end":{"line":244,"column":36,"offset":8653}}}],"position":{"start":{"line":244,"column":1,"offset":8618},"end":{"line":244,"column":36,"offset":8653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:","position":{"start":{"line":246,"column":4,"offset":8658},"end":{"line":246,"column":133,"offset":8787}}}],"position":{"start":{"line":246,"column":3,"offset":8657},"end":{"line":246,"column":134,"offset":8788}}}],"position":{"start":{"line":246,"column":3,"offset":8657},"end":{"line":246,"column":134,"offset":8788}}},{"type":"text","value":"\n"}],"position":{"start":{"line":246,"column":1,"offset":8655},"end":{"line":246,"column":134,"offset":8788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <h1>Hi</h1>\n    );\n  }\n}\n"}],"position":{"start":{"line":248,"column":1,"offset":8790},"end":{"line":258,"column":6,"offset":8971}}}],"position":{"start":{"line":248,"column":1,"offset":8790},"end":{"line":258,"column":6,"offset":8971}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"This creates an ES6 class Kitten which extends the React.Component class.","position":{"start":{"line":260,"column":4,"offset":8976},"end":{"line":260,"column":77,"offset":9049}}}],"position":{"start":{"line":260,"column":3,"offset":8975},"end":{"line":260,"column":78,"offset":9050}}}],"position":{"start":{"line":260,"column":3,"offset":8975},"end":{"line":260,"column":78,"offset":9050}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":8973},"end":{"line":260,"column":78,"offset":9050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks.","position":{"start":{"line":262,"column":4,"offset":9055},"end":{"line":262,"column":110,"offset":9161}}}],"position":{"start":{"line":262,"column":3,"offset":9054},"end":{"line":262,"column":111,"offset":9162}}}],"position":{"start":{"line":262,"column":3,"offset":9054},"end":{"line":262,"column":111,"offset":9162}}},{"type":"text","value":"\n"}],"position":{"start":{"line":262,"column":1,"offset":9052},"end":{"line":262,"column":111,"offset":9162}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Also notice the Kitten class has a constructor defined within it that calls super()","position":{"start":{"line":264,"column":4,"offset":9167},"end":{"line":264,"column":87,"offset":9250}}}],"position":{"start":{"line":264,"column":3,"offset":9166},"end":{"line":264,"column":88,"offset":9251}}}],"position":{"start":{"line":264,"column":3,"offset":9166},"end":{"line":264,"column":88,"offset":9251}}},{"type":"text","value":"\n"}],"position":{"start":{"line":264,"column":1,"offset":9164},"end":{"line":264,"column":88,"offset":9251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"It uses super() to call the constructor of the parent class, in this case React.Component","position":{"start":{"line":266,"column":4,"offset":9256},"end":{"line":266,"column":93,"offset":9345}}}],"position":{"start":{"line":266,"column":3,"offset":9255},"end":{"line":266,"column":94,"offset":9346}}}],"position":{"start":{"line":266,"column":3,"offset":9255},"end":{"line":266,"column":94,"offset":9346}}},{"type":"text","value":"\n"}],"position":{"start":{"line":266,"column":1,"offset":9253},"end":{"line":266,"column":94,"offset":9346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component's constructor with super, and pass props to both.","position":{"start":{"line":268,"column":4,"offset":9351},"end":{"line":268,"column":212,"offset":9559}}}],"position":{"start":{"line":268,"column":3,"offset":9350},"end":{"line":268,"column":213,"offset":9560}}}],"position":{"start":{"line":268,"column":3,"offset":9350},"end":{"line":268,"column":213,"offset":9560}}},{"type":"text","value":"\n"}],"position":{"start":{"line":268,"column":1,"offset":9348},"end":{"line":268,"column":213,"offset":9560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"This makes sure the component is initialized properly. For now, know that it is standard for this code to be included.","position":{"start":{"line":270,"column":4,"offset":9565},"end":{"line":270,"column":122,"offset":9683}}}],"position":{"start":{"line":270,"column":3,"offset":9564},"end":{"line":270,"column":123,"offset":9684}}}],"position":{"start":{"line":270,"column":3,"offset":9564},"end":{"line":270,"column":123,"offset":9684}}},{"type":"text","value":"\n"}],"position":{"start":{"line":270,"column":1,"offset":9562},"end":{"line":270,"column":123,"offset":9684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!.","position":{"start":{"line":272,"column":5,"offset":9690},"end":{"line":272,"column":175,"offset":9860}}}],"position":{"start":{"line":272,"column":1,"offset":9686},"end":{"line":272,"column":175,"offset":9860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n};\n"}],"position":{"start":{"line":274,"column":1,"offset":9862},"end":{"line":283,"column":7,"offset":10077}}}],"position":{"start":{"line":274,"column":1,"offset":9862},"end":{"line":283,"column":7,"offset":10077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"ANS:","position":{"start":{"line":285,"column":5,"offset":10083},"end":{"line":285,"column":9,"offset":10087}}}],"position":{"start":{"line":285,"column":1,"offset":10079},"end":{"line":285,"column":9,"offset":10087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n return (\n   <div>\n      <h1>Hello React!</h1>\n      </div>\n    );\n\n    // Change code above this line\n  }\n};\n"}],"position":{"start":{"line":287,"column":1,"offset":10089},"end":{"line":301,"column":7,"offset":10391}}}],"position":{"start":{"line":287,"column":1,"offset":10089},"end":{"line":301,"column":7,"offset":10391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":303,"column":1,"offset":10393},"end":{"line":303,"column":4,"offset":10396}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>","position":{"start":{"line":306,"column":1,"offset":10399},"end":{"line":306,"column":10,"offset":10408}}},{"type":"text","value":"\n"},{"type":"raw","value":"<summary>  See More </summary>   ","position":{"start":{"line":308,"column":1,"offset":10410},"end":{"line":308,"column":34,"offset":10443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"React: Create a Component with Composition","position":{"start":{"line":311,"column":5,"offset":10450},"end":{"line":311,"column":47,"offset":10492}}}],"position":{"start":{"line":311,"column":1,"offset":10446},"end":{"line":311,"column":47,"offset":10492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Imagine you are building an App and have created three components, a Navbar, Dashboard, and Footer.","position":{"start":{"line":313,"column":4,"offset":10497},"end":{"line":313,"column":103,"offset":10596}}}],"position":{"start":{"line":313,"column":3,"offset":10496},"end":{"line":313,"column":104,"offset":10597}}}],"position":{"start":{"line":313,"column":3,"offset":10496},"end":{"line":313,"column":104,"offset":10597}}},{"type":"text","value":"\n"}],"position":{"start":{"line":313,"column":1,"offset":10494},"end":{"line":313,"column":104,"offset":10597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.","position":{"start":{"line":315,"column":4,"offset":10602},"end":{"line":315,"column":267,"offset":10865}}}],"position":{"start":{"line":315,"column":3,"offset":10601},"end":{"line":315,"column":268,"offset":10866}}}],"position":{"start":{"line":315,"column":3,"offset":10601},"end":{"line":315,"column":268,"offset":10866}}},{"type":"text","value":"\n"}],"position":{"start":{"line":315,"column":1,"offset":10599},"end":{"line":315,"column":268,"offset":10866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"000b\">","position":{"start":{"line":317,"column":5,"offset":10872},"end":{"line":317,"column":21,"offset":10888}}},{"type":"text","value":"For example, in the render method you could write:","position":{"start":{"line":317,"column":21,"offset":10888},"end":{"line":317,"column":71,"offset":10938}}},{"type":"raw","value":"</span>","position":{"start":{"line":317,"column":71,"offset":10938},"end":{"line":317,"column":78,"offset":10945}}}],"position":{"start":{"line":317,"column":1,"offset":10868},"end":{"line":317,"column":78,"offset":10945}}},{"type":"text","value":"\n"}],"position":{"start":{"line":317,"column":1,"offset":10868},"end":{"line":317,"column":78,"offset":10945}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- -->","position":{"start":{"line":319,"column":1,"offset":10947},"end":{"line":319,"column":9,"offset":10955}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return (\n <App>\n  <Navbar />\n  <Dashboard />\n  <Footer />\n </App>\n)\n"}],"position":{"start":{"line":321,"column":1,"offset":10957},"end":{"line":327,"column":6,"offset":11052}}}],"position":{"start":{"line":321,"column":1,"offset":10957},"end":{"line":327,"column":6,"offset":11052}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"When React encounters a custom HTML tag that references another component (a component name wrapped in ","position":{"start":{"line":329,"column":4,"offset":11057},"end":{"line":329,"column":107,"offset":11160}}},{"type":"text","value":"<","position":{"start":{"line":329,"column":107,"offset":11160},"end":{"line":329,"column":111,"offset":11164}}},{"type":"text","value":" /","position":{"start":{"line":329,"column":111,"offset":11164},"end":{"line":329,"column":113,"offset":11166}}},{"type":"text","value":">","position":{"start":{"line":329,"column":113,"offset":11166},"end":{"line":329,"column":117,"offset":11170}}},{"type":"text","value":" like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer.","position":{"start":{"line":329,"column":117,"offset":11170},"end":{"line":329,"column":327,"offset":11380}}}],"position":{"start":{"line":329,"column":3,"offset":11056},"end":{"line":329,"column":328,"offset":11381}}}],"position":{"start":{"line":329,"column":3,"offset":11056},"end":{"line":329,"column":328,"offset":11381}}},{"type":"text","value":"\n"}],"position":{"start":{"line":329,"column":1,"offset":11054},"end":{"line":329,"column":328,"offset":11381}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Challenge:","position":{"start":{"line":331,"column":5,"offset":11387},"end":{"line":331,"column":15,"offset":11397}}}],"position":{"start":{"line":331,"column":1,"offset":11383},"end":{"line":331,"column":15,"offset":11397}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash.","position":{"start":{"line":333,"column":4,"offset":11402},"end":{"line":333,"column":279,"offset":11677}}}],"position":{"start":{"line":333,"column":3,"offset":11401},"end":{"line":333,"column":280,"offset":11678}}}],"position":{"start":{"line":333,"column":3,"offset":11401},"end":{"line":333,"column":280,"offset":11678}}},{"type":"text","value":"\n"}],"position":{"start":{"line":333,"column":1,"offset":11399},"end":{"line":333,"column":280,"offset":11678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2ed5\">","position":{"start":{"line":335,"column":5,"offset":11684},"end":{"line":335,"column":21,"offset":11700}}},{"type":"text","value":"Note:","position":{"start":{"line":335,"column":21,"offset":11700},"end":{"line":335,"column":26,"offset":11705}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React","position":{"start":{"line":335,"column":28,"offset":11707},"end":{"line":335,"column":136,"offset":11815}}}],"position":{"start":{"line":335,"column":26,"offset":11705},"end":{"line":335,"column":138,"offset":11817}}},{"type":"text","value":".","position":{"start":{"line":335,"column":138,"offset":11817},"end":{"line":335,"column":139,"offset":11818}}},{"type":"raw","value":"</span>","position":{"start":{"line":335,"column":139,"offset":11818},"end":{"line":335,"column":146,"offset":11825}}}],"position":{"start":{"line":335,"column":1,"offset":11680},"end":{"line":335,"column":146,"offset":11825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fddd\">","position":{"start":{"line":336,"column":5,"offset":11830},"end":{"line":336,"column":21,"offset":11846}}},{"type":"text","value":"However, know that this is just a function.","position":{"start":{"line":336,"column":21,"offset":11846},"end":{"line":336,"column":64,"offset":11889}}},{"type":"raw","value":"</span>","position":{"start":{"line":336,"column":64,"offset":11889},"end":{"line":336,"column":71,"offset":11896}}}],"position":{"start":{"line":336,"column":1,"offset":11826},"end":{"line":336,"column":71,"offset":11896}}},{"type":"text","value":"\n"}],"position":{"start":{"line":335,"column":1,"offset":11680},"end":{"line":336,"column":71,"offset":11896}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- -->","position":{"start":{"line":338,"column":1,"offset":11898},"end":{"line":338,"column":9,"offset":11906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n"}],"position":{"start":{"line":340,"column":1,"offset":11908},"end":{"line":362,"column":7,"offset":12375}}}],"position":{"start":{"line":340,"column":1,"offset":11908},"end":{"line":362,"column":7,"offset":12375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⌛The React component should return a single div element.","position":{"start":{"line":364,"column":1,"offset":12377},"end":{"line":364,"column":57,"offset":12433}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":364,"column":57,"offset":12433},"end":{"line":365,"column":1,"offset":12436}}},{"type":"text","value":"\n"},{"type":"text","value":"⌛The component should return two nested elements.","position":{"start":{"line":365,"column":1,"offset":12436},"end":{"line":365,"column":50,"offset":12485}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":365,"column":50,"offset":12485},"end":{"line":366,"column":1,"offset":12488}}},{"type":"text","value":"\n"},{"type":"text","value":"⌛The component should return the ChildComponent as its second child.","position":{"start":{"line":366,"column":1,"offset":12488},"end":{"line":366,"column":69,"offset":12556}}}],"position":{"start":{"line":364,"column":1,"offset":12377},"end":{"line":366,"column":69,"offset":12556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Ans:","position":{"start":{"line":368,"column":5,"offset":12562},"end":{"line":368,"column":9,"offset":12566}}}],"position":{"start":{"line":368,"column":1,"offset":12558},"end":{"line":368,"column":9,"offset":12566}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>","position":{"start":{"line":372,"column":1,"offset":12570},"end":{"line":372,"column":10,"offset":12579}}},{"type":"text","value":"\n"},{"type":"raw","value":"<summary>  Answers </summary>   ","position":{"start":{"line":374,"column":1,"offset":12581},"end":{"line":374,"column":33,"offset":12613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n"}],"position":{"start":{"line":377,"column":1,"offset":12616},"end":{"line":399,"column":7,"offset":13083}}}],"position":{"start":{"line":377,"column":1,"offset":12616},"end":{"line":399,"column":7,"offset":13083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"    \n </details>   \n    \n\n### More Examples:\n\n\n\n<a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz - Overview</strong><br />\n<em>Web Developer, Electrical Engineer https://bryanguner.medium.com/ https://portfolio42.netlify.app/…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a>\n\n_More content at_ <a href=\"http://plainenglish.io/\" class=\"markup--anchor markup--p-anchor\"><em>plainenglish.io</em></a>\n\nBy <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on [May 19, 2021](https://medium.com/p/8021738aa1ad).\n\n<a href=\"https://medium.com/@bryanguner/introduction-to-react-for-complete-beginners-8021738aa1ad\" class=\"p-canonical\">Canonical link</a>\n\n May 23, 2021.\n\n# Snippets:\n\n<p>Renders an accordion menu with multiple collapsible content elements.</p>\n<ul>\n<li>Define an <code>AccordionItem</code> component, that renders a <code>&lt;button&gt;</code> which is used to update the component and notify its parent via the <code>handleClick</code> callback.</li>\n<li>Use the <code>isCollapsed</code> prop in <code>AccordionItem</code> to determine its appearance and set an appropriate <code>className</code>.</li>\n<li>Define an <code>Accordion</code> component that uses the <code>useState()</code> hook to initialize the value of the <code>bindIndex</code> state variable to <code>defaultIndex</code>.</li>\n<li>Filter <code>children</code> to remove unnecessary nodes except for <code>AccordionItem</code> by identifying the function's name.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the individual collapsible elements.</li>\n<li>Define <code>changeItem</code>, which will be executed when clicking an <code>AccordionItem</code>'s <code>&lt;button&gt;</code>.</li>\n<li><code>changeItem</code> executes the passed callback, <code>onItemClick</code>, and updates <code>bindIndex</code> based on the clicked element.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"fu\">.accordion-item.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb1-5\" title=\"5\"><span class=\"fu\">.accordion-item.expanded</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-6\" title=\"6\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb1-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb1-9\" title=\"9\"><span class=\"fu\">.accordion-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-10\" title=\"10\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-11\" title=\"11\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-12\" title=\"12\">}</a>\n\n</div>\n\n```js\n\nconst AccordionItem = ({ label, isCollapsed, handleClick, children }) =&gt; {\n  return (\n    &lt;&gt;\n      &lt;button className=&quot;accordion-button&quot; onClick={handleClick}&gt;\n        {label}\n      &lt;/button&gt;\n      &lt;div\n        className={`accordion-item ${isCollapsed ? &quot;collapsed&quot; : &quot;expanded&quot;}`}\n        aria-expanded={isCollapsed}\n      &gt;\n        {children}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n\nconst Accordion = ({ defaultIndex, onItemClick, children }) =&gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\n\nconst changeItem = (itemIndex) =&gt; {\nif (typeof onItemClick === &quot;function&quot;) onItemClick(itemIndex);\nif (itemIndex !== bindIndex) setBindIndex(itemIndex);\n};\nconst items = children.filter((item) =&gt; item.type.name === &quot;AccordionItem&quot;);\n\nreturn (\n&lt;&gt;\n{items.map(({ props }) =&gt; (\n&lt;AccordionItem\nisCollapsed={bindIndex !== props.index}\nlabel={props.label}\nhandleClick={() =&gt; changeItem(props.index)}\nchildren={props.children}\n/&gt;\n))}\n&lt;/&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Accordion defaultIndex=&quot;1&quot; onItemClick={console.log}&gt;\n    &lt;AccordionItem label=&quot;A&quot; index=&quot;1&quot;&gt;\n      Lorem ipsum\n    &lt;/AccordionItem&gt;\n    &lt;AccordionItem label=&quot;B&quot; index=&quot;2&quot;&gt;\n      Dolor sit amet\n    &lt;/AccordionItem&gt;\n  &lt;/Accordion&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":400,"column":1,"offset":13084},"end":{"line":507,"column":4,"offset":17810}}}],"position":{"start":{"line":400,"column":1,"offset":13084},"end":{"line":507,"column":4,"offset":17810}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders an alert component with <code>type</code> prop.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isShown</code> and <code>isLeaving</code> state variables and set both to <code>false</code> initially.</li>\n<li>Define <code>timeoutId</code> to keep the timer instance for clearing on component unmount.</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>isShown</code> to <code>true</code> and clear the interval by using <code>timeoutId</code> when the component is unmounted.</li>\n<li>Define a <code>closeAlert</code> function to set the component as removed from the DOM by displaying a fading out animation and set <code>isShown</code> to <code>false</code> via <code>setTimeout()</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\"><span class=\"im\">@keyframes</span> leave {</a>\n<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-3\" title=\"3\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-4\" title=\"4\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-5\" title=\"5\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-6\" title=\"6\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-7\" title=\"7\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb4-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb4-10\" title=\"10\"><span class=\"fu\">.alert</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-11\" title=\"11\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0.75</span><span class=\"dt\">rem</span> <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-12\" title=\"12\">  <span class=\"kw\">margin-bottom</span>: <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-13\" title=\"13\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-14\" title=\"14\">  <span class=\"kw\">padding-right</span>: <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-15\" title=\"15\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-16\" title=\"16\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-17\" title=\"17\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-18\" title=\"18\">}</a>\n<a class=\"sourceLine\" id=\"cb4-19\" title=\"19\"></a>\n<a class=\"sourceLine\" id=\"cb4-20\" title=\"20\"><span class=\"fu\">.alert.warning</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-21\" title=\"21\">  <span class=\"kw\">color</span>: <span class=\"cn\">#856404</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-22\" title=\"22\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#fff3cd</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-23\" title=\"23\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#ffeeba</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-24\" title=\"24\">}</a>\n<a class=\"sourceLine\" id=\"cb4-25\" title=\"25\"></a>\n<a class=\"sourceLine\" id=\"cb4-26\" title=\"26\"><span class=\"fu\">.alert.error</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-27\" title=\"27\">  <span class=\"kw\">color</span>: <span class=\"cn\">#721c24</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-28\" title=\"28\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#f8d7da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-29\" title=\"29\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#f5c6cb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-30\" title=\"30\">}</a>\n<a class=\"sourceLine\" id=\"cb4-31\" title=\"31\"></a>\n<a class=\"sourceLine\" id=\"cb4-32\" title=\"32\"><span class=\"fu\">.alert.leaving</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-33\" title=\"33\">  <span class=\"kw\">animation</span>: leave <span class=\"dv\">0.5</span><span class=\"dt\">s</span> <span class=\"dv\">forwards</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-34\" title=\"34\">}</a>\n<a class=\"sourceLine\" id=\"cb4-35\" title=\"35\"></a>\n<a class=\"sourceLine\" id=\"cb4-36\" title=\"36\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-37\" title=\"37\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-38\" title=\"38\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-39\" title=\"39\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-40\" title=\"40\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">0.75</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-41\" title=\"41\">  <span class=\"kw\">color</span>: <span class=\"cn\">#333</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-42\" title=\"42\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-43\" title=\"43\">  <span class=\"kw\">height</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-44\" title=\"44\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-45\" title=\"45\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-46\" title=\"46\">  <span class=\"kw\">font-weight</span>: <span class=\"dv\">600</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-47\" title=\"47\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-48\" title=\"48\">}</a>\n<a class=\"sourceLine\" id=\"cb4-49\" title=\"49\"></a>\n<a class=\"sourceLine\" id=\"cb4-50\" title=\"50\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span><span class=\"in\">:after</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-51\" title=\"51\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;x&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-52\" title=\"52\">}</a>","position":{"start":{"line":509,"column":1,"offset":17812},"end":{"line":568,"column":51,"offset":24555}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":570,"column":1,"offset":24557},"end":{"line":570,"column":7,"offset":24563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Alert = ({ isDefaultShown = false, timeout = 250, type, message }) =&gt; {\n  const [isShown, setIsShown] = React.useState(isDefaultShown);\n  const [isLeaving, setIsLeaving] = React.useState(false);\n\nlet timeoutId = null;\n\nReact.useEffect(() =&gt; {\nsetIsShown(true);\nreturn () =&gt; {\nclearTimeout(timeoutId);\n};\n}, [isDefaultShown, timeout, timeoutId]);\n\nconst closeAlert = () =&gt; {\nsetIsLeaving(true);\ntimeoutId = setTimeout(() =&gt; {\nsetIsLeaving(false);\nsetIsShown(false);\n}, timeout);\n};\n\nreturn (\nisShown &amp;&amp; (\n&lt;div\nclassName={`alert ${type} ${isLeaving ? &quot;leaving&quot; : &quot;&quot;}`}\nrole=&quot;alert&quot;\n&gt;\n&lt;button className=&quot;close&quot; onClick={closeAlert} /&gt;\n{message}\n&lt;/div&gt;\n)\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Alert type=&quot;info&quot; message=&quot;This is info&quot; /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":572,"column":1,"offset":24565},"end":{"line":617,"column":4,"offset":25474}}}],"position":{"start":{"line":572,"column":1,"offset":24565},"end":{"line":617,"column":4,"offset":25474}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a string as plaintext, with URLs converted to appropriate link elements.</p>\n<ul>\n<li>Use <code>String.prototype.split()</code> and <code>String.prototype.match()</code> with a regular expression to find URLs in a string.</li>\n<li>Return matched URLs rendered as <code>&lt;a&gt;</code> elements, dealing with missing protocol prefixes if necessary.</li>\n<li>Render the rest of the string as plaintext.</li>\n</ul>","position":{"start":{"line":619,"column":1,"offset":25476},"end":{"line":625,"column":6,"offset":25906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const AutoLink = ({ text }) =&gt; {\n  const delimiter =\n    /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&amp;=;%+?\\-\\\\(\\\\)]*)/gi;\n\nreturn (\n&lt;&gt;\n{text.split(delimiter).map((word) =&gt; {\nconst match = word.match(delimiter);\nif (match) {\nconst url = match[0];\nreturn (\n&lt;a href={url.startsWith(&quot;http&quot;) ? url : `http://${url}`}&gt;{url}&lt;/a&gt;\n);\n}\nreturn word;\n})}\n&lt;/&gt;\n);\n};\n"}],"position":{"start":{"line":627,"column":1,"offset":25908},"end":{"line":649,"column":4,"offset":26480}}}],"position":{"start":{"line":627,"column":1,"offset":25908},"end":{"line":649,"column":4,"offset":26480}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":651,"column":1,"offset":26482},"end":{"line":651,"column":7,"offset":26488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;AutoLink text=&quot;foo bar baz http://example.org bar&quot; /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":653,"column":1,"offset":26490},"end":{"line":660,"column":4,"offset":26639}}}],"position":{"start":{"line":653,"column":1,"offset":26490},"end":{"line":660,"column":4,"offset":26639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a link formatted to call a phone number (<code>tel:</code> link).</p>\n<ul>\n<li>Use <code>phone</code> to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>","position":{"start":{"line":662,"column":1,"offset":26641},"end":{"line":667,"column":6,"offset":26931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Callto = ({ phone, children }) =&gt; {\n  return &lt;a href={`tel:${phone}`}&gt;{children}&lt;/a&gt;;\n};\n"}],"position":{"start":{"line":669,"column":1,"offset":26933},"end":{"line":675,"column":4,"offset":27054}}}],"position":{"start":{"line":669,"column":1,"offset":26933},"end":{"line":675,"column":4,"offset":27054}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":677,"column":1,"offset":27056},"end":{"line":677,"column":7,"offset":27062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;Callto phone=&quot;+302101234567&quot;&gt;Call me!&lt;/Callto&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":679,"column":1,"offset":27064},"end":{"line":686,"column":4,"offset":27212}}}],"position":{"start":{"line":679,"column":1,"offset":27064},"end":{"line":686,"column":4,"offset":27212}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a carousel component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>active</code> state variable and give it a value of <code>0</code> (index of the first item).</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>active</code> to the index of the next item, using <code>setTimeout</code>.</li>\n<li>Compute the <code>className</code> for each carousel item while mapping over them and applying it accordingly.</li>\n<li>Render the carousel items using <code>React.cloneElement()</code> and pass down <code>...rest</code> along with the computed <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><span class=\"fu\">.carousel</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\"><span class=\"fu\">.carousel-item</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-7\" title=\"7\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb11-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb11-10\" title=\"10\"><span class=\"fu\">.carousel-item.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-11\" title=\"11\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">visible</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-12\" title=\"12\">}</a>","position":{"start":{"line":688,"column":1,"offset":27214},"end":{"line":707,"column":52,"offset":29042}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":709,"column":1,"offset":29044},"end":{"line":709,"column":7,"offset":29050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Carousel = ({ carouselItems, ...rest }) =&gt; {\n  const [active, setActive] = React.useState(0);\n  let scrollInterval = null;\n\nReact.useEffect(() =&gt; {\nscrollInterval = setTimeout(() =&gt; {\nsetActive((active + 1) % carouselItems.length);\n}, 2000);\nreturn () =&gt; clearTimeout(scrollInterval);\n});\n\nreturn (\n&lt;div className=&quot;carousel&quot;&gt;\n{carouselItems.map((item, index) =&gt; {\nconst activeClass = active === index ? &quot; visible&quot; : &quot;&quot;;\nreturn React.cloneElement(item, {\n...rest,\nclassName: `carousel-item${activeClass}`,\n});\n})}\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Carousel\n    carouselItems={[\n      &lt;div&gt;carousel item 1&lt;/div&gt;,\n      &lt;div&gt;carousel item 2&lt;/div&gt;,\n      &lt;div&gt;carousel item 3&lt;/div&gt;,\n    ]}\n  /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":711,"column":1,"offset":29052},"end":{"line":752,"column":4,"offset":29922}}}],"position":{"start":{"line":711,"column":1,"offset":29052},"end":{"line":752,"column":4,"offset":29922}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a component with collapsible content.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isCollapsed</code> state variable with an initial value of <code>collapsed</code>.</li>\n<li>Use the <code>&lt;button&gt;</code> to change the component's <code>isCollapsed</code> state and the content of the component, passed down via <code>children</code>.</li>\n<li>Determine the appearance of the content, based on <code>isCollapsed</code> and apply the appropriate <code>className</code>.</li>\n<li>Update the value of the <code>aria-expanded</code> attribute based on <code>isCollapsed</code> to make the component accessible.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\"><span class=\"fu\">.collapse-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb14-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb14-6\" title=\"6\"><span class=\"fu\">.collapse-content.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-7\" title=\"7\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb14-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb14-10\" title=\"10\"><span class=\"fu\">.collapsed-content.expanded</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-11\" title=\"11\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-12\" title=\"12\">}</a>","position":{"start":{"line":754,"column":1,"offset":29924},"end":{"line":773,"column":52,"offset":31802}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":775,"column":1,"offset":31804},"end":{"line":775,"column":7,"offset":31810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Collapse = ({ collapsed, children }) =&gt; {\n  const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n\nreturn (\n&lt;&gt;\n&lt;button\nclassName=&quot;collapse-button&quot;\nonClick={() =&gt; setIsCollapsed(!isCollapsed)}\n&gt;\n{isCollapsed ? &quot;Show&quot; : &quot;Hide&quot;} content\n&lt;/button&gt;\n&lt;div\nclassName={`collapse-content ${isCollapsed ? &quot;collapsed&quot; : &quot;expanded&quot;}`}\naria-expanded={isCollapsed}\n&gt;\n{children}\n&lt;/div&gt;\n&lt;/&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Collapse&gt;\n    &lt;h1&gt;This is a collapse&lt;/h1&gt;\n    &lt;p&gt;Hello world!&lt;/p&gt;\n  &lt;/Collapse&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":777,"column":1,"offset":31812},"end":{"line":812,"column":4,"offset":32512}}}],"position":{"start":{"line":777,"column":1,"offset":31812},"end":{"line":812,"column":4,"offset":32512}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a controlled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>value</code> passed down from the parent as the controlled input field's value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>The parent must update the input field's <code>value</code> prop in order for its value to change on user input.</li>\n</ul>","position":{"start":{"line":814,"column":1,"offset":32514},"end":{"line":820,"column":6,"offset":33022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const ControlledInput = ({ value, onValueChange, ...rest }) =&gt; {\n  return (\n    &lt;input\n      value={value}\n      onChange={({ target: { value } }) =&gt; onValueChange(value)}\n      {...rest}\n    /&gt;\n  );\n};\n"}],"position":{"start":{"line":822,"column":1,"offset":33024},"end":{"line":834,"column":4,"offset":33250}}}],"position":{"start":{"line":822,"column":1,"offset":33024},"end":{"line":834,"column":4,"offset":33250}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":836,"column":1,"offset":33252},"end":{"line":836,"column":7,"offset":33258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Form = () =&gt; {\n  const [value, setValue] = React.useState(&quot;&quot;);\n\nreturn (\n&lt;ControlledInput\ntype=&quot;text&quot;\nplaceholder=&quot;Insert some text here...&quot;\nvalue={value}\nonValueChange={setValue}\n/&gt;\n);\n};\n\nReactDOM.render(&lt;Form /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":838,"column":1,"offset":33260},"end":{"line":855,"column":4,"offset":33582}}}],"position":{"start":{"line":838,"column":1,"offset":33260},"end":{"line":855,"column":4,"offset":33582}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a countdown timer that prints a message when it reaches zero.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable to hold the time value, initialize it from the props and destructure it into its components.</li>\n<li>Use the <code>useState()</code> hook to create the <code>paused</code> and <code>over</code> state variables, used to prevent the timer from ticking if it's paused or the time has run out.</li>\n<li>Create a method <code>tick</code>, that updates the time values based on the current value (i.e. decreasing the time by one second).</li>\n<li>Create a method <code>reset</code>, that resets all state variables to their initial states.</li>\n<li>Use the the <code>useEffect()</code> hook to call the <code>tick</code> method every second via the use of <code>setInterval()</code> and use <code>clearInterval()</code> to clean up when the component is unmounted.</li>\n<li>Use <code>String.prototype.padStart()</code> to pad each part of the time array to two characters to create the visual representation of the timer.</li>\n</ul>","position":{"start":{"line":857,"column":1,"offset":33584},"end":{"line":866,"column":6,"offset":34668}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const CountDown = ({ hours = 0, minutes = 0, seconds = 0 }) =&gt; {\n  const [paused, setPaused] = React.useState(false);\n  const [over, setOver] = React.useState(false);\n  const [[h, m, s], setTime] = React.useState([hours, minutes, seconds]);\n\nconst tick = () =&gt; {\nif (paused || over) return;\nif (h === 0 &amp;&amp; m === 0 &amp;&amp; s === 0) setOver(true);\nelse if (m === 0 &amp;&amp; s === 0) {\nsetTime([h - 1, 59, 59]);\n} else if (s == 0) {\nsetTime([h, m - 1, 59]);\n} else {\nsetTime([h, m, s - 1]);\n}\n};\n\nconst reset = () =&gt; {\nsetTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\nsetPaused(false);\nsetOver(false);\n};\n\nReact.useEffect(() =&gt; {\nconst timerID = setInterval(() =&gt; tick(), 1000);\nreturn () =&gt; clearInterval(timerID);\n});\n\nreturn (\n&lt;div&gt;\n&lt;p&gt;{`${h.toString().padStart(2, &quot;0&quot;)}:${m.toString().padStart(2, &quot;0&quot;)}:${s .toString() .padStart(2, &quot;0&quot;)}`}&lt;/p&gt;\n&lt;div&gt;{over ? &quot;Time&#39;s up!&quot; : &quot;&quot;}&lt;/div&gt;\n&lt;button onClick={() =&gt; setPaused(!paused)}&gt;\n{paused ? &quot;Resume&quot; : &quot;Pause&quot;}\n&lt;/button&gt;\n&lt;button onClick={() =&gt; reset()}&gt;Restart&lt;/button&gt;\n&lt;/div&gt;\n);\n};\n"}],"position":{"start":{"line":868,"column":1,"offset":34670},"end":{"line":910,"column":4,"offset":35898}}}],"position":{"start":{"line":868,"column":1,"offset":34670},"end":{"line":910,"column":4,"offset":35898}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":912,"column":1,"offset":35900},"end":{"line":912,"column":7,"offset":35906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;CountDown hours={1} minutes={45} /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":914,"column":1,"offset":35908},"end":{"line":921,"column":4,"offset":36029}}}],"position":{"start":{"line":914,"column":1,"offset":35908},"end":{"line":921,"column":4,"offset":36029}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a list of elements from an array of primitives.</p>\n<ul>\n<li>Use the value of the <code>isOrdered</code> prop to conditionally render an <code>&lt;ol&gt;</code> or a <code>&lt;ul&gt;</code> list.</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;li&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>","position":{"start":{"line":923,"column":1,"offset":36031},"end":{"line":928,"column":6,"offset":36420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const DataList = ({ isOrdered = false, data }) =&gt; {\n  const list = data.map((val, i) =&gt; &lt;li key={`${i}_${val}`}&gt;{val}&lt;/li&gt;);\n  return isOrdered ? &lt;ol&gt;{list}&lt;/ol&gt; : &lt;ul&gt;{list}&lt;/ul&gt;;\n};\n"}],"position":{"start":{"line":930,"column":1,"offset":36422},"end":{"line":937,"column":4,"offset":36659}}}],"position":{"start":{"line":930,"column":1,"offset":36422},"end":{"line":937,"column":4,"offset":36659}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":939,"column":1,"offset":36661},"end":{"line":939,"column":7,"offset":36667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const names = [&quot;John&quot;, &quot;Paul&quot;, &quot;Mary&quot;];\nReactDOM.render(&lt;DataList data={names} /&gt;, document.getElementById(&quot;root&quot;));\nReactDOM.render(\n  &lt;DataList data={names} isOrdered /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":941,"column":1,"offset":36669},"end":{"line":950,"column":4,"offset":36952}}}],"position":{"start":{"line":941,"column":1,"offset":36669},"end":{"line":950,"column":4,"offset":36952}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a table with rows dynamically created from an array of primitives.</p>\n<ul>\n<li>Render a <code>&lt;table&gt;</code> element with two columns (<code>ID</code> and <code>Value</code>).</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;tr&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>","position":{"start":{"line":952,"column":1,"offset":36954},"end":{"line":957,"column":6,"offset":37330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const DataTable = ({ data }) =&gt; {\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Value&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {data.map((val, i) =&gt; (\n          &lt;tr key={`${i}_${val}`}&gt;\n            &lt;td&gt;{i}&lt;/td&gt;\n            &lt;td&gt;{val}&lt;/td&gt;\n          &lt;/tr&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n};\n"}],"position":{"start":{"line":959,"column":1,"offset":37332},"end":{"line":982,"column":4,"offset":37814}}}],"position":{"start":{"line":959,"column":1,"offset":37332},"end":{"line":982,"column":4,"offset":37814}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":984,"column":1,"offset":37816},"end":{"line":984,"column":7,"offset":37822}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const people = [&quot;John&quot;, &quot;Jesse&quot;];\nReactDOM.render(&lt;DataTable data={people} /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":986,"column":1,"offset":37824},"end":{"line":991,"column":4,"offset":37984}}}],"position":{"start":{"line":986,"column":1,"offset":37824},"end":{"line":991,"column":4,"offset":37984}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a file drag and drop component for a single file.</p>\n<ul>\n<li>Create a ref, called <code>dropRef</code> and bind it to the component's wrapper.</li>\n<li>Use the <code>useState()</code> hook to create the <code>drag</code> and <code>filename</code> variables, initialized to <code>false</code> and <code>''</code> respectively.</li>\n<li>The variables <code>dragCounter</code> and <code>drag</code> are used to determine if a file is being dragged, while <code>filename</code> is used to store the dropped file's name.</li>\n<li>Create the <code>handleDrag</code>, <code>handleDragIn</code>, <code>handleDragOut</code> and <code>handleDrop</code> methods to handle drag and drop functionality.</li>\n<li><code>handleDrag</code> prevents the browser from opening the dragged file, <code>handleDragIn</code> and <code>handleDragOut</code> handle the dragged file entering and exiting the component, while <code>handleDrop</code> handles the file being dropped and passes it to <code>onDrop</code>.</li>\n<li>Use the <code>useEffect()</code> hook to handle each of the drag and drop events using the previously created methods.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\"><span class=\"fu\">.filedrop</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">120</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d3d3d3</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-5\" title=\"5\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-6\" title=\"6\">  <span class=\"kw\">padding</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb25-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb25-10\" title=\"10\"><span class=\"fu\">.filedrop.drag</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-11\" title=\"11\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">dashed</span> <span class=\"cn\">#1e90ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-12\" title=\"12\">}</a>\n<a class=\"sourceLine\" id=\"cb25-13\" title=\"13\"></a>\n<a class=\"sourceLine\" id=\"cb25-14\" title=\"14\"><span class=\"fu\">.filedrop.ready</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-15\" title=\"15\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#32cd32</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-16\" title=\"16\">}</a>","position":{"start":{"line":993,"column":1,"offset":37986},"end":{"line":1018,"column":52,"offset":41212}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1020,"column":1,"offset":41214},"end":{"line":1020,"column":7,"offset":41220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const FileDrop = ({ onDrop }) =&gt; {\n  const [drag, setDrag] = React.useState(false);\n  const [filename, setFilename] = React.useState(&quot;&quot;);\n  let dropRef = React.createRef();\n  let dragCounter = 0;\n\nconst handleDrag = (e) =&gt; {\ne.preventDefault();\ne.stopPropagation();\n};\n\nconst handleDragIn = (e) =&gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter++;\nif (e.dataTransfer.items &amp;&amp; e.dataTransfer.items.length &gt; 0) setDrag(true);\n};\n\nconst handleDragOut = (e) =&gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter--;\nif (dragCounter === 0) setDrag(false);\n};\n\nconst handleDrop = (e) =&gt; {\ne.preventDefault();\ne.stopPropagation();\nsetDrag(false);\nif (e.dataTransfer.files &amp;&amp; e.dataTransfer.files.length &gt; 0) {\nonDrop(e.dataTransfer.files[0]);\nsetFilename(e.dataTransfer.files[0].name);\ne.dataTransfer.clearData();\ndragCounter = 0;\n}\n};\n\nReact.useEffect(() =&gt; {\nlet div = dropRef.current;\ndiv.addEventListener(&quot;dragenter&quot;, handleDragIn);\ndiv.addEventListener(&quot;dragleave&quot;, handleDragOut);\ndiv.addEventListener(&quot;dragover&quot;, handleDrag);\ndiv.addEventListener(&quot;drop&quot;, handleDrop);\nreturn () =&gt; {\ndiv.removeEventListener(&quot;dragenter&quot;, handleDragIn);\ndiv.removeEventListener(&quot;dragleave&quot;, handleDragOut);\ndiv.removeEventListener(&quot;dragover&quot;, handleDrag);\ndiv.removeEventListener(&quot;drop&quot;, handleDrop);\n};\n});\n\nreturn (\n&lt;div\nref={dropRef}\nclassName={\ndrag ? &quot;filedrop drag&quot; : filename ? &quot;filedrop ready&quot; : &quot;filedrop&quot;\n}\n&gt;\n{filename &amp;&amp; !drag ? &lt;div&gt;{filename}&lt;/div&gt; : &lt;div&gt;Drop a file here!&lt;/div&gt;}\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;FileDrop onDrop={console.log} /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1022,"column":1,"offset":41222},"end":{"line":1096,"column":4,"offset":43062}}}],"position":{"start":{"line":1022,"column":1,"offset":41222},"end":{"line":1096,"column":4,"offset":43062}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a textarea component with a character limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>content</code> state variable and set its value to that of <code>value</code> prop, trimmed down to <code>limit</code> characters.</li>\n<li>Create a method <code>setFormattedContent</code>, which trims the content down to <code>limit</code> characters and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of the fired event.</li>\n</ul>","position":{"start":{"line":1098,"column":1,"offset":43064},"end":{"line":1104,"column":6,"offset":43677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const LimitedTextarea = ({ rows, cols, value, limit }) =&gt; {\n  const [content, setContent] = React.useState(value.slice(0, limit));\n\nconst setFormattedContent = React.useCallback(\n(text) =&gt; {\nsetContent(text.slice(0, limit));\n},\n[limit, setContent]\n);\n\nreturn (\n&lt;&gt;\n&lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&gt;\n&lt;p&gt;\n{content.length}/{limit}\n&lt;/p&gt;\n&lt;/&gt;\n);\n};\n"}],"position":{"start":{"line":1106,"column":1,"offset":43679},"end":{"line":1133,"column":4,"offset":44152}}}],"position":{"start":{"line":1106,"column":1,"offset":43679},"end":{"line":1133,"column":4,"offset":44152}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1135,"column":1,"offset":44154},"end":{"line":1135,"column":7,"offset":44160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;LimitedTextarea limit={32} value=&quot;Hello!&quot; /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1137,"column":1,"offset":44162},"end":{"line":1144,"column":4,"offset":44302}}}],"position":{"start":{"line":1137,"column":1,"offset":44162},"end":{"line":1144,"column":4,"offset":44302}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a textarea component with a word limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable, containing <code>content</code> and <code>wordCount</code>, using the <code>value</code> prop and <code>0</code> as the initial values respectively.</li>\n<li>Use the <code>useCallback()</code> hooks to create a memoized function, <code>setFormattedContent</code>, that uses <code>String.prototype.split()</code> to turn the input into an array of words.</li>\n<li>Check if the result of applying <code>Array.prototype.filter()</code> combined with <code>Boolean</code> has a <code>length</code> longer than <code>limit</code> and, if so, trim the input, otherwise return the raw input, updating state accordingly in both cases.</li>\n<li>Use the <code>useEffect()</code> hook to call the <code>setFormattedContent</code> method on the value of the <code>content</code> state variable during the initial render.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of <code>event.target.value</code>.</li>\n</ul>","position":{"start":{"line":1146,"column":1,"offset":44304},"end":{"line":1154,"column":6,"offset":45434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const LimitedWordTextarea = ({ rows, cols, value, limit }) =&gt; {\n  const [{ content, wordCount }, setContent] = React.useState({\n    content: value,\n    wordCount: 0,\n  });\n\nconst setFormattedContent = React.useCallback(\n(text) =&gt; {\nlet words = text.split(&quot; &quot;).filter(Boolean);\nif (words.length &gt; limit) {\nsetContent({\ncontent: words.slice(0, limit).join(&quot; &quot;),\nwordCount: limit,\n});\n} else {\nsetContent({ content: text, wordCount: words.length });\n}\n},\n[limit, setContent]\n);\n\nReact.useEffect(() =&gt; {\nsetFormattedContent(content);\n}, []);\n\nreturn (\n&lt;&gt;\n&lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&gt;\n&lt;p&gt;\n{wordCount}/{limit}\n&lt;/p&gt;\n&lt;/&gt;\n);\n};\n"}],"position":{"start":{"line":1156,"column":1,"offset":45436},"end":{"line":1198,"column":4,"offset":46217}}}],"position":{"start":{"line":1156,"column":1,"offset":45436},"end":{"line":1198,"column":4,"offset":46217}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1200,"column":1,"offset":46219},"end":{"line":1200,"column":7,"offset":46225}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;LimitedWordTextarea limit={5} value=&quot;Hello there!&quot; /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1202,"column":1,"offset":46227},"end":{"line":1209,"column":4,"offset":46376}}}],"position":{"start":{"line":1202,"column":1,"offset":46227},"end":{"line":1209,"column":4,"offset":46376}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a spinning loader component.</p>\n<ul>\n<li>Render an SVG, whose <code>height</code> and <code>width</code> are determined by the <code>size</code> prop.</li>\n<li>Use CSS to animate the SVG, creating a spinning animation.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb32-1\" title=\"1\"><span class=\"fu\">.loader</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-2\" title=\"2\">  <span class=\"kw\">animation</span>: rotate <span class=\"dv\">2</span><span class=\"dt\">s</span> <span class=\"dv\">linear</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb32-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb32-5\" title=\"5\"><span class=\"im\">@keyframes</span> rotate {</a>\n<a class=\"sourceLine\" id=\"cb32-6\" title=\"6\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-7\" title=\"7\">    <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">360</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-8\" title=\"8\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-9\" title=\"9\">}</a>\n<a class=\"sourceLine\" id=\"cb32-10\" title=\"10\"></a>\n<a class=\"sourceLine\" id=\"cb32-11\" title=\"11\"><span class=\"fu\">.loader</span> circle {</a>\n<a class=\"sourceLine\" id=\"cb32-12\" title=\"12\">  <span class=\"kw\">animation</span>: dash <span class=\"dv\">1.5</span><span class=\"dt\">s</span> <span class=\"dv\">ease-in-out</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb32-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb32-15\" title=\"15\"><span class=\"im\">@keyframes</span> dash {</a>\n<a class=\"sourceLine\" id=\"cb32-16\" title=\"16\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-17\" title=\"17\">    stroke-dasharray: <span class=\"dv\">1</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-18\" title=\"18\">    stroke-dashoffset: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-19\" title=\"19\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-20\" title=\"20\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-21\" title=\"21\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-22\" title=\"22\">    stroke-dashoffset: <span class=\"dv\">-35</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-23\" title=\"23\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-24\" title=\"24\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-25\" title=\"25\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-26\" title=\"26\">    stroke-dashoffset: <span class=\"dv\">-124</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-27\" title=\"27\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-28\" title=\"28\">}</a>","position":{"start":{"line":1211,"column":1,"offset":46378},"end":{"line":1244,"column":52,"offset":49571}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1246,"column":1,"offset":49573},"end":{"line":1246,"column":7,"offset":49579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Loader = ({ size }) =&gt; {\n  return (\n    &lt;svg\n      className=&quot;loader&quot;\n      xmlns=&quot;http://www.w3.org/2000/svg&quot;\n      width={size}\n      height={size}\n      viewBox=&quot;0 0 24 24&quot;\n      fill=&quot;none&quot;\n      stroke=&quot;currentColor&quot;\n      strokeWidth=&quot;2&quot;\n      strokeLinecap=&quot;round&quot;\n      strokeLinejoin=&quot;round&quot;\n    &gt;\n      &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot; /&gt;\n    &lt;/svg&gt;\n  );\n};\n\n<hr />\n\n```js\n\nReactDOM.render(&lt;Loader size={24} /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":1248,"column":1,"offset":49581},"end":{"line":1275,"column":4,"offset":50199}}}],"position":{"start":{"line":1248,"column":1,"offset":49581},"end":{"line":1275,"column":4,"offset":50199}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a link formatted to send an email (<code>mailto:</code> link).</p>\n<ul>\n<li>Use the <code>email</code>, <code>subject</code> and <code>body</code> props to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Use <code>encodeURIcomponent</code> to safely encode the <code>subject</code> and <code>body</code> into the link URL.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>","position":{"start":{"line":1277,"column":1,"offset":50201},"end":{"line":1283,"column":6,"offset":50670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Mailto = ({ email, subject = &quot;&quot;, body = &quot;&quot;, children }) =&gt; {\n  let params = subject || body ? &quot;?&quot; : &quot;&quot;;\n  if (subject) params += `subject=${encodeURIComponent(subject)}`;\n  if (body) params += `${subject ? &quot;&amp;&quot; : &quot;&quot;}body=${encodeURIComponent(body)}`;\n\nreturn &lt;a href={`mailto:${email}${params}`}&gt;{children}&lt;/a&gt;;\n};\n"}],"position":{"start":{"line":1285,"column":1,"offset":50672},"end":{"line":1295,"column":4,"offset":51082}}}],"position":{"start":{"line":1285,"column":1,"offset":50672},"end":{"line":1295,"column":4,"offset":51082}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1297,"column":1,"offset":51084},"end":{"line":1297,"column":7,"offset":51090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;Mailto email=&quot;foo@bar.baz&quot; subject=&quot;Hello &amp; Welcome&quot; body=&quot;Hello world!&quot;&gt;\n    Mail me!\n  &lt;/Mailto&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1299,"column":1,"offset":51092},"end":{"line":1308,"column":4,"offset":51316}}}],"position":{"start":{"line":1299,"column":1,"offset":51092},"end":{"line":1308,"column":4,"offset":51316}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a table with rows dynamically created from an array of objects and a list of property names.</p>\n<ul>\n<li>Use <code>Object.keys()</code>, <code>Array.prototype.filter()</code>, <code>Array.prototype.includes()</code> and <code>Array.prototype.reduce()</code> to produce a <code>filteredData</code> array, containing all objects with the keys specified in <code>propertyNames</code>.</li>\n<li>Render a <code>&lt;table&gt;</code> element with a set of columns equal to the amount of values in <code>propertyNames</code>.</li>\n<li>Use <code>Array.prototype.map()</code> to render each value in the <code>propertyNames</code> array as a <code>&lt;th&gt;</code> element.</li>\n<li>Use <code>Array.prototype.map()</code> to render each object in the <code>filteredData</code> array as a <code>&lt;tr&gt;</code> element, containing a <code>&lt;td&gt;</code> for each key in the object.</li>\n</ul>\n<p><em>This component does not work with nested objects and will break if there are nested objects inside any of the properties specified in <code>propertyNames</code></em></p>","position":{"start":{"line":1310,"column":1,"offset":51318},"end":{"line":1318,"column":177,"offset":52401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const MappedTable = ({ data, propertyNames }) =&gt; {\n  let filteredData = data.map((v) =&gt;\n    Object.keys(v)\n      .filter((k) =&gt; propertyNames.includes(k))\n      .reduce((acc, key) =&gt; ((acc[key] = v[key]), acc), {})\n  );\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          {propertyNames.map((val) =&gt; (\n            &lt;th key={`h_${val}`}&gt;{val}&lt;/th&gt;\n          ))}\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {filteredData.map((val, i) =&gt; (\n          &lt;tr key={`i_${i}`}&gt;\n            {propertyNames.map((p) =&gt; (\n              &lt;td key={`i_${i}_${p}`}&gt;{val[p]}&lt;/td&gt;\n            ))}\n          &lt;/tr&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n};\n"}],"position":{"start":{"line":1320,"column":1,"offset":52403},"end":{"line":1350,"column":4,"offset":53172}}}],"position":{"start":{"line":1320,"column":1,"offset":52403},"end":{"line":1350,"column":4,"offset":53172}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1352,"column":1,"offset":53174},"end":{"line":1352,"column":7,"offset":53180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const people = [\n  { name: &quot;John&quot;, surname: &quot;Smith&quot;, age: 42 },\n  { name: &quot;Adam&quot;, surname: &quot;Smith&quot;, gender: &quot;male&quot; },\n];\nconst propertyNames = [&quot;name&quot;, &quot;surname&quot;, &quot;age&quot;];\nReactDOM.render(\n  &lt;MappedTable data={people} propertyNames={propertyNames} /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1354,"column":1,"offset":53182},"end":{"line":1366,"column":4,"offset":53577}}}],"position":{"start":{"line":1354,"column":1,"offset":53182},"end":{"line":1366,"column":4,"offset":53577}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a Modal component, controllable through events.</p>\n<ul>\n<li>Define <code>keydownHandler</code>, a method which handles all keyboard events and is used to call <code>onClose</code> when the <code>Esc</code> key is pressed.</li>\n<li>Use the <code>useEffect()</code> hook to add or remove the <code>keydown</code> event listener to the <code>document</code>, calling <code>keydownHandler</code> for every event.</li>\n<li>Add a styled <code>&lt;span&gt;</code> element that acts as a close button, calling <code>onClose</code> when clicked.</li>\n<li>Use the <code>isVisible</code> prop passed down from the parent to determine if the modal should be displayed or not.</li>\n<li>To use the component, import <code>Modal</code> only once and then display it by passing a boolean value to the <code>isVisible</code> attribute.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb39-1\" title=\"1\"><span class=\"fu\">.modal</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">fixed</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-3\" title=\"3\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-4\" title=\"4\">  <span class=\"kw\">bottom</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-5\" title=\"5\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-6\" title=\"6\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-7\" title=\"7\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-8\" title=\"8\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">9999</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-9\" title=\"9\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-10\" title=\"10\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-11\" title=\"11\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-12\" title=\"12\">  <span class=\"kw\">background-color</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.25</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-13\" title=\"13\">  <span class=\"kw\">animation-name</span>: appear<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-14\" title=\"14\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">300</span><span class=\"dt\">ms</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb39-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb39-17\" title=\"17\"><span class=\"fu\">.modal-dialog</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-18\" title=\"18\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-19\" title=\"19\">  <span class=\"kw\">max-width</span>: <span class=\"dv\">550</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-20\" title=\"20\">  <span class=\"kw\">background</span>: <span class=\"cn\">white</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-21\" title=\"21\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-22\" title=\"22\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-23\" title=\"23\">  <span class=\"kw\">max-height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">vh</span> <span class=\"op\">-</span> <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-24\" title=\"24\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-25\" title=\"25\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-26\" title=\"26\">  <span class=\"kw\">flex-direction</span>: column<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-27\" title=\"27\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-28\" title=\"28\">  <span class=\"kw\">box-shadow</span>: <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.2</span><span class=\"fu\">)</span><span class=\"op\">,</span> <span class=\"dv\">0</span> <span class=\"dv\">6</span><span class=\"dt\">px</span> <span class=\"dv\">20</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.19</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-29\" title=\"29\">  <span class=\"kw\">-webkit-animation-name</span>: animatetop<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-30\" title=\"30\">  <span class=\"kw\">-webkit-animation-duration</span>: <span class=\"dv\">0.4</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-31\" title=\"31\">  <span class=\"kw\">animation-name</span>: slide-in<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-32\" title=\"32\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">0.5</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb39-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb39-35\" title=\"35\"><span class=\"fu\">.modal-header</span><span class=\"op\">,</span></a>\n<a class=\"sourceLine\" id=\"cb39-36\" title=\"36\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-37\" title=\"37\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-38\" title=\"38\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-39\" title=\"39\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-40\" title=\"40\">}</a>\n<a class=\"sourceLine\" id=\"cb39-41\" title=\"41\"></a>\n<a class=\"sourceLine\" id=\"cb39-42\" title=\"42\"><span class=\"fu\">.modal-header</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-43\" title=\"43\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-44\" title=\"44\">  <span class=\"kw\">justify-content</span>: space-between<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-45\" title=\"45\">}</a>\n<a class=\"sourceLine\" id=\"cb39-46\" title=\"46\"></a>\n<a class=\"sourceLine\" id=\"cb39-47\" title=\"47\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-48\" title=\"48\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-49\" title=\"49\">  <span class=\"kw\">justify-content</span>: flex-end<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-50\" title=\"50\">}</a>\n<a class=\"sourceLine\" id=\"cb39-51\" title=\"51\"></a>\n<a class=\"sourceLine\" id=\"cb39-52\" title=\"52\"><span class=\"fu\">.modal-close</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-53\" title=\"53\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-54\" title=\"54\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-55\" title=\"55\">  <span class=\"kw\">margin</span>: <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-56\" title=\"56\">}</a>\n<a class=\"sourceLine\" id=\"cb39-57\" title=\"57\"></a>\n<a class=\"sourceLine\" id=\"cb39-58\" title=\"58\"><span class=\"fu\">.modal-body</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-59\" title=\"59\">  <span class=\"kw\">overflow</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-60\" title=\"60\">}</a>\n<a class=\"sourceLine\" id=\"cb39-61\" title=\"61\"></a>\n<a class=\"sourceLine\" id=\"cb39-62\" title=\"62\"><span class=\"fu\">.modal-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-63\" title=\"63\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-64\" title=\"64\">}</a>\n<a class=\"sourceLine\" id=\"cb39-65\" title=\"65\"></a>\n<a class=\"sourceLine\" id=\"cb39-66\" title=\"66\"><span class=\"im\">@keyframes</span> appear {</a>\n<a class=\"sourceLine\" id=\"cb39-67\" title=\"67\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-68\" title=\"68\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-69\" title=\"69\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-70\" title=\"70\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-71\" title=\"71\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-72\" title=\"72\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-73\" title=\"73\">}</a>\n<a class=\"sourceLine\" id=\"cb39-74\" title=\"74\"></a>\n<a class=\"sourceLine\" id=\"cb39-75\" title=\"75\"><span class=\"im\">@keyframes</span> slide-in {</a>\n<a class=\"sourceLine\" id=\"cb39-76\" title=\"76\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-77\" title=\"77\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">-150</span><span class=\"dt\">px</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-78\" title=\"78\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-79\" title=\"79\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-80\" title=\"80\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">0</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-81\" title=\"81\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-82\" title=\"82\">}</a>","position":{"start":{"line":1368,"column":1,"offset":53579},"end":{"line":1458,"column":52,"offset":64895}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1460,"column":1,"offset":64897},"end":{"line":1460,"column":7,"offset":64903}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Modal = ({ isVisible = false, title, content, footer, onClose }) =&gt; {\n  const keydownHandler = ({ key }) =&gt; {\n    switch (key) {\n      case &quot;Escape&quot;:\n        onClose();\n        break;\n      default:\n    }\n  };\n\nReact.useEffect(() =&gt; {\ndocument.addEventListener(&quot;keydown&quot;, keydownHandler);\nreturn () =&gt; document.removeEventListener(&quot;keydown&quot;, keydownHandler);\n});\n\nreturn !isVisible ? null : (\n&lt;div className=&quot;modal&quot; onClick={onClose}&gt;\n&lt;div className=&quot;modal-dialog&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;\n&lt;div className=&quot;modal-header&quot;&gt;\n&lt;h3 className=&quot;modal-title&quot;&gt;{title}&lt;/h3&gt;\n&lt;span className=&quot;modal-close&quot; onClick={onClose}&gt;\n&amp;times;\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;div className=&quot;modal-body&quot;&gt;\n&lt;div className=&quot;modal-content&quot;&gt;{content}&lt;/div&gt;\n&lt;/div&gt;\n{footer &amp;&amp; &lt;div className=&quot;modal-footer&quot;&gt;{footer}&lt;/div&gt;}\n&lt;/div&gt;\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nconst App = () =&gt; {\n  const [isModal, setModal] = React.useState(false);\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; setModal(true)}&gt;Click Here&lt;/button&gt;\n      &lt;Modal\n        isVisible={isModal}\n        title=&quot;Modal Title&quot;\n        content={&lt;p&gt;Add your content here&lt;/p&gt;}\n        footer={&lt;button&gt;Cancel&lt;/button&gt;}\n        onClose={() =&gt; setModal(false)}\n      /&gt;\n    &lt;/&gt;\n  );\n};\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":1462,"column":1,"offset":64905},"end":{"line":1519,"column":4,"offset":66505}}}],"position":{"start":{"line":1462,"column":1,"offset":64905},"end":{"line":1519,"column":4,"offset":66505}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a checkbox list that uses a callback function to pass its selected value/values to the parent component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>data</code> state variable and use the <code>options</code> prop to initialize its value.</li>\n<li>Create a <code>toggle</code> function that uses the spread operator (<code>...</code>) and <code>Array.prototype.splice()</code> to update the <code>data</code> state variable and call the <code>onChange</code> callback with any <code>checked</code> options.</li>\n<li>Use <code>Array.prototype.map()</code> to map the <code>data</code> state variable to individual <code>&lt;input type=\"checkbox\"&gt;</code> elements, each one wrapped in a <code>&lt;label&gt;</code>, binding the <code>onClick</code> handler to the <code>toggle</code> function.</li>\n</ul>","position":{"start":{"line":1521,"column":1,"offset":66507},"end":{"line":1527,"column":6,"offset":67355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const MultiselectCheckbox = ({ options, onChange }) =&gt; {\n  const [data, setData] = React.useState(options);\n\nconst toggle = (index) =&gt; {\nconst newData = [...data];\nnewData.splice(index, 1, {\nlabel: data[index].label,\nchecked: !data[index].checked,\n});\nsetData(newData);\nonChange(newData.filter((x) =&gt; x.checked));\n};\n\nreturn (\n&lt;&gt;\n{data.map((item, index) =&gt; (\n&lt;label key={item.label}&gt;\n&lt;input\nreadOnly\ntype=&quot;checkbox&quot;\nchecked={item.checked || false}\nonClick={() =&gt; toggle(index)}\n/&gt;\n{item.label}\n&lt;/label&gt;\n))}\n&lt;/&gt;\n);\n};\n"}],"position":{"start":{"line":1529,"column":1,"offset":67357},"end":{"line":1561,"column":4,"offset":67940}}}],"position":{"start":{"line":1529,"column":1,"offset":67357},"end":{"line":1561,"column":4,"offset":67940}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1563,"column":1,"offset":67942},"end":{"line":1563,"column":7,"offset":67948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const options = [{ label: &quot;Item One&quot; }, { label: &quot;Item Two&quot; }];\n\nReactDOM.render(\n&lt;MultiselectCheckbox\noptions={options}\nonChange={(data) =&gt; {\nconsole.log(data);\n}}\n/&gt;,\ndocument.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1565,"column":1,"offset":67950},"end":{"line":1579,"column":4,"offset":68204}}}],"position":{"start":{"line":1565,"column":1,"offset":67950},"end":{"line":1579,"column":4,"offset":68204}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a password input field with a reveal button.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>shown</code> state variable and set its value to <code>false</code>.</li>\n<li>When the <code>&lt;button&gt;</code> is clicked, execute <code>setShown</code>, toggling the <code>type</code> of the <code>&lt;input&gt;</code> between <code>\"text\"</code> and <code>\"password\"</code>.</li>\n</ul>","position":{"start":{"line":1581,"column":1,"offset":68206},"end":{"line":1586,"column":6,"offset":68629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const PasswordRevealer = ({ value }) =&gt; {\n  const [shown, setShown] = React.useState(false);\n  return (\n    &lt;&gt;\n      &lt;input type={shown ? &quot;text&quot; : &quot;password&quot;} value={value} /&gt;\n      &lt;button onClick={() =&gt; setShown(!shown)}&gt;Show/Hide&lt;/button&gt;\n    &lt;/&gt;\n  );\n};\n"}],"position":{"start":{"line":1588,"column":1,"offset":68631},"end":{"line":1600,"column":4,"offset":68956}}}],"position":{"start":{"line":1588,"column":1,"offset":68631},"end":{"line":1600,"column":4,"offset":68956}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1602,"column":1,"offset":68958},"end":{"line":1602,"column":7,"offset":68964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(&lt;PasswordRevealer /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":1604,"column":1,"offset":68966},"end":{"line":1608,"column":4,"offset":69065}}}],"position":{"start":{"line":1604,"column":1,"offset":68966},"end":{"line":1608,"column":4,"offset":69065}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a button that animates a ripple effect when clicked.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>coords</code> and <code>isRippling</code> state variables for the pointer's coordinates and the animation state of the button respectively.</li>\n<li>Use a <code>useEffect()</code> hook to change the value of <code>isRippling</code> every time the <code>coords</code> state variable changes, starting the animation.</li>\n<li>Use <code>setTimeout()</code> in the previous hook to clear the animation after it's done playing.</li>\n<li>Use a <code>useEffect()</code> hook to reset <code>coords</code> whenever the <code>isRippling</code> state variable is <code>false.</code></li>\n<li>Handle the <code>onClick</code> event by updating the <code>coords</code> state variable and calling the passed callback.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb46\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb46-1\" title=\"1\"><span class=\"fu\">.ripple-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-2\" title=\"2\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-4\" title=\"4\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span> <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"cn\">#1976d2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-7\" title=\"7\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-8\" title=\"8\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-9\" title=\"9\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-10\" title=\"10\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb46-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb46-13\" title=\"13\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.ripple</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-14\" title=\"14\">  <span class=\"kw\">width</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-16\" title=\"16\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-17\" title=\"17\">  <span class=\"kw\">background</span>: <span class=\"cn\">#63a4ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-19\" title=\"19\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-20\" title=\"20\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">9999</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-21\" title=\"21\">  <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-22\" title=\"22\">  <span class=\"kw\">animation</span>: <span class=\"dv\">0.9</span><span class=\"dt\">s</span> <span class=\"dv\">ease</span> <span class=\"dv\">1</span> <span class=\"dv\">forwards</span> ripple-effect<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-23\" title=\"23\">}</a>\n<a class=\"sourceLine\" id=\"cb46-24\" title=\"24\"></a>\n<a class=\"sourceLine\" id=\"cb46-25\" title=\"25\"><span class=\"im\">@keyframes</span> ripple-effect {</a>\n<a class=\"sourceLine\" id=\"cb46-26\" title=\"26\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-27\" title=\"27\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">1</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-28\" title=\"28\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-29\" title=\"29\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-30\" title=\"30\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-31\" title=\"31\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">10</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-32\" title=\"32\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0.375</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-33\" title=\"33\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-34\" title=\"34\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-35\" title=\"35\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">35</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-36\" title=\"36\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-37\" title=\"37\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-38\" title=\"38\">}</a>\n<a class=\"sourceLine\" id=\"cb46-39\" title=\"39\"></a>\n<a class=\"sourceLine\" id=\"cb46-40\" title=\"40\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.content</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-41\" title=\"41\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-42\" title=\"42\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-43\" title=\"43\">}</a>","position":{"start":{"line":1610,"column":1,"offset":69067},"end":{"line":1661,"column":52,"offset":75410}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1663,"column":1,"offset":75412},"end":{"line":1663,"column":7,"offset":75418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const RippleButton = ({ children, onClick }) =&gt; {\n  const [coords, setCoords] = React.useState({ x: -1, y: -1 });\n  const [isRippling, setIsRippling] = React.useState(false);\n\nReact.useEffect(() =&gt; {\nif (coords.x !== -1 &amp;&amp; coords.y !== -1) {\nsetIsRippling(true);\nsetTimeout(() =&gt; setIsRippling(false), 300);\n} else setIsRippling(false);\n}, [coords]);\n\nReact.useEffect(() =&gt; {\nif (!isRippling) setCoords({ x: -1, y: -1 });\n}, [isRippling]);\n\nreturn (\n&lt;button\nclassName=&quot;ripple-button&quot;\nonClick={(e) =&gt; {\nconst rect = e.target.getBoundingClientRect();\nsetCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top });\nonClick &amp;&amp; onClick(e);\n}}\n&gt;\n{isRippling ? (\n&lt;span\nclassName=&quot;ripple&quot;\nstyle={{\n            left: coords.x,\n            top: coords.y,\n          }}\n/&gt;\n) : (\n&quot;&quot;\n)}\n&lt;span className=&quot;content&quot;&gt;{children}&lt;/span&gt;\n&lt;/button&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;RippleButton onClick={(e) =&gt; console.log(e)}&gt;Click me&lt;/RippleButton&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1665,"column":1,"offset":75420},"end":{"line":1716,"column":4,"offset":76536}}}],"position":{"start":{"line":1665,"column":1,"offset":75420},"end":{"line":1716,"column":4,"offset":76536}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders an uncontrolled <code>&lt;select&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the the <code>selectedValue</code> prop as the <code>defaultValue</code> of the <code>&lt;select&gt;</code> element to set its initial value..</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>Use <code>Array.prototype.map()</code> on the <code>values</code> array to create an <code>&lt;option&gt;</code> element for each passed value.</li>\n<li>Each item in <code>values</code> must be a 2-element array, where the first element is the <code>value</code> of the item and the second one is the displayed text for it.</li>\n</ul>","position":{"start":{"line":1718,"column":1,"offset":76538},"end":{"line":1725,"column":6,"offset":77315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Select = ({ values, onValueChange, selectedValue, ...rest }) =&gt; {\n  return (\n    &lt;select\n      defaultValue={selectedValue}\n      onChange={({ target: { value } }) =&gt; onValueChange(value)}\n      {...rest}\n    &gt;\n      {values.map(([value, text]) =&gt; (\n        &lt;option key={value} value={value}&gt;\n          {text}\n        &lt;/option&gt;\n      ))}\n    &lt;/select&gt;\n  );\n};\n"}],"position":{"start":{"line":1727,"column":1,"offset":77317},"end":{"line":1745,"column":4,"offset":77727}}}],"position":{"start":{"line":1727,"column":1,"offset":77317},"end":{"line":1745,"column":4,"offset":77727}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1747,"column":1,"offset":77729},"end":{"line":1747,"column":7,"offset":77735}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const choices = [\n  [&quot;grapefruit&quot;, &quot;Grapefruit&quot;],\n  [&quot;lime&quot;, &quot;Lime&quot;],\n  [&quot;coconut&quot;, &quot;Coconut&quot;],\n  [&quot;mango&quot;, &quot;Mango&quot;],\n];\nReactDOM.render(\n  &lt;Select\n    values={choices}\n    selectedValue=&quot;lime&quot;\n    onValueChange={(val) =&gt; console.log(val)}\n  /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1749,"column":1,"offset":77737},"end":{"line":1766,"column":4,"offset":78140}}}],"position":{"start":{"line":1749,"column":1,"offset":77737},"end":{"line":1766,"column":4,"offset":78140}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders an uncontrolled range input element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Set the <code>type</code> of the <code>&lt;input&gt;</code> element to <code>\"range\"</code> to create a slider.</li>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>","position":{"start":{"line":1768,"column":1,"offset":78142},"end":{"line":1774,"column":6,"offset":78655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Slider = ({\n  min = 0,\n  max = 100,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&gt; {\n  return (\n    &lt;input\n      type=&quot;range&quot;\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&gt; onValueChange(value)}\n      {...rest}\n    /&gt;\n  );\n};\n"}],"position":{"start":{"line":1776,"column":1,"offset":78657},"end":{"line":1797,"column":4,"offset":78986}}}],"position":{"start":{"line":1776,"column":1,"offset":78657},"end":{"line":1797,"column":4,"offset":78986}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":1799,"column":1,"offset":78988},"end":{"line":1799,"column":7,"offset":78994}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;Slider onValueChange={(val) =&gt; console.log(val)} /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1801,"column":1,"offset":78996},"end":{"line":1808,"column":4,"offset":79136}}}],"position":{"start":{"line":1801,"column":1,"offset":78996},"end":{"line":1808,"column":4,"offset":79136}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a star rating component.</p>\n<ul>\n<li>Define a component, called <code>Star</code> that will render each individual star with the appropriate appearance, based on the parent component's state.</li>\n<li>In the <code>StarRating</code> component, use the <code>useState()</code> hook to define the <code>rating</code> and <code>selection</code> state variables with the appropriate initial values.</li>\n<li>Create a method, <code>hoverOver</code>, that updates <code>selected</code> according to the provided <code>event</code>, using the .<code>data-star-id</code> attribute of the event's target or resets it to <code>0</code> if called with a <code>null</code> argument.</li>\n<li>Use <code>Array.from()</code> to create an array of <code>5</code> elements and <code>Array.prototype.map()</code> to create individual <code>&lt;Star&gt;</code> components.</li>\n<li>Handle the <code>onMouseOver</code> and <code>onMouseLeave</code> events of the wrapping element using <code>hoverOver</code> and the <code>onClick</code> event using <code>setRating</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb53\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb53-1\" title=\"1\"><span class=\"fu\">.star</span> {</a>\n<a class=\"sourceLine\" id=\"cb53-2\" title=\"2\">  <span class=\"kw\">color</span>: <span class=\"cn\">#ff9933</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-3\" title=\"3\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-4\" title=\"4\">}</a>","position":{"start":{"line":1810,"column":1,"offset":79138},"end":{"line":1822,"column":50,"offset":80718}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1824,"column":1,"offset":80720},"end":{"line":1824,"column":7,"offset":80726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Star = ({ marked, starId }) =&gt; {\n  return (\n    &lt;span data-star-id={starId} className=&quot;star&quot; role=&quot;button&quot;&gt;\n      {marked ? &quot;\\u2605&quot; : &quot;\\u2606&quot;}\n    &lt;/span&gt;\n  );\n};\n\nconst StarRating = ({ value }) =&gt; {\nconst [rating, setRating] = React.useState(parseInt(value) || 0);\nconst [selection, setSelection] = React.useState(0);\n\nconst hoverOver = (event) =&gt; {\nlet val = 0;\nif (event &amp;&amp; event.target &amp;&amp; event.target.getAttribute(&quot;data-star-id&quot;))\nval = event.target.getAttribute(&quot;data-star-id&quot;);\nsetSelection(val);\n};\nreturn (\n&lt;div\nonMouseOut={() =&gt; hoverOver(null)}\nonClick={(e) =&gt;\nsetRating(e.target.getAttribute(&quot;data-star-id&quot;) || rating)\n}\nonMouseOver={hoverOver}\n&gt;\n{Array.from({ length: 5 }, (v, i) =&gt; (\n&lt;Star\nstarId={i + 1}\nkey={`star_${i + 1}`}\nmarked={selection ? selection &gt;= i + 1 : rating &gt;= i + 1}\n/&gt;\n))}\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(&lt;StarRating value={2} /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":1826,"column":1,"offset":80728},"end":{"line":1871,"column":4,"offset":81814}}}],"position":{"start":{"line":1826,"column":1,"offset":80728},"end":{"line":1871,"column":4,"offset":81814}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a tabbed menu and view component.</p>\n<ul>\n<li>Define a <code>Tabs</code> component that uses the <code>useState()</code> hook to initialize the value of the <code>bindIndex</code> state variable to <code>defaultIndex</code>.</li>\n<li>Define a <code>TabItem</code> component and filter <code>children</code> passed to the <code>Tabs</code> component to remove unnecessary nodes except for <code>TabItem</code> by identifying the function's name.</li>\n<li>Define <code>changeTab</code>, which will be executed when clicking a <code>&lt;button&gt;</code> from the menu.</li>\n<li><code>changeTab</code> executes the passed callback, <code>onTabClick</code>, and updates <code>bindIndex</code> based on the clicked element.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the menu and view of the tabs, using the value of <code>binIndex</code> to determine the active tab and apply the correct <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb56-1\" title=\"1\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button {</a>\n<a class=\"sourceLine\" id=\"cb56-2\" title=\"2\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-3\" title=\"3\">  <span class=\"kw\">padding</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-4\" title=\"4\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-5\" title=\"5\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb56-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb56-9\" title=\"9\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"fu\">.focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-10\" title=\"10\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb56-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb56-13\" title=\"13\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"in\">:hover</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-14\" title=\"14\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb56-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb56-17\" title=\"17\"><span class=\"fu\">.tab-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-19\" title=\"19\">}</a>\n<a class=\"sourceLine\" id=\"cb56-20\" title=\"20\"></a>\n<a class=\"sourceLine\" id=\"cb56-21\" title=\"21\"><span class=\"fu\">.tab-content.selected</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-22\" title=\"22\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-23\" title=\"23\">}</a>","position":{"start":{"line":1873,"column":1,"offset":81816},"end":{"line":1904,"column":52,"offset":85547}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":1906,"column":1,"offset":85549},"end":{"line":1906,"column":7,"offset":85555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const TabItem = (props) =&gt; &lt;div {...props} /&gt;;\n\nconst Tabs = ({ defaultIndex = 0, onTabClick, children }) =&gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\nconst changeTab = (newIndex) =&gt; {\nif (typeof onItemClick === &quot;function&quot;) onItemClick(itemIndex);\nsetBindIndex(newIndex);\n};\nconst items = children.filter((item) =&gt; item.type.name === &quot;TabItem&quot;);\n\nreturn (\n&lt;div className=&quot;wrapper&quot;&gt;\n&lt;div className=&quot;tab-menu&quot;&gt;\n{items.map(({ props: { index, label } }) =&gt; (\n&lt;button\nkey={`tab-btn-${index}`}\nonClick={() =&gt; changeTab(index)}\nclassName={bindIndex === index ? &quot;focus&quot; : &quot;&quot;}\n&gt;\n{label}\n&lt;/button&gt;\n))}\n&lt;/div&gt;\n&lt;div className=&quot;tab-view&quot;&gt;\n{items.map(({ props }) =&gt; (\n&lt;div\n{...props}\nclassName={`tab-content ${ bindIndex === props.index ? &quot;selected&quot; : &quot;&quot; }`}\nkey={`tab-content-${props.index}`}\n/&gt;\n))}\n&lt;/div&gt;\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Tabs defaultIndex=&quot;1&quot; onTabClick={console.log}&gt;\n    &lt;TabItem label=&quot;A&quot; index=&quot;1&quot;&gt;\n      Lorem ipsum\n    &lt;/TabItem&gt;\n    &lt;TabItem label=&quot;B&quot; index=&quot;2&quot;&gt;\n      Dolor sit amet\n    &lt;/TabItem&gt;\n  &lt;/Tabs&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":1908,"column":1,"offset":85557},"end":{"line":1962,"column":4,"offset":86935}}}],"position":{"start":{"line":1908,"column":1,"offset":85557},"end":{"line":1962,"column":4,"offset":86935}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a tag input field.</p>\n<ul>\n<li>Define a <code>TagInput</code> component and use the <code>useState()</code> hook to initialize an array from <code>tags</code>.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the list of tags.</li>\n<li>Define the <code>addTagData</code> method, which will be executed when pressing the <code>Enter</code> key.</li>\n<li>The <code>addTagData</code> method calls <code>setTagData</code> to add the new tag using the spread (<code>...</code>) operator to prepend the existing tags and add the new tag at the end of the <code>tagData</code> array.</li>\n<li>Define the <code>removeTagData</code> method, which will be executed on clicking the delete icon in the tag.</li>\n<li>Use <code>Array.prototype.filter()</code> in the <code>removeTagData</code> method to remove the tag using its <code>index</code> to filter it out from the <code>tagData</code> array.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb59\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb59-1\" title=\"1\"><span class=\"fu\">.tag-input</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-2\" title=\"2\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-3\" title=\"3\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-4\" title=\"4\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-6\" title=\"6\">  <span class=\"kw\">border</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d6d8da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb59-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb59-10\" title=\"10\"><span class=\"fu\">.tag-input</span> input {</a>\n<a class=\"sourceLine\" id=\"cb59-11\" title=\"11\">  <span class=\"kw\">flex</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-12\" title=\"12\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-13\" title=\"13\">  <span class=\"kw\">height</span>: <span class=\"dv\">46</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-14\" title=\"14\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-15\" title=\"15\">  <span class=\"kw\">padding</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-16\" title=\"16\">}</a>\n<a class=\"sourceLine\" id=\"cb59-17\" title=\"17\"></a>\n<a class=\"sourceLine\" id=\"cb59-18\" title=\"18\"><span class=\"fu\">.tag-input</span> input<span class=\"in\">:focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-19\" title=\"19\">  <span class=\"kw\">outline</span>: <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-20\" title=\"20\">}</a>\n<a class=\"sourceLine\" id=\"cb59-21\" title=\"21\"></a>\n<a class=\"sourceLine\" id=\"cb59-22\" title=\"22\"><span class=\"fu\">.tags</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-23\" title=\"23\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-24\" title=\"24\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-25\" title=\"25\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-26\" title=\"26\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-27\" title=\"27\">}</a>\n<a class=\"sourceLine\" id=\"cb59-28\" title=\"28\"></a>\n<a class=\"sourceLine\" id=\"cb59-29\" title=\"29\"><span class=\"fu\">.tag</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-30\" title=\"30\">  <span class=\"kw\">width</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-31\" title=\"31\">  <span class=\"kw\">height</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-32\" title=\"32\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-33\" title=\"33\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-34\" title=\"34\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-35\" title=\"35\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-36\" title=\"36\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-37\" title=\"37\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-38\" title=\"38\">  <span class=\"kw\">list-style</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-39\" title=\"39\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-40\" title=\"40\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-41\" title=\"41\">  <span class=\"kw\">background</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-42\" title=\"42\">}</a>\n<a class=\"sourceLine\" id=\"cb59-43\" title=\"43\"></a>\n<a class=\"sourceLine\" id=\"cb59-44\" title=\"44\"><span class=\"fu\">.tag-title</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-45\" title=\"45\">  <span class=\"kw\">margin-top</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-46\" title=\"46\">}</a>\n<a class=\"sourceLine\" id=\"cb59-47\" title=\"47\"></a>\n<a class=\"sourceLine\" id=\"cb59-48\" title=\"48\"><span class=\"fu\">.tag-close-icon</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-49\" title=\"49\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-50\" title=\"50\">  <span class=\"kw\">width</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-51\" title=\"51\">  <span class=\"kw\">height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-52\" title=\"52\">  <span class=\"kw\">line-height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-53\" title=\"53\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-54\" title=\"54\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-55\" title=\"55\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-56\" title=\"56\">  <span class=\"kw\">color</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-57\" title=\"57\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-58\" title=\"58\">  <span class=\"kw\">background</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-59\" title=\"59\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-60\" title=\"60\">}</a>","position":{"start":{"line":1964,"column":1,"offset":86937},"end":{"line":2033,"column":52,"offset":95569}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":2035,"column":1,"offset":95571},"end":{"line":2035,"column":7,"offset":95577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const TagInput = ({ tags }) =&gt; {\n  const [tagData, setTagData] = React.useState(tags);\n  const removeTagData = (indexToRemove) =&gt; {\n    setTagData([...tagData.filter((_, index) =&gt; index !== indexToRemove)]);\n  };\n  const addTagData = (event) =&gt; {\n    if (event.target.value !== &quot;&quot;) {\n      setTagData([...tagData, event.target.value]);\n      event.target.value = &quot;&quot;;\n    }\n  };\n  return (\n    &lt;div className=&quot;tag-input&quot;&gt;\n      &lt;ul className=&quot;tags&quot;&gt;\n        {tagData.map((tag, index) =&gt; (\n          &lt;li key={index} className=&quot;tag&quot;&gt;\n            &lt;span className=&quot;tag-title&quot;&gt;{tag}&lt;/span&gt;\n            &lt;span\n              className=&quot;tag-close-icon&quot;\n              onClick={() =&gt; removeTagData(index)}\n            &gt;\n              x\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n      &lt;input\n        type=&quot;text&quot;\n        onKeyUp={(event) =&gt; (event.key === &quot;Enter&quot; ? addTagData(event) : null)}\n        placeholder=&quot;Press enter to add a tag&quot;\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;TagInput tags={[&quot;Nodejs&quot;, &quot;MongoDB&quot;]} /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2037,"column":1,"offset":95579},"end":{"line":2083,"column":4,"offset":96900}}}],"position":{"start":{"line":2037,"column":1,"offset":95579},"end":{"line":2083,"column":4,"offset":96900}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders an uncontrolled <code>&lt;textarea&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>","position":{"start":{"line":2085,"column":1,"offset":96902},"end":{"line":2090,"column":6,"offset":97312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const TextArea = ({\n  cols = 20,\n  rows = 2,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&gt; {\n  return (\n    &lt;textarea\n      cols={cols}\n      rows={rows}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&gt; onValueChange(value)}\n      {...rest}\n    /&gt;\n  );\n};\n"}],"position":{"start":{"line":2092,"column":1,"offset":97314},"end":{"line":2112,"column":4,"offset":97624}}}],"position":{"start":{"line":2092,"column":1,"offset":97314},"end":{"line":2112,"column":4,"offset":97624}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2114,"column":1,"offset":97626},"end":{"line":2114,"column":7,"offset":97632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;TextArea\n    placeholder=&quot;Insert some text here...&quot;\n    onValueChange={(val) =&gt; console.log(val)}\n  /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2116,"column":1,"offset":97634},"end":{"line":2126,"column":4,"offset":97835}}}],"position":{"start":{"line":2116,"column":1,"offset":97634},"end":{"line":2126,"column":4,"offset":97835}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a toggle component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>isToggleOn</code> state variable to <code>defaultToggled</code>.</li>\n<li>Render an <code>&lt;input&gt;</code> and bind its <code>onClick</code> event to update the <code>isToggledOn</code> state variable, applying the appropriate <code>className</code> to the wrapping <code>&lt;label&gt;</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb64-1\" title=\"1\"><span class=\"fu\">.toggle</span> input<span class=\"ex\">[type</span><span class=\"op\">=</span><span class=\"st\">&quot;checkbox&quot;</span><span class=\"ex\">]</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb64-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb64-5\" title=\"5\"><span class=\"fu\">.toggle.on</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-6\" title=\"6\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">green</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb64-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb64-9\" title=\"9\"><span class=\"fu\">.toggle.off</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-10\" title=\"10\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">red</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-11\" title=\"11\">}</a>","position":{"start":{"line":2128,"column":1,"offset":97837},"end":{"line":2144,"column":52,"offset":99411}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":2146,"column":1,"offset":99413},"end":{"line":2146,"column":7,"offset":99419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Toggle = ({ defaultToggled = false }) =&gt; {\n  const [isToggleOn, setIsToggleOn] = React.useState(defaultToggled);\n\nreturn (\n&lt;label className={isToggleOn ? &quot;toggle on&quot; : &quot;toggle off&quot;}&gt;\n&lt;input\ntype=&quot;checkbox&quot;\nchecked={isToggleOn}\nonChange={() =&gt; setIsToggleOn(!isToggleOn)}\n/&gt;\n{isToggleOn ? &quot;ON&quot; : &quot;OFF&quot;}\n&lt;/label&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(&lt;Toggle /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2148,"column":1,"offset":99421},"end":{"line":2171,"column":4,"offset":99923}}}],"position":{"start":{"line":2148,"column":1,"offset":99421},"end":{"line":2171,"column":4,"offset":99923}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a tooltip component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>show</code> variable and initialize it to <code>false</code>.</li>\n<li>Render a container element that contains the tooltip element and the <code>children</code> passed to the component.</li>\n<li>Handle the <code>onMouseEnter</code> and <code>onMouseLeave</code> methods, by altering the value of the <code>show</code> variable, toggling the <code>className</code> of the tooltip.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb67\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb67-1\" title=\"1\"><span class=\"fu\">.tooltip-container</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb67-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb67-5\" title=\"5\"><span class=\"fu\">.tooltip-box</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-7\" title=\"7\">  <span class=\"kw\">background</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-8\" title=\"8\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-9\" title=\"9\">  <span class=\"kw\">padding</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-10\" title=\"10\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-11\" title=\"11\">  <span class=\"kw\">top</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">+</span> <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-12\" title=\"12\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb67-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb67-15\" title=\"15\"><span class=\"fu\">.tooltip-box.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-16\" title=\"16\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb67-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb67-19\" title=\"19\"><span class=\"fu\">.tooltip-arrow</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-20\" title=\"20\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-21\" title=\"21\">  <span class=\"kw\">top</span>: <span class=\"dv\">-10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-22\" title=\"22\">  <span class=\"kw\">left</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-23\" title=\"23\">  <span class=\"kw\">border-width</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-24\" title=\"24\">  <span class=\"kw\">border-style</span>: <span class=\"dv\">solid</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-25\" title=\"25\">  <span class=\"kw\">border-color</span>: <span class=\"dv\">transparent</span> <span class=\"dv\">transparent</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-26\" title=\"26\">}</a>","position":{"start":{"line":2173,"column":1,"offset":99925},"end":{"line":2205,"column":52,"offset":104137}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":2207,"column":1,"offset":104139},"end":{"line":2207,"column":7,"offset":104145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Tooltip = ({ children, text, ...rest }) =&gt; {\n  const [show, setShow] = React.useState(false);\n\nreturn (\n&lt;div className=&quot;tooltip-container&quot;&gt;\n&lt;div className={show ? &quot;tooltip-box visible&quot; : &quot;tooltip-box&quot;}&gt;\n{text}\n&lt;span className=&quot;tooltip-arrow&quot; /&gt;\n&lt;/div&gt;\n&lt;div\nonMouseEnter={() =&gt; setShow(true)}\nonMouseLeave={() =&gt; setShow(false)}\n{...rest}\n&gt;\n{children}\n&lt;/div&gt;\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nReactDOM.render(\n  &lt;Tooltip text=&quot;Simple tooltip&quot;&gt;\n    &lt;button&gt;Hover me!&lt;/button&gt;\n  &lt;/Tooltip&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2209,"column":1,"offset":104147},"end":{"line":2242,"column":4,"offset":104819}}}],"position":{"start":{"line":2209,"column":1,"offset":104147},"end":{"line":2242,"column":4,"offset":104819}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders a tree view of a JSON object or array with collapsible content.</p>\n<ul>\n<li>Use the value of the <code>toggled</code> prop to determine the initial state of the content (collapsed/expanded).</li>\n<li>Use the <code>useState()</code> hook to create the <code>isToggled</code> state variable and give it the value of the <code>toggled</code> prop initially.</li>\n<li>Render a <code>&lt;span&gt;</code> element and bind its <code>onClick</code> event to alter the component's <code>isToggled</code> state.</li>\n<li>Determine the appearance of the component, based on <code>isParentToggled</code>, <code>isToggled</code>, <code>name</code> and checking for <code>Array.isArray()</code> on <code>data</code>.</li>\n<li>For each child in <code>data</code>, determine if it is an object or array and recursively render a sub-tree or a text element with the appropriate style.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb70\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb70-1\" title=\"1\"><span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-2\" title=\"2\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-3\" title=\"3\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb70-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb70-6\" title=\"6\"><span class=\"fu\">.tree-element.is-child</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-7\" title=\"7\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb70-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb70-10\" title=\"10\">div<span class=\"fu\">.tree-element</span><span class=\"in\">:before</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-11\" title=\"11\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-12\" title=\"12\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-13\" title=\"13\">  <span class=\"kw\">top</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-14\" title=\"14\">  <span class=\"kw\">left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">-</span> <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-16\" title=\"16\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb70-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb70-19\" title=\"19\">p<span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-20\" title=\"20\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-21\" title=\"21\">}</a>\n<a class=\"sourceLine\" id=\"cb70-22\" title=\"22\"></a>\n<a class=\"sourceLine\" id=\"cb70-23\" title=\"23\"><span class=\"fu\">.toggler</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-24\" title=\"24\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-25\" title=\"25\">  <span class=\"kw\">top</span>: <span class=\"dv\">10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-26\" title=\"26\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-27\" title=\"27\">  <span class=\"kw\">width</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-28\" title=\"28\">  <span class=\"kw\">height</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-29\" title=\"29\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-30\" title=\"30\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-31\" title=\"31\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-32\" title=\"32\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb70-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb70-35\" title=\"35\"><span class=\"fu\">.toggler.closed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-36\" title=\"36\">  <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">90</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-37\" title=\"37\">}</a>\n<a class=\"sourceLine\" id=\"cb70-38\" title=\"38\"></a>\n<a class=\"sourceLine\" id=\"cb70-39\" title=\"39\"><span class=\"fu\">.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-40\" title=\"40\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-41\" title=\"41\">}</a>","position":{"start":{"line":2244,"column":1,"offset":104821},"end":{"line":2293,"column":52,"offset":110897}}},{"type":"text","value":"\n"},{"type":"raw","value":"</div>","position":{"start":{"line":2295,"column":1,"offset":110899},"end":{"line":2295,"column":7,"offset":110905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const TreeView = ({\n  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true,\n}) =&gt; {\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n\nreturn (\n&lt;div\nclassName={`tree-element ${isParentToggled &amp;&amp; &quot;collapsed&quot;} ${ isChildElement &amp;&amp; &quot;is-child&quot; }`}\n&gt;\n&lt;span\nclassName={isToggled ? &quot;toggler&quot; : &quot;toggler closed&quot;}\nonClick={() =&gt; setIsToggled(!isToggled)}\n/&gt;\n{name ? &lt;strong&gt;&amp;nbsp;&amp;nbsp;{name}: &lt;/strong&gt; : &lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;}\n{isDataArray ? &quot;[&quot; : &quot;{&quot;}\n{!isToggled &amp;&amp; &quot;...&quot;}\n{Object.keys(data).map((v, i, a) =&gt;\ntypeof data[v] === &quot;object&quot; ? (\n&lt;TreeView\nkey={`${name}-${v}-${i}`}\ndata={data[v]}\nisLast={i === a.length - 1}\nname={isDataArray ? null : v}\nisChildElement\nisParentToggled={isParentToggled &amp;&amp; isToggled}\n/&gt;\n) : (\n&lt;p\nkey={`${name}-${v}-${i}`}\nclassName={isToggled ? &quot;tree-element&quot; : &quot;tree-element collapsed&quot;}\n&gt;\n{isDataArray ? &quot;&quot; : &lt;strong&gt;{v}: &lt;/strong&gt;}\n{data[v]}\n{i === a.length - 1 ? &quot;&quot; : &quot;,&quot;}\n&lt;/p&gt;\n)\n)}\n{isDataArray ? &quot;]&quot; : &quot;}&quot;}\n{!isLast ? &quot;,&quot; : &quot;&quot;}\n&lt;/div&gt;\n);\n};\n\n<hr />\n\n```js\n\nconst data = {\n  lorem: {\n    ipsum: &quot;dolor sit&quot;,\n    amet: {\n      consectetur: &quot;adipiscing&quot;,\n      elit: [\n        &quot;duis&quot;,\n        &quot;vitae&quot;,\n        {\n          semper: &quot;orci&quot;,\n        },\n        {\n          est: &quot;sed ornare&quot;,\n        },\n        &quot;etiam&quot;,\n        [&quot;laoreet&quot;, &quot;tincidunt&quot;],\n        [&quot;vestibulum&quot;, &quot;ante&quot;],\n      ],\n    },\n    ipsum: &quot;primis&quot;,\n  },\n};\nReactDOM.render(\n  &lt;TreeView data={data} name=&quot;data&quot; /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2297,"column":1,"offset":110907},"end":{"line":2379,"column":4,"offset":112921}}}],"position":{"start":{"line":2297,"column":1,"offset":110907},"end":{"line":2379,"column":4,"offset":112921}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Renders an uncontrolled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>","position":{"start":{"line":2381,"column":1,"offset":112923},"end":{"line":2386,"column":6,"offset":113329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const UncontrolledInput = ({ defaultValue, onValueChange, ...rest }) =&gt; {\n  return (\n    &lt;input\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&gt; onValueChange(value)}\n      {...rest}\n    /&gt;\n  );\n};\n"}],"position":{"start":{"line":2388,"column":1,"offset":113331},"end":{"line":2400,"column":4,"offset":113580}}}],"position":{"start":{"line":2388,"column":1,"offset":113331},"end":{"line":2400,"column":4,"offset":113580}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2402,"column":1,"offset":113582},"end":{"line":2402,"column":7,"offset":113588}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"ReactDOM.render(\n  &lt;UncontrolledInput\n    type=&quot;text&quot;\n    placeholder=&quot;Insert some text here...&quot;\n    onValueChange={console.log}\n  /&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2404,"column":1,"offset":113590},"end":{"line":2415,"column":4,"offset":113809}}}],"position":{"start":{"line":2404,"column":1,"offset":113590},"end":{"line":2415,"column":4,"offset":113809}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Handles asynchronous calls.</p>\n<ul>\n<li>Create a custom hook that takes a handler function, <code>fn</code>.</li>\n<li>Define a reducer function and an initial state for the custom hook's state.</li>\n<li>Use the <code>useReducer()</code> hook to initialize the <code>state</code> variable and the <code>dispatch</code> function.</li>\n<li>Define an asynchronous <code>run</code> function that will run the provided callback, <code>fn</code>, while using <code>dispatch</code> to update <code>state</code> as necessary.</li>\n<li>Return an object containing the properties of <code>state</code> (<code>value</code>, <code>error</code> and <code>loading</code>) and the <code>run</code> function.</li>\n</ul>","position":{"start":{"line":2417,"column":1,"offset":113811},"end":{"line":2425,"column":6,"offset":114524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useAsync = (fn) =&gt; {\n  const initialState = { loading: false, error: null, value: null };\n  const stateReducer = (_, action) =&gt; {\n    switch (action.type) {\n      case &quot;start&quot;:\n        return { loading: true, error: null, value: null };\n      case &quot;finish&quot;:\n        return { loading: false, error: null, value: action.value };\n      case &quot;error&quot;:\n        return { loading: false, error: action.error, value: null };\n    }\n  };\n\nconst [state, dispatch] = React.useReducer(stateReducer, initialState);\n\nconst run = async (args = null) =&gt; {\ntry {\ndispatch({ type: &quot;start&quot; });\nconst value = await fn(args);\ndispatch({ type: &quot;finish&quot;, value });\n} catch (error) {\ndispatch({ type: &quot;error&quot;, error });\n}\n};\n\nreturn { ...state, run };\n};\n"}],"position":{"start":{"line":2427,"column":1,"offset":114526},"end":{"line":2457,"column":4,"offset":115341}}}],"position":{"start":{"line":2427,"column":1,"offset":114526},"end":{"line":2457,"column":4,"offset":115341}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2459,"column":1,"offset":115343},"end":{"line":2459,"column":7,"offset":115349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const RandomImage = (props) =&gt; {\n  const imgFetch = useAsync((url) =&gt;\n    fetch(url).then((response) =&gt; response.json())\n  );\n\nreturn (\n&lt;div&gt;\n&lt;button\nonClick={() =&gt; imgFetch.run(&quot;https://dog.ceo/api/breeds/image/random&quot;)}\ndisabled={imgFetch.isLoading}\n&gt;\nLoad image\n&lt;/button&gt;\n&lt;br /&gt;\n{imgFetch.loading &amp;&amp; &lt;div&gt;Loading...&lt;/div&gt;}\n{imgFetch.error &amp;&amp; &lt;div&gt;Error {imgFetch.error}&lt;/div&gt;}\n{imgFetch.value &amp;&amp; (\n&lt;img\nsrc={imgFetch.value.message}\nalt=&quot;avatar&quot;\nwidth={400}\nheight=&quot;auto&quot;\n/&gt;\n)}\n&lt;/div&gt;\n);\n};\n\nReactDOM.render(&lt;RandomImage /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2461,"column":1,"offset":115351},"end":{"line":2493,"column":4,"offset":116065}}}],"position":{"start":{"line":2461,"column":1,"offset":115351},"end":{"line":2493,"column":4,"offset":116065}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Handles the event of clicking inside the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>'click'</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickInside</code> hook.</li>\n</ul>","position":{"start":{"line":2495,"column":1,"offset":116067},"end":{"line":2501,"column":6,"offset":116532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useClickInside = (ref, callback) =&gt; {\n  const handleClick = (e) =&gt; {\n    if (ref.current &amp;&amp; ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&gt; {\n    document.addEventListener(&quot;click&quot;, handleClick);\n    return () =&gt; {\n      document.removeEventListener(&quot;click&quot;, handleClick);\n    };\n  });\n};\n"}],"position":{"start":{"line":2503,"column":1,"offset":116534},"end":{"line":2519,"column":4,"offset":116918}}}],"position":{"start":{"line":2503,"column":1,"offset":116534},"end":{"line":2519,"column":4,"offset":116918}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2521,"column":1,"offset":116920},"end":{"line":2521,"column":7,"offset":116926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const ClickBox = ({ onClickInside }) =&gt; {\n  const clickRef = React.useRef();\n  useClickInside(clickRef, onClickInside);\n  return (\n    &lt;div\n      className=&quot;click-box&quot;\n      ref={clickRef}\n      style={{\n        border: &quot;2px dashed orangered&quot;,\n        height: 200,\n        width: 400,\n        display: &quot;flex&quot;,\n        justifyContent: &quot;center&quot;,\n        alignItems: &quot;center&quot;,\n      }}\n    &gt;\n      &lt;p&gt;Click inside this element&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nReactDOM.render(\n&lt;ClickBox onClickInside={() =&gt; alert(&quot;click inside&quot;)} /&gt;,\ndocument.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2523,"column":1,"offset":116928},"end":{"line":2551,"column":4,"offset":117603}}}],"position":{"start":{"line":2523,"column":1,"offset":116928},"end":{"line":2551,"column":4,"offset":117603}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Handles the event of clicking outside of the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>click</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickOutside</code> hook.</li>\n</ul>","position":{"start":{"line":2553,"column":1,"offset":117605},"end":{"line":2559,"column":6,"offset":118073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useClickOutside = (ref, callback) =&gt; {\n  const handleClick = (e) =&gt; {\n    if (ref.current &amp;&amp; !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&gt; {\n    document.addEventListener(&quot;click&quot;, handleClick);\n    return () =&gt; {\n      document.removeEventListener(&quot;click&quot;, handleClick);\n    };\n  });\n};\n"}],"position":{"start":{"line":2561,"column":1,"offset":118075},"end":{"line":2577,"column":4,"offset":118461}}}],"position":{"start":{"line":2561,"column":1,"offset":118075},"end":{"line":2577,"column":4,"offset":118461}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2579,"column":1,"offset":118463},"end":{"line":2579,"column":7,"offset":118469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const ClickBox = ({ onClickOutside }) =&gt; {\n  const clickRef = React.useRef();\n  useClickOutside(clickRef, onClickOutside);\n  return (\n    &lt;div\n      className=&quot;click-box&quot;\n      ref={clickRef}\n      style={{\n        border: &quot;2px dashed orangered&quot;,\n        height: 200,\n        width: 400,\n        display: &quot;flex&quot;,\n        justifyContent: &quot;center&quot;,\n        alignItems: &quot;center&quot;,\n      }}\n    &gt;\n      &lt;p&gt;Click out of this element&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nReactDOM.render(\n&lt;ClickBox onClickOutside={() =&gt; alert(&quot;click outside&quot;)} /&gt;,\ndocument.getElementById(&quot;root&quot;)\n);\n"}],"position":{"start":{"line":2581,"column":1,"offset":118471},"end":{"line":2609,"column":4,"offset":119151}}}],"position":{"start":{"line":2581,"column":1,"offset":118471},"end":{"line":2609,"column":4,"offset":119151}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Executes a callback immediately after a component is mounted.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument to execute the provided callback only once when the component is mounted.</li>\n<li>Behaves like the <code>componentDidMount()</code> lifecycle method of class components.</li>\n</ul>","position":{"start":{"line":2611,"column":1,"offset":119153},"end":{"line":2616,"column":6,"offset":119491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useComponentDidMount = (onMountHandler) =&gt; {\n  React.useEffect(() =&gt; {\n    onMountHandler();\n  }, []);\n};\n"}],"position":{"start":{"line":2618,"column":1,"offset":119493},"end":{"line":2626,"column":4,"offset":119622}}}],"position":{"start":{"line":2618,"column":1,"offset":119493},"end":{"line":2626,"column":4,"offset":119622}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2628,"column":1,"offset":119624},"end":{"line":2628,"column":7,"offset":119630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Mounter = () =&gt; {\n  useComponentDidMount(() =&gt; console.log(&quot;Component did mount&quot;));\n\nreturn &lt;div&gt;Check the console!&lt;/div&gt;;\n};\n\nReactDOM.render(&lt;Mounter /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2630,"column":1,"offset":119632},"end":{"line":2640,"column":4,"offset":119883}}}],"position":{"start":{"line":2630,"column":1,"offset":119632},"end":{"line":2640,"column":4,"offset":119883}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Executes a callback immediately before a component is unmounted and destroyed.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument and return the provided callback to be executed only once before cleanup.</li>\n<li>Behaves like the <code>componentWillUnmount()</code> lifecycle method of class components.</li>\n</ul>","position":{"start":{"line":2642,"column":1,"offset":119885},"end":{"line":2647,"column":6,"offset":120243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useComponentWillUnmount = (onUnmountHandler) =&gt; {\n  React.useEffect(\n    () =&gt; () =&gt; {\n      onUnmountHandler();\n    },\n    []\n  );\n};\n"}],"position":{"start":{"line":2649,"column":1,"offset":120245},"end":{"line":2660,"column":4,"offset":120406}}}],"position":{"start":{"line":2649,"column":1,"offset":120245},"end":{"line":2660,"column":4,"offset":120406}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2662,"column":1,"offset":120408},"end":{"line":2662,"column":7,"offset":120414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Unmounter = () =&gt; {\n  useComponentWillUnmount(() =&gt; console.log(&quot;Component will unmount&quot;));\n\nreturn &lt;div&gt;Check the console!&lt;/div&gt;;\n};\n\nReactDOM.render(&lt;Unmounter /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2664,"column":1,"offset":120416},"end":{"line":2674,"column":4,"offset":120677}}}],"position":{"start":{"line":2664,"column":1,"offset":120416},"end":{"line":2674,"column":4,"offset":120677}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Copies the given text to the clipboard.</p>\n<ul>\n<li>Use the <a href=\"/js/s/copy-to-clipboard/\">copyToClipboard</a> snippet to copy the text to clipboard.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>copied</code> variable.</li>\n<li>Use the <code>useCallback()</code> hook to create a callback for the <code>copyToClipboard</code> method.</li>\n<li>Use the <code>useEffect()</code> hook to reset the <code>copied</code> state variable if the <code>text</code> changes.</li>\n<li>Return the <code>copied</code> state variable and the <code>copy</code> callback.</li>\n</ul>","position":{"start":{"line":2676,"column":1,"offset":120679},"end":{"line":2684,"column":6,"offset":121283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useCopyToClipboard = (text) =&gt; {\n  const copyToClipboard = (str) =&gt; {\n    const el = document.createElement(&quot;textarea&quot;);\n    el.value = str;\n    el.setAttribute(&quot;readonly&quot;, &quot;&quot;);\n    el.style.position = &quot;absolute&quot;;\n    el.style.left = &quot;-9999px&quot;;\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount &gt; 0\n        ? document.getSelection().getRangeAt(0)\n        : false;\n    el.select();\n    const success = document.execCommand(&quot;copy&quot;);\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    return success;\n  };\n\nconst [copied, setCopied] = React.useState(false);\n\nconst copy = React.useCallback(() =&gt; {\nif (!copied) setCopied(copyToClipboard(text));\n}, [text]);\nReact.useEffect(() =&gt; () =&gt; setCopied(false), [text]);\n\nreturn [copied, copy];\n};\n"}],"position":{"start":{"line":2686,"column":1,"offset":121285},"end":{"line":2720,"column":4,"offset":122276}}}],"position":{"start":{"line":2686,"column":1,"offset":121285},"end":{"line":2720,"column":4,"offset":122276}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2722,"column":1,"offset":122278},"end":{"line":2722,"column":7,"offset":122284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const TextCopy = (props) =&gt; {\n  const [copied, copy] = useCopyToClipboard(&quot;Lorem ipsum&quot;);\n  return (\n    &lt;div&gt;\n      &lt;button onClick={copy}&gt;Click to copy&lt;/button&gt;\n      &lt;span&gt;{copied &amp;&amp; &quot;Copied!&quot;}&lt;/span&gt;\n    &lt;/div&gt;\n  );\n};\n\nReactDOM.render(&lt;TextCopy /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2724,"column":1,"offset":122286},"end":{"line":2738,"column":4,"offset":122668}}}],"position":{"start":{"line":2724,"column":1,"offset":122286},"end":{"line":2738,"column":4,"offset":122668}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Debounces the given value.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code> and a <code>delay</code>.</li>\n<li>Use the <code>useState()</code> hook to store the debounced value.</li>\n<li>Use the <code>useEffect()</code> hook to update the debounced value every time <code>value</code> is updated.</li>\n<li>Use <code>setTimeout()</code> to create a timeout that delays invoking the setter of the previous state variable by <code>delay</code> ms.</li>\n<li>Use <code>clearTimeout()</code> to clean up when dismounting the component.</li>\n<li>This is particularly useful when dealing with user input.</li>\n</ul>","position":{"start":{"line":2740,"column":1,"offset":122670},"end":{"line":2749,"column":6,"offset":123304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useDebounce = (value, delay) =&gt; {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\nReact.useEffect(() =&gt; {\nconst handler = setTimeout(() =&gt; {\nsetDebouncedValue(value);\n}, delay);\n\n    return () =&gt; {\n      clearTimeout(handler);\n    };\n\n}, [value]);\n\nreturn debouncedValue;\n};\n"}],"position":{"start":{"line":2751,"column":1,"offset":123306},"end":{"line":2770,"column":4,"offset":123632}}}],"position":{"start":{"line":2751,"column":1,"offset":123306},"end":{"line":2770,"column":4,"offset":123632}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2772,"column":1,"offset":123634},"end":{"line":2772,"column":7,"offset":123640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Counter = () =&gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = useDebounce(value, 500);\n\nreturn (\n&lt;div&gt;\n&lt;p&gt;\nCurrent: {value} - Debounced: {lastValue}\n&lt;/p&gt;\n&lt;button onClick={() =&gt; setValue(value + 1)}&gt;Increment&lt;/button&gt;\n&lt;/div&gt;\n);\n};\n\nReactDOM.render(&lt;Counter /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2774,"column":1,"offset":123642},"end":{"line":2792,"column":4,"offset":124034}}}],"position":{"start":{"line":2774,"column":1,"offset":123642},"end":{"line":2792,"column":4,"offset":124034}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Implements <code>fetch</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>url</code> and <code>options</code>.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>response</code> and <code>error</code> state variables.</li>\n<li>Use the <code>useEffect()</code> hook to asynchronously call <code>fetch()</code> and update the state variables accordingly.</li>\n<li>Return an object containing the <code>response</code> and <code>error</code> state variables.</li>\n</ul>","position":{"start":{"line":2794,"column":1,"offset":124036},"end":{"line":2801,"column":6,"offset":124565}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useFetch = (url, options) =&gt; {\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n\nReact.useEffect(() =&gt; {\nconst fetchData = async () =&gt; {\ntry {\nconst res = await fetch(url, options);\nconst json = await res.json();\nsetResponse(json);\n} catch (error) {\nsetError(error);\n}\n};\nfetchData();\n}, []);\n\nreturn { response, error };\n};\n"}],"position":{"start":{"line":2803,"column":1,"offset":124567},"end":{"line":2825,"column":4,"offset":124975}}}],"position":{"start":{"line":2803,"column":1,"offset":124567},"end":{"line":2825,"column":4,"offset":124975}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2827,"column":1,"offset":124977},"end":{"line":2827,"column":7,"offset":124983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const ImageFetch = (props) =&gt; {\n  const res = useFetch(&quot;https://dog.ceo/api/breeds/image/random&quot;, {});\n  if (!res.response) {\n    return &lt;div&gt;Loading...&lt;/div&gt;;\n  }\n  const imageUrl = res.response.message;\n  return (\n    &lt;div&gt;\n      &lt;img src={imageUrl} alt=&quot;avatar&quot; width={400} height=&quot;auto&quot; /&gt;\n    &lt;/div&gt;\n  );\n};\n\nReactDOM.render(&lt;ImageFetch /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2829,"column":1,"offset":124985},"end":{"line":2846,"column":4,"offset":125455}}}],"position":{"start":{"line":2829,"column":1,"offset":124985},"end":{"line":2846,"column":4,"offset":125455}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Implements <code>setInterval</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use a <code>useEffect()</code> hook to remember the latest <code>callback</code> whenever it changes.</li>\n<li>Use a <code>useEffect()</code> hook dependent on <code>delay</code> to set up the interval and clean up.</li>\n</ul>","position":{"start":{"line":2848,"column":1,"offset":125457},"end":{"line":2855,"column":6,"offset":125958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useInterval = (callback, delay) =&gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setInterval(tick, delay);\nreturn () =&gt; clearInterval(id);\n}\n}, [delay]);\n};\n"}],"position":{"start":{"line":2857,"column":1,"offset":125960},"end":{"line":2877,"column":4,"offset":126318}}}],"position":{"start":{"line":2857,"column":1,"offset":125960},"end":{"line":2877,"column":4,"offset":126318}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2879,"column":1,"offset":126320},"end":{"line":2879,"column":7,"offset":126326}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Timer = (props) =&gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useInterval(() =&gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &lt;p&gt;{seconds}&lt;/p&gt;;\n};\n\nReactDOM.render(&lt;Timer /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2881,"column":1,"offset":126328},"end":{"line":2894,"column":4,"offset":126605}}}],"position":{"start":{"line":2881,"column":1,"offset":126328},"end":{"line":2894,"column":4,"offset":126605}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Checks if the current environment matches a given media query and returns the appropriate value.</p>\n<ul>\n<li>Check if <code>window</code> and <code>window.matchMedia</code> exist, return <code>whenFalse</code> if not (e.g. SSR environment or unsupported browser).</li>\n<li>Use <code>window.matchMedia()</code> to match the given <code>query</code>, cast its <code>matches</code> property to a boolean and store in a state variable, <code>match</code>, using the <code>useState()</code> hook.</li>\n<li>Use the <code>useEffect()</code> hook to add a listener for changes and to clean up the listeners after the hook is destroyed.</li>\n<li>Return either <code>whenTrue</code> or <code>whenFalse</code> based on the value of <code>match</code>.</li>\n</ul>","position":{"start":{"line":2896,"column":1,"offset":126607},"end":{"line":2903,"column":6,"offset":127369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useMediaQuery = (query, whenTrue, whenFalse) =&gt; {\n  if (typeof window === &quot;undefined&quot; || typeof window.matchMedia === &quot;undefined&quot;)\n    return whenFalse;\n\nconst mediaQuery = window.matchMedia(query);\nconst [match, setMatch] = React.useState(!!mediaQuery.matches);\n\nReact.useEffect(() =&gt; {\nconst handler = () =&gt; setMatch(!!mediaQuery.matches);\nmediaQuery.addListener(handler);\nreturn () =&gt; mediaQuery.removeListener(handler);\n}, []);\n\nreturn match ? whenTrue : whenFalse;\n};\n"}],"position":{"start":{"line":2905,"column":1,"offset":127371},"end":{"line":2923,"column":4,"offset":127893}}}],"position":{"start":{"line":2905,"column":1,"offset":127371},"end":{"line":2923,"column":4,"offset":127893}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2925,"column":1,"offset":127895},"end":{"line":2925,"column":7,"offset":127901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const ResponsiveText = () =&gt; {\n  const text = useMediaQuery(\n    &quot;(max-width: 400px)&quot;,\n    &quot;Less than 400px wide&quot;,\n    &quot;More than 400px wide&quot;\n  );\n\nreturn &lt;span&gt;{text}&lt;/span&gt;;\n};\n\nReactDOM.render(&lt;ResponsiveText /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2927,"column":1,"offset":127903},"end":{"line":2941,"column":4,"offset":128225}}}],"position":{"start":{"line":2927,"column":1,"offset":127903},"end":{"line":2941,"column":4,"offset":128225}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Checks if the client is online or offline.</p>\n<ul>\n<li>Create a function, <code>getOnLineStatus</code>, that uses the <code>NavigatorOnLine</code> web API to get the online status of the client.</li>\n<li>Use the <code>useState()</code> hook to create an appropriate state variable, <code>status</code>, and setter.</li>\n<li>Use the <code>useEffect()</code> hook to add listeners for appropriate events, updating state, and cleanup those listeners when unmounting.</li>\n<li>Finally return the <code>status</code> state variable.</li>\n</ul>","position":{"start":{"line":2943,"column":1,"offset":128227},"end":{"line":2950,"column":6,"offset":128776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const getOnLineStatus = () =&gt;\n  typeof navigator !== &quot;undefined&quot; &amp;&amp; typeof navigator.onLine === &quot;boolean&quot;\n    ? navigator.onLine\n    : true;\n\nconst useNavigatorOnLine = () =&gt; {\nconst [status, setStatus] = React.useState(getOnLineStatus());\n\nconst setOnline = () =&gt; setStatus(true);\nconst setOffline = () =&gt; setStatus(false);\n\nReact.useEffect(() =&gt; {\nwindow.addEventListener(&quot;online&quot;, setOnline);\nwindow.addEventListener(&quot;offline&quot;, setOffline);\n\n    return () =&gt; {\n      window.removeEventListener(&quot;online&quot;, setOnline);\n      window.removeEventListener(&quot;offline&quot;, setOffline);\n    };\n\n}, []);\n\nreturn status;\n};\n"}],"position":{"start":{"line":2952,"column":1,"offset":128778},"end":{"line":2979,"column":4,"offset":129486}}}],"position":{"start":{"line":2952,"column":1,"offset":128778},"end":{"line":2979,"column":4,"offset":129486}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":2981,"column":1,"offset":129488},"end":{"line":2981,"column":7,"offset":129494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const StatusIndicator = () =&gt; {\n  const isOnline = useNavigatorOnLine();\n\nreturn &lt;span&gt;You are {isOnline ? &quot;online&quot; : &quot;offline&quot;}.&lt;/span&gt;;\n};\n\nReactDOM.render(&lt;StatusIndicator /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":2983,"column":1,"offset":129496},"end":{"line":2993,"column":4,"offset":129771}}}],"position":{"start":{"line":2983,"column":1,"offset":129496},"end":{"line":2993,"column":4,"offset":129771}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Returns a stateful value, persisted in <code>localStorage</code>, and a function to update it.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>value</code> to <code>defaultValue</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a ref that will hold the <code>name</code> of the value in <code>localStorage</code>.</li>\n<li>Use 3 instances of the <code>useEffect()</code> hook for initialization, <code>value</code> change and <code>name</code> change respectively.</li>\n<li>When the component is first mounted, use <code>Storage.getItem()</code> to update <code>value</code> if there's a stored value or <code>Storage.setItem()</code> to persist the current value.</li>\n<li>When <code>value</code> is updated, use <code>Storage.setItem()</code> to store the new value.</li>\n<li>When <code>name</code> is updated, use <code>Storage.setItem()</code> to create the new key, update the <code>nameRef</code> and use <code>Storage.removeItem()</code> to remove the previous key from <code>localStorage</code>.</li>\n<li><strong>NOTE:</strong> The hook is meant for use with primitive values (i.e. not objects) and doesn't account for changes to <code>localStorage</code> due to other code. Both of these issues can be easily handled (e.g. JSON serialization and handling the <code>'storage'</code> event).</li>\n</ul>","position":{"start":{"line":2995,"column":1,"offset":129773},"end":{"line":3005,"column":6,"offset":131130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const usePersistedState = (name, defaultValue) =&gt; {\n  const [value, setValue] = React.useState(defaultValue);\n  const nameRef = React.useRef(name);\n\nReact.useEffect(() =&gt; {\ntry {\nconst storedValue = localStorage.getItem(name);\nif (storedValue !== null) setValue(storedValue);\nelse localStorage.setItem(name, defaultValue);\n} catch {\nsetValue(defaultValue);\n}\n}, []);\n\nReact.useEffect(() =&gt; {\ntry {\nlocalStorage.setItem(nameRef.current, value);\n} catch {}\n}, [value]);\n\nReact.useEffect(() =&gt; {\nconst lastName = nameRef.current;\nif (name !== lastName) {\ntry {\nlocalStorage.setItem(name, value);\nnameRef.current = name;\nlocalStorage.removeItem(lastName);\n} catch {}\n}\n}, [name]);\n\nreturn [value, setValue];\n};\n"}],"position":{"start":{"line":3007,"column":1,"offset":131132},"end":{"line":3043,"column":4,"offset":131862}}}],"position":{"start":{"line":3007,"column":1,"offset":131132},"end":{"line":3043,"column":4,"offset":131862}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3045,"column":1,"offset":131864},"end":{"line":3045,"column":7,"offset":131870}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const MyComponent = ({ name }) =&gt; {\n  const [val, setVal] = usePersistedState(name, 10);\n  return (\n    &lt;input\n      value={val}\n      onChange={(e) =&gt; {\n        setVal(e.target.value);\n      }}\n    /&gt;\n  );\n};\n\nconst MyApp = () =&gt; {\nconst [name, setName] = React.useState(&quot;my-value&quot;);\nreturn (\n&lt;&gt;\n&lt;MyComponent name={name} /&gt;\n&lt;input\nvalue={name}\nonChange={(e) =&gt; {\nsetName(e.target.value);\n}}\n/&gt;\n&lt;/&gt;\n);\n};\n\nReactDOM.render(&lt;MyApp /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3047,"column":1,"offset":131872},"end":{"line":3078,"column":4,"offset":132418}}}],"position":{"start":{"line":3047,"column":1,"offset":131872},"end":{"line":3078,"column":4,"offset":132418}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Stores the previous state or props.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the <code>value</code>.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest <code>value</code>.</li>\n</ul>","position":{"start":{"line":3080,"column":1,"offset":132420},"end":{"line":3086,"column":6,"offset":132734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const usePrevious = (value) =&gt; {\n  const ref = React.useRef();\n  React.useEffect(() =&gt; {\n    ref.current = value;\n  });\n  return ref.current;\n};\n"}],"position":{"start":{"line":3088,"column":1,"offset":132736},"end":{"line":3098,"column":4,"offset":132898}}}],"position":{"start":{"line":3088,"column":1,"offset":132736},"end":{"line":3098,"column":4,"offset":132898}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3100,"column":1,"offset":132900},"end":{"line":3100,"column":7,"offset":132906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Counter = () =&gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = usePrevious(value);\n\nreturn (\n&lt;div&gt;\n&lt;p&gt;\nCurrent: {value} - Previous: {lastValue}\n&lt;/p&gt;\n&lt;button onClick={() =&gt; setValue(value + 1)}&gt;Increment&lt;/button&gt;\n&lt;/div&gt;\n);\n};\n\nReactDOM.render(&lt;Counter /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3102,"column":1,"offset":132908},"end":{"line":3120,"column":4,"offset":133294}}}],"position":{"start":{"line":3102,"column":1,"offset":132908},"end":{"line":3120,"column":4,"offset":133294}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Checks if the code is running on the browser or the server.</p>\n<ul>\n<li>Create a custom hook that returns an appropriate object.</li>\n<li>Use <code>typeof window</code>, <code>window.document</code> and <code>Document.createElement()</code> to check if the code is running on the browser.</li>\n<li>Use the <code>useState()</code> hook to define the <code>inBrowser</code> state variable.</li>\n<li>Use the <code>useEffect()</code> hook to update the <code>inBrowser</code> state variable and clean up at the end.</li>\n<li>Use the <code>useMemo()</code> hook to memoize the return values of the custom hook.</li>\n</ul>","position":{"start":{"line":3122,"column":1,"offset":133296},"end":{"line":3130,"column":6,"offset":133923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const isDOMavailable = !!(\n  typeof window !== &quot;undefined&quot; &amp;&amp;\n  window.document &amp;&amp;\n  window.document.createElement\n);\n\nconst useSSR = () =&gt; {\nconst [inBrowser, setInBrowser] = React.useState(isDOMavailable);\n\nReact.useEffect(() =&gt; {\nsetInBrowser(isDOMavailable);\nreturn () =&gt; {\nsetInBrowser(false);\n};\n}, []);\n\nconst useSSRObject = React.useMemo(\n() =&gt; ({\nisBrowser: inBrowser,\nisServer: !inBrowser,\ncanUseWorkers: typeof Worker !== &quot;undefined&quot;,\ncanUseEventListeners: inBrowser &amp;&amp; !!window.addEventListener,\ncanUseViewport: inBrowser &amp;&amp; !!window.screen,\n}),\n[inBrowser]\n);\n\nreturn React.useMemo(\n() =&gt; Object.assign(Object.values(useSSRObject), useSSRObject),\n[inBrowser]\n);\n};\n"}],"position":{"start":{"line":3132,"column":1,"offset":133925},"end":{"line":3167,"column":4,"offset":134681}}}],"position":{"start":{"line":3132,"column":1,"offset":133925},"end":{"line":3167,"column":4,"offset":134681}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3169,"column":1,"offset":134683},"end":{"line":3169,"column":7,"offset":134689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const SSRChecker = (props) =&gt; {\n  let { isBrowser, isServer } = useSSR();\n\nreturn &lt;p&gt;{isBrowser ? &quot;Running on browser&quot; : &quot;Running on server&quot;}&lt;/p&gt;;\n};\n\nReactDOM.render(&lt;SSRChecker /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3171,"column":1,"offset":134691},"end":{"line":3181,"column":4,"offset":134970}}}],"position":{"start":{"line":3171,"column":1,"offset":134691},"end":{"line":3181,"column":4,"offset":134970}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Implements <code>setTimeout</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest callback.</li>\n<li>Use the <code>useEffect()</code> hook to set up the timeout and clean up.</li>\n</ul>","position":{"start":{"line":3183,"column":1,"offset":134972},"end":{"line":3190,"column":6,"offset":135410}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useTimeout = (callback, delay) =&gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setTimeout(tick, delay);\nreturn () =&gt; clearTimeout(id);\n}\n}, [delay]);\n};\n"}],"position":{"start":{"line":3192,"column":1,"offset":135412},"end":{"line":3212,"column":4,"offset":135767}}}],"position":{"start":{"line":3192,"column":1,"offset":135412},"end":{"line":3212,"column":4,"offset":135767}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3214,"column":1,"offset":135769},"end":{"line":3214,"column":7,"offset":135775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const OneSecondTimer = (props) =&gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useTimeout(() =&gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &lt;p&gt;{seconds}&lt;/p&gt;;\n};\n\nReactDOM.render(&lt;OneSecondTimer /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3216,"column":1,"offset":135777},"end":{"line":3229,"column":4,"offset":136071}}}],"position":{"start":{"line":3216,"column":1,"offset":135777},"end":{"line":3229,"column":4,"offset":136071}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Provides a boolean state variable that can be toggled between its two states.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>value</code> state variable and its setter.</li>\n<li>Create a function that toggles the value of the <code>value</code> state variable and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Return the <code>value</code> state variable and the memoized toggler function.</li>\n</ul>","position":{"start":{"line":3231,"column":1,"offset":136073},"end":{"line":3237,"column":6,"offset":136524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useToggler = (initialState) =&gt; {\n  const [value, setValue] = React.useState(initialState);\n\nconst toggleValue = React.useCallback(() =&gt; setValue((prev) =&gt; !prev), []);\n\nreturn [value, toggleValue];\n};\n"}],"position":{"start":{"line":3239,"column":1,"offset":136526},"end":{"line":3249,"column":4,"offset":136753}}}],"position":{"start":{"line":3239,"column":1,"offset":136526},"end":{"line":3249,"column":4,"offset":136753}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3251,"column":1,"offset":136755},"end":{"line":3251,"column":7,"offset":136761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Switch = () =&gt; {\n  const [val, toggleVal] = useToggler(false);\n  return &lt;button onClick={toggleVal}&gt;{val ? &quot;ON&quot; : &quot;OFF&quot;}&lt;/button&gt;;\n};\nReactDOM.render(&lt;Switch /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3253,"column":1,"offset":136763},"end":{"line":3261,"column":4,"offset":137027}}}],"position":{"start":{"line":3253,"column":1,"offset":136763},"end":{"line":3261,"column":4,"offset":137027}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />\n<p>Handles the <code>beforeunload</code> window event.</p>\n<ul>\n<li>Use the <code>useRef()</code> hook to create a ref for the callback function, <code>fn</code>.</li>\n<li>Use the <code>useEffect()</code> hook and <code>EventTarget.addEventListener()</code> to handle the <code>'beforeunload'</code> (when the user is about to close the window).</li>\n<li>Use <code>EventTarget.removeEventListener()</code> to perform cleanup after the component is unmounted.</li>\n</ul>","position":{"start":{"line":3263,"column":1,"offset":137029},"end":{"line":3269,"column":6,"offset":137505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const useUnload = (fn) =&gt; {\n  const cb = React.useRef(fn);\n\nReact.useEffect(() =&gt; {\nconst onUnload = cb.current;\nwindow.addEventListener(&quot;beforeunload&quot;, onUnload);\nreturn () =&gt; {\nwindow.removeEventListener(&quot;beforeunload&quot;, onUnload);\n};\n}, [cb]);\n};\n"}],"position":{"start":{"line":3271,"column":1,"offset":137507},"end":{"line":3285,"column":4,"offset":137796}}}],"position":{"start":{"line":3271,"column":1,"offset":137507},"end":{"line":3285,"column":4,"offset":137796}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3287,"column":1,"offset":137798},"end":{"line":3287,"column":7,"offset":137804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const App = () =&gt; {\n  useUnload((e) =&gt; {\n    e.preventDefault();\n    const exit = confirm(&quot;Are you sure you want to leave?&quot;);\n    if (exit) window.close();\n  });\n  return &lt;div&gt;Try closing the window.&lt;/div&gt;;\n};\nReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n"}],"position":{"start":{"line":3289,"column":1,"offset":137806},"end":{"line":3301,"column":4,"offset":138130}}}],"position":{"start":{"line":3289,"column":1,"offset":137806},"end":{"line":3301,"column":4,"offset":138130}}},{"type":"text","value":"\n"},{"type":"raw","value":"<hr />","position":{"start":{"line":3303,"column":1,"offset":138132},"end":{"line":3303,"column":7,"offset":138138}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":3306,"column":1,"offset":138141},"end":{"line":3306,"column":11,"offset":138151}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3307,"column":1,"offset":138152}}}}