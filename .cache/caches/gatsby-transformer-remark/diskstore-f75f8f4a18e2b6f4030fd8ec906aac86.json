{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-5f1777b29664b32a0f1bd306e55cc379--","val":"<h2>Useful config <a href=\"https://w3c.github.io/git.html#config\">ðŸ”—</a>\n\n</h2>\n<ul>\n<li>branch.autosetuprebase=always (<a href=\"https://git-scm.com/docs/git-config#git-config-branchautoSetupRebase\">documentation</a>): I find it easier to work with Git this way</li>\n<li></li>\n<li>core.editor=emacs -nw (<a href=\"https://git-scm.com/docs/git-config#git-config-coreeditor\">documentation</a>): that's the editor that will be invoked every time Git needs to ask you about a commit message, when you're squashing commits, etc (and of course, you want emacs for that)</li>\n<li>commit.gpgsign=true (<a href=\"https://git-scm.com/docs/git-config#git-config-commitgpgSign\">documentation</a>) and gpg.program=gpg2 (<a href=\"https://git-scm.com/docs/git-config#git-config-gpgprogram\">documentation</a>): you will need to set up these variables (and possibly a couple other) if you want to <a href=\"https://help.github.com/articles/signing-commits-with-gpg/\">sign your commits to GitHub using GPG (recommended)</a></li>\n</ul>\n<h2>Safest way to \"update\" a local copy <a href=\"https://w3c.github.io/git.html#update\">ðŸ”—</a></h2>\n<p>I find this sequence of commands the \"safest\" way to quickly \"refresh\" a clone of some remote repo, and at the same time check its status (where \"safest\" means <em>\"reducing to the minimum the probability of messing up things with conflicts, outdated branches, uncommitted changes, etc\"</em>):</p>\n<ul>\n<li>$ git branch -a displays information about <em>all</em> branches, both local and <em>remote</em></li>\n<li></li>\n<li>$ git pull -r fetches changes from the <em>remote</em> and [\"rebases the current branch on top of the upstream branch after fetching\"](https:</li>\n<li></li>\n<li>$ git status shows you the status of your copy: whether there are new files, missing files, unstaged changes, or commits pending push</li>\n<li>$ git remote prune origin --dry tells you if any branch in the <em>remote</em> has been recently removed. (Submit the same command <em>without</em> the --dry part to actually remove those remotes from your local origin. That will still <em>not</em> remove local branches automatically, but you can do that yourself with git branch -d &#x3C;BRANCH> if you see some branch is no longer necessary.)</li>\n</ul>\n<p>You can have those four lines as an <em>alias</em>, or inside a <em>script</em> somewhere.</p>\n<p>Even better: if you set up <a href=\"https://w3c.github.io/git.html#aliases\">the aliases suggested above</a>, the whole thing becomes:</p>\n<p>You can then type it and run it just once, and, from that moment on, simply recover the line from your shell history.</p>\n<p>For example, if you're using Bash: press Ctrl+r, then start typing a distinctive chunk of the line (eg, r;, or st;gi); if you used it not too long ago for the last time, the entire line should appear, and you can simply press Enter.</p>\n<h2>An alias to view the history of the repo <a href=\"https://w3c.github.io/git.html#lg\">ðŸ”—</a></h2>\n<p>Then, simply type</p>\n<p>for a colourful graph of commits, tags and branches.</p>"}