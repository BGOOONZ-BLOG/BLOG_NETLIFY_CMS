{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-e445a1cfddcd3fc75811f4514b177744--","val":"<h1>for...of</h1>\n<p>The <code>for...of</code> creates a loop iterating over <a href=\"../iteration_protocols#the_iterable_protocol\">iterable objects</a>, including: built-in <a href=\"../global_objects/string\"><code>String</code></a>, <a href=\"../global_objects/array\"><code>Array</code></a>, array-like objects (e.g., <a href=\"../functions/arguments\"><code>arguments</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\"><code>NodeList</code></a>), <a href=\"../global_objects/typedarray\"><code>TypedArray</code></a>, <a href=\"../global_objects/map\"><code>Map</code></a>, <a href=\"../global_objects/set\"><code>Set</code></a>, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</p>\n<h2>Syntax</h2>\n<pre><code>for (variable of iterable) {\n  statement\n}\n</code></pre>\n<p><code>variable</code>\nOn each iteration a value of a different property is assigned to <code>variable</code>. <code>variable</code> may be declared with <code>const</code>, <code>let</code>, or <code>var</code>.</p>\n<p><code>iterable</code>\nObject whose iterable properties are iterated.</p>\n<h2>Examples</h2>\n<h3>Iterating over an <code>Array</code></h3>\n<pre><code>const iterable = [10, 20, 30];\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 10\n// 20\n// 30\n</code></pre>\n<p>You can use <a href=\"let\"><code>let</code></a> instead of <a href=\"const\"><code>const</code></a> too, if you reassign the variable inside the block.</p>\n<pre><code>const iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  value += 1;\n  console.log(value);\n}\n// 11\n// 21\n// 31\n</code></pre>\n<h3>Iterating over a <code>String</code></h3>\n<pre><code>const iterable = 'boo';\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n</code></pre>\n<h3>Iterating over a <code>TypedArray</code></h3>\n<pre><code>const iterable = new Uint8Array([0x00, 0xff]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 255\n</code></pre>\n<h3>Iterating over a <code>Map</code></h3>\n<pre><code>const iterable = new Map([['a', 1], ['b', 2], ['c', 3]]);\n\nfor (const entry of iterable) {\n  console.log(entry);\n}\n// ['a', 1]\n// ['b', 2]\n// ['c', 3]\n\nfor (const [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n</code></pre>\n<h3>Iterating over a <code>Set</code></h3>\n<pre><code>const iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n</code></pre>\n<h3>Iterating over the arguments object</h3>\n<p>You can iterate over the <a href=\"../functions/arguments\"><code>arguments</code></a> object to examine all of the parameters passed into a JavaScript function:</p>\n<pre><code>(function() {\n  for (const argument of arguments) {\n    console.log(argument);\n  }\n})(1, 2, 3);\n\n// 1\n// 2\n// 3\n</code></pre>\n<h3>Iterating over a DOM collection</h3>\n<p>Iterating over DOM collections like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\"><code>NodeList</code></a>: the following example adds a <code>read</code> class to paragraphs that are direct descendants of an article:</p>\n<pre><code>// Note: This will only work in platforms that have\n// implemented NodeList.prototype[Symbol.iterator]\nconst articleParagraphs = document.querySelectorAll('article > p');\n\nfor (const paragraph of articleParagraphs) {\n  paragraph.classList.add('read');\n}\n</code></pre>\n<h3>Closing iterators</h3>\n<p>In <code>for...of</code> loops, abrupt iteration termination can be caused by <code>break</code>, <code>throw</code> or <code>return</code>. In these cases, the iterator is closed.</p>\n<pre><code>function* foo(){\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\nfor (const o of foo()) {\n  console.log(o);\n  break; // closes iterator, execution continues outside of the loop\n}\nconsole.log('done');\n</code></pre>\n<h3>Iterating over generators</h3>\n<p>You can also iterate over <a href=\"function*\">generators</a>, i.e. functions generating an iterable object:</p>\n<pre><code>function* fibonacci() { // a generator function\n  let [prev, curr] = [0, 1];\n  while (true) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n\nfor (const n of fibonacci()) {\n  console.log(n);\n  // truncate the sequence at 1000\n  if (n >= 1000) {\n    break;\n  }\n}\n</code></pre>\n<h4>Do not reuse generators</h4>\n<p>Generators should not be re-used, even if the <code>for...of</code> loop is terminated early, for example via the <a href=\"break\"><code>break</code></a> keyword. Upon exiting a loop, the generator is closed and trying to iterate over it again does not yield any further results.</p>\n<pre><code>const gen = (function *(){\n  yield 1;\n  yield 2;\n  yield 3;\n})();\nfor (const o of gen) {\n  console.log(o);\n  break;  // Closes iterator\n}\n\n// The generator should not be re-used, the following does not make sense!\nfor (const o of gen) {\n  console.log(o); // Never called.\n}\n</code></pre>\n<h3>Iterating over other iterable objects</h3>\n<p>You can also iterate over an object that explicitly implements the <a href=\"../iteration_protocols#iterable\">iterable</a> protocol:</p>\n<pre><code>const iterable = {\n  [Symbol.iterator]() {\n    return {\n      i: 0,\n      next() {\n        if (this.i &#x3C; 3) {\n          return { value: this.i++, done: false };\n        }\n        return { value: undefined, done: true };\n      }\n    };\n  }\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 1\n// 2\n</code></pre>\n<h3>Difference between <code>for...of</code> and <code>for...in</code></h3>\n<p>Both <code>for...in</code> and <code>for...of</code> statements iterate over something. The main difference between them is in what they iterate over.</p>\n<p>The <a href=\"for...in\"><code>for...in</code></a> statement iterates over the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable properties</a> of an object, in an arbitrary order.</p>\n<p>The <code>for...of</code> statement iterates over values that the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#iterables\">iterable object</a> defines to be iterated over.</p>\n<p>The following example shows the difference between a <code>for...of</code> loop and a <code>for...in</code> loop when used with an <a href=\"../global_objects/array\"><code>Array</code></a>.</p>\n<pre><code>Object.prototype.objCustom = function() {};\nArray.prototype.arrCustom = function() {};\n\nconst iterable = [3, 5, 7];\niterable.foo = 'hello';\n\nfor (const i in iterable) {\n  console.log(i); // logs \"0\", \"1\", \"2\", \"foo\", \"arrCustom\", \"objCustom\"\n}\n\nfor (const i in iterable) {\n  if (iterable.hasOwnProperty(i)) {\n    console.log(i); // logs \"0\", \"1\", \"2\", \"foo\"\n  }\n}\n\nfor (const i of iterable) {\n  console.log(i); // logs 3, 5, 7\n}\n</code></pre>\n<p>Let us look into the above code step by step.</p>\n<pre><code>Object.prototype.objCustom = function() {};\nArray.prototype.arrCustom = function() {};\n\nconst iterable = [3, 5, 7];\niterable.foo = 'hello';\n</code></pre>\n<p>Every object will inherit the <code>objCustom</code> property and every object that is an <a href=\"../global_objects/array\"><code>Array</code></a> will inherit the <code>arrCustom</code> property since these properties have been added to <a href=\"../global_objects/object\"><code>Object.prototype</code></a> and <span class=\"page-not-created\"><code>Array.prototype</code></span>, respectively. The object <code>iterable</code> inherits the properties <code>objCustom</code> and <code>arrCustom</code> because of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">inheritance and the prototype chain</a>.</p>\n<pre><code>for (const i in iterable) {\n  console.log(i); // logs 0, 1, 2, \"foo\", \"arrCustom\", \"objCustom\"\n}\n</code></pre>\n<p>This loop logs only <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable properties</a> of the <code>iterable</code> object, in arbitrary order. It doesn't log array <strong>elements</strong> <code>3</code>, <code>5</code>, <code>7</code> or <code>hello</code> because those are <strong>not</strong> enumerable properties, in fact they are not properties at all, they are <strong>values</strong>. It logs array <strong>indexes</strong> as well as <code>arrCustom</code> and <code>objCustom</code>, which are. If you're not sure why these properties are iterated over, there's a more thorough explanation of how <a href=\"for...in#array_iteration_and_for...in\"><code>array iteration and for...in</code></a> work.</p>\n<pre><code>for (const i in iterable) {\n  if (iterable.hasOwnProperty(i)) {\n    console.log(i); // logs 0, 1, 2, \"foo\"\n  }\n}\n</code></pre>\n<p>This loop is similar to the first one, but it uses <a href=\"../global_objects/object/hasownproperty\"><code>hasOwnProperty()</code></a> to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties <code>0</code>, <code>1</code>, <code>2</code> and <code>foo</code> are logged because they are own properties (<strong>not inherited</strong>). Properties <code>arrCustom</code> and <code>objCustom</code> are not logged because they <strong>are inherited</strong>.</p>\n<pre><code>for (const i of iterable) {\n  console.log(i); // logs 3, 5, 7\n}\n</code></pre>\n<p>This loop iterates and logs <strong>values</strong> that <code>iterable</code>, as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#iterables\">iterable object</a>, defines to be iterated over. The object's <strong>elements</strong> <code>3</code>, <code>5</code>, <code>7</code> are shown, but none of the object's <strong>properties</strong>.</p>"}