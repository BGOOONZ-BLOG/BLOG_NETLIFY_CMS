{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-cfe9a36c3c6f0da47c406745871e1cea--","val":"<h1>Objects in JavaScript:</h1>\n<h2>Everything else besides primitive data type values is an <em>object</em>.</h2>\n<p>Objects are <em>key-value</em> stores, more specifically <em>stringkey-value</em> stores. The\n\"keys\" of an object are called <em>properties</em>.</p>\n<p>The syntax to create a plain object is <code>{key: value, ...}</code>, which is called an\nobject literal. For example:</p>\n<pre><code class=\"language-js\">var obj = {\n    foo: 'bar',\n    baz: 42\n};\n</code></pre>\n<p>Note that the above example doesn't use <em>quotation marks</em> around the property\nnames. In an object literal, quotation marks can be be omitted if the property\nname would also be a <em>valid variable name</em>. If not, they need to be quoted.\n<em>Number literals</em> are valid an object literal as well.</p>\n<p>Here are some more examples of valid and invalid property names in object\nliterals:</p>\n<pre><code class=\"language-js\">var obj = {\n  foo: 0,        // valid, could be variable name\n  'bar': 0,      // string literals are always valid\n  123: 0,        // number literals are always valid\n  1.5: 0,        // ^\n  foo-bar: 0,    // invalid, would not be a valid variable name\n  'foo-bar': 0,  // string literals are alwaus valid\n};\n</code></pre>\n<div class=\"callout warning\">\n<p><strong>Important:</strong> No matter which value or syntax you use for a property name, the\nvalue will always be converted to a <strong>string</strong>.</p>\n</div>\n<div class=\"callout secondary\">\n<p><i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i> <strong>ES2015</strong></p>\n<p>ES2015 adds two extensions to object values and object literals:</p>\n<ul>\n<li><em>Symbols</em> are can be used as property names. They are not converted to\nstrings.</li>\n<li>\n<p>Object literals can contain <em>[computed property names][computed properties]</em>:</p>\n<pre><code class=\"language-js\">var foo = 42;\nvar obj = {\n    [foo]: 0\n};\n// creates {42: 0}\n</code></pre>\n</li>\n</ul>\n</div>\n<h2>References</h2>\n<p>Just like in Java and other object-oriented programming languages, objects are\nrepresented as <em>references</em>. That means if a variable has an object as a value,\nit really has a reference to that object.</p>\n<pre><code class=\"language-js\">var user = {name: 'Tom'}:\n</code></pre>\n<p>:::ascii</p>\n<pre><code>                         ┌──────────────┐\n┌─────┬──────────┐       │  Object#123  │\n│user │ ref:123 ◆┼──────▶├──────┬───────┤\n└─────┴──────────┘       │ name │ \"Tom\" │\n                         └──────┴───────┘\n</code></pre>\n<p>:::</p>\n<p>Assigning the value to another variable makes both variables point to the same\nobject:</p>\n<pre><code class=\"language-js\">var owner = user;\n</code></pre>\n<p>:::ascii</p>\n<pre><code>┌─────┬──────────┐       ┌──────────────┐\n│user │ ref:123 ◆┼──┐    │  Object#123  │\n├─────┼──────────┤  ├───▶├──────┬───────┤\n│owner│ ref:123 ◆┼──┘    │ name │ \"Tom\" │\n└─────┴──────────┘       └──────┴───────┘\n</code></pre>\n<p>:::</p>\n<p>Assigning to <code>user.name</code> will therefore also \"change\" <code>owner.name</code>:</p>\n<pre><code class=\"language-js\">user.name = 'Joe';\nconsole.log(user.name, owner.name);\n// Joe, Joe\n</code></pre>\n<p>:::ascii</p>\n<pre><code>┌─────┬──────────┐       ┌──────────────┐\n│user │ ref:123 ◆┼──┐    │  Object#123  │\n├─────┼──────────┤  ├───▶├──────┬───────┤\n│owner│ ref:123 ◆┼──┘    │ name │ \"Joe\" │\n└─────┴──────────┘       └──────┴───────┘\n</code></pre>\n<p>:::</p>\n<p>But assigning a new value to either <code>user</code> or <code>owner</code> will result in only that\nvariable referring to the new value. The other variable will still refer to the\nsame value.</p>\n<pre><code class=\"language-js\">owner = { name: 'Kim' };\n</code></pre>\n<p>:::ascii</p>\n<pre><code>                         ┌──────────────┐\n                         │  Object#123  │\n                    ┌───▶├──────┬───────┤\n┌─────┬──────────┐  │    │ name │ \"Joe\" │\n│user │ ref:123 ◆┼──┘    └──────┴───────┘\n├─────┼──────────┤\n│owner│ ref:456 ◆┼──┐    ┌──────────────┐\n└─────┴──────────┘  │    │  Object#456  │\n                    └───▶├──────┬───────┤\n                         │ name │ \"Kim\" │\n                         └──────┴───────┘\n</code></pre>\n<p>:::</p>\n<hr>\n<p>The JavaScript standard defines a couple of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">built-in objects</a> with additional\nproperties and special internal behavior, must notably <em>arrays</em> and\n<em>functions</em>, which are explained in the next slides.</p>"}