{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-3e6b3aed622a21860f2afe148211b126--","val":"<h2><a href=\"https://leetcode.com/problems/string-to-integer-atoi/description/\">8. String to Integer (atoi)</a></h2>\n<h3>Problem:</h3>\n<p>Implement <code>atoi</code> which converts a string to an integer.</p>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned.</p>\n<p><strong>Note:</strong></p>\n<p>Only the space character <code>' '</code> is considered as whitespace character.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT<em>MAX (231 − 1) or INT</em>MIN (−231) is returned.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: \"42\"\nOutput: 42\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n             Then take as many numerical digits as possible, which gets 42.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.\n</code></pre>\n<p><strong>Example 4:</strong></p>\n<pre><code>Input: \"words and 987\"\nOutput: 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical\n             digit or a +/- sign. Therefore no valid conversion could be performed.\n</code></pre>\n<p><strong>Example 5:</strong></p>\n<pre><code>Input: \"-91283472332\"\nOutput: -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n             Thefore INT_MIN (−231) is returned.\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<pre><code class=\"language-js\">/**\n * @param {string} str\n * @return {number}\n */\nlet myAtoi = function (str) {\n    return Math.min(2147483647, Math.max(-2147483648, parseInt(str))) || 0;\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Looks like <code>Number()</code> is faster than <code>parseInt()</code>.</p>\n<pre><code class=\"language-js\">/**\n * @param {string} str\n * @return {number}\n */\nlet myAtoi = function (str) {\n    return Math.min(2147483647, Math.max(-2147483648, (/^ *[-+]?\\d+/.exec(str) || [0])[0]));\n};\n</code></pre>\n<h4>THREE</h4>\n<p>General solution.</p>\n<pre><code class=\"language-js\">/**\n * @param {string} str\n * @return {number}\n */\nlet myAtoi = function (str) {\n    let sign = 1;\n    let i = 0;\n\n    while (i &#x3C; str.length) {\n        const cc = str.charCodeAt(i++);\n        if (cc === 45) {\n            // -\n            sign = -1;\n            break;\n        } else if (cc === 43) {\n            // +\n            break;\n        } else if (cc >= 48 &#x26;&#x26; cc &#x3C;= 57) {\n            // 0-9\n            i--;\n            break;\n        } else if (cc !== 32) {\n            // space\n            return 0;\n        }\n    }\n\n    let result = 0;\n    while (i &#x3C; str.length) {\n        const digit = str.charCodeAt(i++) - 48;\n        if (digit &#x3C; 0 || digit > 9) {\n            break;\n        }\n        result = result * 10 + digit;\n    }\n\n    return Math.min(2147483647, Math.max(-2147483648, result * sign));\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}