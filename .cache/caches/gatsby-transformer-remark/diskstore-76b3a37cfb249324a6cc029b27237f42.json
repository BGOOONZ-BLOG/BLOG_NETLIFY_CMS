{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-0d7ba1b95584857c4b2b6c8871177dbb--","val":"<h2><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/\">26. Remove Duplicates from Sorted Array</a></h2>\n<h3>Problem:</h3>\n<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Given nums = [1,1,2],\n\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\n\nIt doesn't matter what you leave beyond the returned length.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Given nums = [0,0,1,1,1,2,2,3,3,4],\n\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\n\nIt doesn't matter what values are set beyond the returned length.\n</code></pre>\n<p><strong>Clarification:</strong></p>\n<p>Confused why the returned value is an integer but your answer is an array?</p>\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\n<p>Internally you can think of this:</p>\n<pre><code>// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i &#x3C; len; i++) {\n    print(nums[i]);\n}\n</code></pre>\n<h3>Solution:</h3>\n<p>The result array can only be shorter. That is why we can build the array in-place with the new length.</p>\n<pre><code class=\"language-js\">/**\n * @param {number[]} nums\n * @return {number}\n */\nlet removeDuplicates = function (nums) {\n    let len = 0;\n    for (let i = 0; i &#x3C; nums.length; i++) {\n        if (nums[i] !== nums[i - 1]) {\n            nums[len++] = nums[i];\n        }\n    }\n    return len;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}