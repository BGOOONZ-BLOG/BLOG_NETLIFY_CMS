{"expireTime":9007200904342770000,"key":"transformer-remark-markdown-html-ast-295acb8a5644d45edc109bc0bcf780d2--","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":22,"offset":22}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":22,"offset":22}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a HTML Element","position":{"start":{"line":4,"column":5,"offset":28},"end":{"line":4,"column":38,"offset":61}}}],"position":{"start":{"line":4,"column":1,"offset":24},"end":{"line":4,"column":38,"offset":61}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: you want to make a ","position":{"start":{"line":6,"column":1,"offset":63},"end":{"line":6,"column":29,"offset":91}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Button>"}],"position":{"start":{"line":6,"column":29,"offset":91},"end":{"line":6,"column":39,"offset":101}}},{"type":"text","value":" that takes all the normal props of ","position":{"start":{"line":6,"column":39,"offset":101},"end":{"line":6,"column":75,"offset":137}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<button>"}],"position":{"start":{"line":6,"column":75,"offset":137},"end":{"line":6,"column":85,"offset":147}}},{"type":"text","value":" and does extra stuff.","position":{"start":{"line":6,"column":85,"offset":147},"end":{"line":6,"column":107,"offset":169}}}],"position":{"start":{"line":6,"column":1,"offset":63},"end":{"line":6,"column":107,"offset":169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extend ","position":{"start":{"line":8,"column":1,"offset":171},"end":{"line":8,"column":18,"offset":188}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentPropsWithoutRef<'button'>"}],"position":{"start":{"line":8,"column":18,"offset":188},"end":{"line":8,"column":60,"offset":230}}}],"position":{"start":{"line":8,"column":1,"offset":171},"end":{"line":8,"column":60,"offset":230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// usage\nfunction App() {\n    // Type '\"foo\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.(2322)\n    // return <Button type=\"foo\"> sldkj </Button>\n\n    // no error\n    return <Button type=\"button\"> text </Button>;\n}\n\n// implementation\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n    specialProp?: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // do something with specialProp\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":232},"end":{"line":29,"column":4,"offset":772}}}],"position":{"start":{"line":10,"column":1,"offset":232},"end":{"line":29,"column":4,"offset":772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUI4wPQtwCuqyA5lowQ4A7fMAhC4AQTBgAFAEo4Ab0Zw4bOABUAnmCzkARAQgQDZOMHRCI8NKmA8hyAEYAbfTAhwYu-WQPOHDCeQgZwAD5wBqgcziDAMGGRBpSoWIkRnEIAJlgEwEJY2WQAdLIATADM5eXyqurslDAcUBIAPABCQSHevgC8RiYGAHxwqK7ZANYAVnBtLF3B4sP19RrWcFhQxFD1TS3tiz0+egOBS6GjMFgAHvDzR8uMAL7MDBqgYO4gWEIwyDAxEJGLdILALH8tgQ8PpHkIAArEMDoW7XHLobB4GAlADCJEghT+iIgyLaZHOITIoxUDDUqD0uGAyFcxLAAH4AFxjGBQAo8egMV4MUHQQjCUTiOBw2RgJGoLlw1moRQ0tS4cSoeBKMYMpkspEAGjgJRNqXgzzgfTgspJqAFag02S8qBI6QAFny4AB3BJunVYRnM1l7dIHOYUyVKE0lM0WljDAXPIA"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"See this in the TS Playground","position":{"start":{"line":31,"column":3,"offset":776},"end":{"line":31,"column":32,"offset":805}}}],"position":{"start":{"line":31,"column":2,"offset":775},"end":{"line":31,"column":33,"offset":806}}}],"position":{"start":{"line":31,"column":1,"offset":774},"end":{"line":31,"column":609,"offset":1382}}}],"position":{"start":{"line":31,"column":1,"offset":774},"end":{"line":31,"column":609,"offset":1382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Forwarding Refs","position":{"start":{"line":33,"column":3,"offset":1386},"end":{"line":33,"column":18,"offset":1401}}}],"position":{"start":{"line":33,"column":1,"offset":1384},"end":{"line":33,"column":20,"offset":1403}}},{"type":"text","value":": As ","position":{"start":{"line":33,"column":20,"offset":1403},"end":{"line":33,"column":25,"offset":1408}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/forwarding-refs.html"},"children":[{"type":"text","value":"the React docs themselves note","position":{"start":{"line":33,"column":26,"offset":1409},"end":{"line":33,"column":56,"offset":1439}}}],"position":{"start":{"line":33,"column":25,"offset":1408},"end":{"line":33,"column":104,"offset":1487}}},{"type":"text","value":", most usecases will not need to obtain a ref to the inner element. But for people making reusable component libraries, you will need to ","position":{"start":{"line":33,"column":104,"offset":1487},"end":{"line":33,"column":241,"offset":1624}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":33,"column":241,"offset":1624},"end":{"line":33,"column":253,"offset":1636}}},{"type":"text","value":" the underlying element, and then you can use ","position":{"start":{"line":33,"column":253,"offset":1636},"end":{"line":33,"column":299,"offset":1682}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":33,"column":299,"offset":1682},"end":{"line":33,"column":322,"offset":1705}}},{"type":"text","value":" to grab props for your wrapper component. Check ","position":{"start":{"line":33,"column":322,"offset":1705},"end":{"line":33,"column":371,"offset":1754}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"our docs on forwarding Refs","position":{"start":{"line":33,"column":372,"offset":1755},"end":{"line":33,"column":399,"offset":1782}}}],"position":{"start":{"line":33,"column":371,"offset":1754},"end":{"line":33,"column":500,"offset":1883}}},{"type":"text","value":" for more.","position":{"start":{"line":33,"column":500,"offset":1883},"end":{"line":33,"column":510,"offset":1893}}}],"position":{"start":{"line":33,"column":1,"offset":1384},"end":{"line":33,"column":510,"offset":1893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In future, the need to ","position":{"start":{"line":35,"column":1,"offset":1895},"end":{"line":35,"column":24,"offset":1918}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":35,"column":24,"offset":1918},"end":{"line":35,"column":36,"offset":1930}}},{"type":"text","value":" may go away in React 17+, but for now we still have to deal with this. ðŸ™ƒ","position":{"start":{"line":35,"column":36,"offset":1930},"end":{"line":35,"column":110,"offset":2004}}}],"position":{"start":{"line":35,"column":1,"offset":1895},"end":{"line":35,"column":110,"offset":2004}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>","position":{"start":{"line":37,"column":1,"offset":2006},"end":{"line":38,"column":10,"offset":2025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why not ","position":{"start":{"line":40,"column":1,"offset":2027},"end":{"line":40,"column":9,"offset":2035}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":40,"column":9,"offset":2035},"end":{"line":40,"column":25,"offset":2051}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":25,"offset":2051},"end":{"line":40,"column":29,"offset":2055}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"IntrinsicElements"}],"position":{"start":{"line":40,"column":29,"offset":2055},"end":{"line":40,"column":48,"offset":2074}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":48,"offset":2074},"end":{"line":40,"column":52,"offset":2078}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[Element]HTMLAttributes"}],"position":{"start":{"line":40,"column":52,"offset":2078},"end":{"line":40,"column":77,"offset":2103}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":77,"offset":2103},"end":{"line":40,"column":81,"offset":2107}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLProps"}],"position":{"start":{"line":40,"column":81,"offset":2107},"end":{"line":40,"column":92,"offset":2118}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":92,"offset":2118},"end":{"line":40,"column":96,"offset":2122}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":40,"column":96,"offset":2122},"end":{"line":40,"column":112,"offset":2138}}},{"type":"text","value":"?","position":{"start":{"line":40,"column":112,"offset":2138},"end":{"line":40,"column":113,"offset":2139}}}],"position":{"start":{"line":40,"column":1,"offset":2027},"end":{"line":40,"column":113,"offset":2139}}},{"type":"text","value":"\n"},{"type":"raw","value":"</summary>","position":{"start":{"line":42,"column":1,"offset":2141},"end":{"line":42,"column":11,"offset":2151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":44,"column":4,"offset":2156},"end":{"line":44,"column":20,"offset":2172}}}],"position":{"start":{"line":44,"column":1,"offset":2153},"end":{"line":44,"column":20,"offset":2172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You CAN use ","position":{"start":{"line":46,"column":1,"offset":2174},"end":{"line":46,"column":13,"offset":2186}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":46,"column":13,"offset":2186},"end":{"line":46,"column":29,"offset":2202}}},{"type":"text","value":" in place of ","position":{"start":{"line":46,"column":29,"offset":2202},"end":{"line":46,"column":42,"offset":2215}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":46,"column":42,"offset":2215},"end":{"line":46,"column":65,"offset":2238}}},{"type":"text","value":", but you may prefer to be explicit about whether or not the component's refs are forwarded, which is what we have chosen to demonstrate. The tradeoff is slightly more intimidating terminology.","position":{"start":{"line":46,"column":65,"offset":2238},"end":{"line":46,"column":258,"offset":2431}}}],"position":{"start":{"line":46,"column":1,"offset":2174},"end":{"line":46,"column":258,"offset":2431}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"More info: ","position":{"start":{"line":48,"column":1,"offset":2433},"end":{"line":48,"column":12,"offset":2444}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/","position":{"start":{"line":48,"column":12,"offset":2444},"end":{"line":48,"column":110,"offset":2542}}}],"position":{"start":{"line":48,"column":12,"offset":2444},"end":{"line":48,"column":110,"offset":2542}}}],"position":{"start":{"line":48,"column":1,"offset":2433},"end":{"line":48,"column":110,"offset":2542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Maybe ","position":{"start":{"line":50,"column":5,"offset":2548},"end":{"line":50,"column":11,"offset":2554}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":50,"column":11,"offset":2554},"end":{"line":50,"column":34,"offset":2577}}},{"type":"text","value":" or ","position":{"start":{"line":50,"column":34,"offset":2577},"end":{"line":50,"column":38,"offset":2581}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.[Element]HTMLAttributes"}],"position":{"start":{"line":50,"column":38,"offset":2581},"end":{"line":50,"column":69,"offset":2612}}}],"position":{"start":{"line":50,"column":1,"offset":2544},"end":{"line":50,"column":69,"offset":2612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are at least 2 other equivalent ways to do this, but they are more verbose:","position":{"start":{"line":52,"column":1,"offset":2614},"end":{"line":52,"column":82,"offset":2695}}}],"position":{"start":{"line":52,"column":1,"offset":2614},"end":{"line":52,"column":82,"offset":2695}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Method 1: JSX.IntrinsicElements\ntype btnType = JSX.IntrinsicElements[\"button\"]; // cannot inline or will error\nexport interface ButtonProps extends btnType {} // etc\n\n// Method 2: React.[Element]HTMLAttributes\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>\n"}],"position":{"start":{"line":54,"column":1,"offset":2697},"end":{"line":61,"column":4,"offset":3003}}}],"position":{"start":{"line":54,"column":1,"offset":2697},"end":{"line":61,"column":4,"offset":3003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Looking at ","position":{"start":{"line":63,"column":1,"offset":3005},"end":{"line":63,"column":12,"offset":3016}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f3134f4897c8473f590cbcdd5788da8d59796f45/types/react/index.d.ts#L821"},"children":[{"type":"text","value":"the source for ","position":{"start":{"line":63,"column":13,"offset":3017},"end":{"line":63,"column":28,"offset":3032}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":63,"column":28,"offset":3032},"end":{"line":63,"column":44,"offset":3048}}}],"position":{"start":{"line":63,"column":12,"offset":3016},"end":{"line":63,"column":171,"offset":3175}}},{"type":"text","value":" shows that this is a clever wrapper for ","position":{"start":{"line":63,"column":171,"offset":3175},"end":{"line":63,"column":212,"offset":3216}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":63,"column":212,"offset":3216},"end":{"line":63,"column":235,"offset":3239}}},{"type":"text","value":", whereas the second method relies on specialized interfaces with unfamiliar naming/capitalization.","position":{"start":{"line":63,"column":235,"offset":3239},"end":{"line":63,"column":334,"offset":3338}}}],"position":{"start":{"line":63,"column":1,"offset":3005},"end":{"line":63,"column":334,"offset":3338}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: There are over 50 of these specialized interfaces available - look for ","position":{"start":{"line":65,"column":3,"offset":3342},"end":{"line":65,"column":80,"offset":3419}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":65,"column":80,"offset":3419},"end":{"line":65,"column":96,"offset":3435}}},{"type":"text","value":" in our ","position":{"start":{"line":65,"column":96,"offset":3435},"end":{"line":65,"column":104,"offset":3443}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/advanced/types_react_api#typesreact"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@types/react"}],"position":{"start":{"line":65,"column":105,"offset":3444},"end":{"line":65,"column":119,"offset":3458}}},{"type":"text","value":" commentary","position":{"start":{"line":65,"column":119,"offset":3458},"end":{"line":65,"column":130,"offset":3469}}}],"position":{"start":{"line":65,"column":104,"offset":3443},"end":{"line":65,"column":221,"offset":3560}}},{"type":"text","value":".","position":{"start":{"line":65,"column":221,"offset":3560},"end":{"line":65,"column":222,"offset":3561}}}],"position":{"start":{"line":65,"column":3,"offset":3342},"end":{"line":65,"column":222,"offset":3561}}},{"type":"text","value":"\n"}],"position":{"start":{"line":65,"column":1,"offset":3340},"end":{"line":65,"column":222,"offset":3561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ultimately, ","position":{"start":{"line":67,"column":1,"offset":3563},"end":{"line":67,"column":13,"offset":3575}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/pull/276"},"children":[{"type":"text","value":"we picked the ","position":{"start":{"line":67,"column":14,"offset":3576},"end":{"line":67,"column":28,"offset":3590}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":67,"column":28,"offset":3590},"end":{"line":67,"column":44,"offset":3606}}},{"type":"text","value":" method","position":{"start":{"line":67,"column":44,"offset":3606},"end":{"line":67,"column":51,"offset":3613}}}],"position":{"start":{"line":67,"column":13,"offset":3575},"end":{"line":67,"column":110,"offset":3672}}},{"type":"text","value":" as it involves the least TS specific jargon and has the most ease of use. But you'll be fine with either of these methods if you prefer.","position":{"start":{"line":67,"column":110,"offset":3672},"end":{"line":67,"column":247,"offset":3809}}}],"position":{"start":{"line":67,"column":1,"offset":3563},"end":{"line":67,"column":247,"offset":3809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Definitely not ","position":{"start":{"line":69,"column":5,"offset":3815},"end":{"line":69,"column":20,"offset":3830}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":69,"column":20,"offset":3830},"end":{"line":69,"column":37,"offset":3847}}},{"type":"text","value":" or ","position":{"start":{"line":69,"column":37,"offset":3847},"end":{"line":69,"column":41,"offset":3851}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":69,"column":41,"offset":3851},"end":{"line":69,"column":63,"offset":3873}}}],"position":{"start":{"line":69,"column":1,"offset":3811},"end":{"line":69,"column":63,"offset":3873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":71,"column":1,"offset":3875},"end":{"line":71,"column":35,"offset":3909}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":71,"column":35,"offset":3909},"end":{"line":71,"column":52,"offset":3926}}},{"type":"text","value":":","position":{"start":{"line":71,"column":52,"offset":3926},"end":{"line":71,"column":53,"offset":3927}}}],"position":{"start":{"line":71,"column":1,"offset":3875},"end":{"line":71,"column":53,"offset":3927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLProps<HTMLButtonElement> {\n    specialProp: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // ERROR: Type 'string' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":73,"column":1,"offset":3929},"end":{"line":82,"column":4,"offset":4263}}}],"position":{"start":{"line":73,"column":1,"offset":3929},"end":{"line":82,"column":4,"offset":4263}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It infers a too-wide type of ","position":{"start":{"line":84,"column":1,"offset":4265},"end":{"line":84,"column":30,"offset":4294}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"string"}],"position":{"start":{"line":84,"column":30,"offset":4294},"end":{"line":84,"column":38,"offset":4302}}},{"type":"text","value":" for ","position":{"start":{"line":84,"column":38,"offset":4302},"end":{"line":84,"column":43,"offset":4307}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type"}],"position":{"start":{"line":84,"column":43,"offset":4307},"end":{"line":84,"column":49,"offset":4313}}},{"type":"text","value":", because it ","position":{"start":{"line":84,"column":49,"offset":4313},"end":{"line":84,"column":62,"offset":4326}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/128#issuecomment-508103558"},"children":[{"type":"text","value":"uses ","position":{"start":{"line":84,"column":63,"offset":4327},"end":{"line":84,"column":68,"offset":4332}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AllHTMLAttributes"}],"position":{"start":{"line":84,"column":68,"offset":4332},"end":{"line":84,"column":87,"offset":4351}}},{"type":"text","value":" under the hood","position":{"start":{"line":84,"column":87,"offset":4351},"end":{"line":84,"column":102,"offset":4366}}}],"position":{"start":{"line":84,"column":62,"offset":4326},"end":{"line":84,"column":186,"offset":4450}}},{"type":"text","value":".","position":{"start":{"line":84,"column":186,"offset":4450},"end":{"line":84,"column":187,"offset":4451}}}],"position":{"start":{"line":84,"column":1,"offset":4265},"end":{"line":84,"column":187,"offset":4451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":86,"column":1,"offset":4453},"end":{"line":86,"column":35,"offset":4487}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":86,"column":35,"offset":4487},"end":{"line":86,"column":57,"offset":4509}}},{"type":"text","value":":","position":{"start":{"line":86,"column":57,"offset":4509},"end":{"line":86,"column":58,"offset":4510}}}],"position":{"start":{"line":86,"column":1,"offset":4453},"end":{"line":86,"column":58,"offset":4510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n    /* etc */\n}\n// usage\nfunction App() {\n    // Property 'type' does not exist on type 'IntrinsicAttributes & ButtonProps'\n    return <Button type=\"submit\"> text </Button>;\n}\n"}],"position":{"start":{"line":88,"column":1,"offset":4512},"end":{"line":97,"column":4,"offset":4777}}}],"position":{"start":{"line":88,"column":1,"offset":4512},"end":{"line":97,"column":4,"offset":4777}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":99,"column":1,"offset":4779},"end":{"line":99,"column":11,"offset":4789}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a Component","position":{"start":{"line":101,"column":5,"offset":4795},"end":{"line":101,"column":35,"offset":4825}}}],"position":{"start":{"line":101,"column":1,"offset":4791},"end":{"line":101,"column":35,"offset":4825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TODO: this section needs work to make it simplified.","position":{"start":{"line":103,"column":3,"offset":4829},"end":{"line":103,"column":55,"offset":4881}}}],"position":{"start":{"line":103,"column":3,"offset":4829},"end":{"line":103,"column":55,"offset":4881}}},{"type":"text","value":"\n"}],"position":{"start":{"line":103,"column":1,"offset":4827},"end":{"line":103,"column":55,"offset":4881}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: same as above, but for a React Component you don't have access to the underlying props","position":{"start":{"line":105,"column":1,"offset":4883},"end":{"line":105,"column":96,"offset":4978}}}],"position":{"start":{"line":105,"column":1,"offset":4883},"end":{"line":105,"column":96,"offset":4978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const Box = (props: React.CSSProperties) => <div style={props} />;\n\nconst Card = (\n    { title, children, ...props }: { title: string } & $ElementProps<typeof Box> // new utility, see below\n) => (\n    <Box {...props}>\n        {title}: {children}\n    </Box>\n);\n"}],"position":{"start":{"line":107,"column":1,"offset":4980},"end":{"line":117,"column":4,"offset":5250}}}],"position":{"start":{"line":107,"column":1,"offset":4980},"end":{"line":117,"column":4,"offset":5250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extract a component's props by inferring them","position":{"start":{"line":119,"column":1,"offset":5252},"end":{"line":119,"column":56,"offset":5307}}}],"position":{"start":{"line":119,"column":1,"offset":5252},"end":{"line":119,"column":56,"offset":5307}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":121,"column":1,"offset":5309},"end":{"line":121,"column":9,"offset":5317}}}],"position":{"start":{"line":121,"column":1,"offset":5309},"end":{"line":121,"column":9,"offset":5317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// ReactUtilityTypes.d.ts\ndeclare type $ElementProps<T> = T extends React.ComponentType<infer Props> ? (Props extends object ? Props : never) : never;\n"}],"position":{"start":{"line":123,"column":1,"offset":5319},"end":{"line":126,"column":4,"offset":5480}}}],"position":{"start":{"line":123,"column":1,"offset":5319},"end":{"line":126,"column":4,"offset":5480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage:","position":{"start":{"line":128,"column":1,"offset":5482},"end":{"line":128,"column":7,"offset":5488}}}],"position":{"start":{"line":128,"column":1,"offset":5482},"end":{"line":128,"column":7,"offset":5488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"import * as Recompose from 'recompose';\nexport const defaultProps = <C extends React.ComponentType, D extends Partial<$ElementProps<C>>>(\n    defaults: D,\n    Component: C\n): React.ComponentType<$ElementProps<C> & Partial<D>> => Recompose.defaultProps(defaults)(Component);\n"}],"position":{"start":{"line":130,"column":1,"offset":5490},"end":{"line":136,"column":4,"offset":5774}}}],"position":{"start":{"line":130,"column":1,"offset":5490},"end":{"line":136,"column":4,"offset":5774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks ","position":{"start":{"line":138,"column":2,"offset":5777},"end":{"line":138,"column":9,"offset":5784}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/23"},"children":[{"type":"text","value":"dmisdm","position":{"start":{"line":138,"column":10,"offset":5785},"end":{"line":138,"column":16,"offset":5791}}}],"position":{"start":{"line":138,"column":9,"offset":5784},"end":{"line":138,"column":76,"offset":5851}}}],"position":{"start":{"line":138,"column":1,"offset":5776},"end":{"line":138,"column":77,"offset":5852}}}],"position":{"start":{"line":138,"column":1,"offset":5776},"end":{"line":138,"column":77,"offset":5852}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":":new: You should also consider whether to explicitly forward refs:","position":{"start":{"line":140,"column":1,"offset":5854},"end":{"line":140,"column":67,"offset":5920}}}],"position":{"start":{"line":140,"column":1,"offset":5854},"end":{"line":140,"column":67,"offset":5920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// base button, with ref forwarding\ntype Props = { children: React.ReactNode; type: 'submit' | 'button' };\nexport type Ref = HTMLButtonElement;\nexport const FancyButton = React.forwardRef<Ref, Props>((props, ref) => (\n    <button ref={ref} className=\"MyCustomButtonClass\" type={props.type}>\n        {props.children}\n    </button>\n));\n\n// second layer button, no need for forwardRef (TODO: doublecheck this)\nexport interface DoubleWrappedProps extends React.ComponentPropsWithRef<typeof FancyButton> {\n    specialProp?: string;\n}\nexport function DoubleWrappedButton(props: DoubleWrappedProps) {\n    const { specialProp, ref, ...rest } = props;\n    return <button ref={ref} {...rest} />;\n}\n\n// usage\nfunction App() {\n    const btnRef = React.useRef<HTMLButtonElement>(null!);\n    return (\n        <DoubleWrappedButton type=\"button\" ref={btnRef}>\n            {' '}\n            text{' '}\n        </DoubleWrappedButton>\n    );\n}\n"}],"position":{"start":{"line":142,"column":1,"offset":5922},"end":{"line":171,"column":4,"offset":6856}}}],"position":{"start":{"line":142,"column":1,"offset":5922},"end":{"line":171,"column":4,"offset":6856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIwPTNwBGaWHArjDBAB2AGjgB3YDAAWcSgTgFoY5FAAmwQQHNGMAJ5huABWJh0AXjgBvOLinAANqsqCAXJiowAdNjwwAchCqWDRwegZuAESoPOwgkhFwAD5wEex8AoIJAL70DFgAHpCwofrc2PIWABIAKgCyADIAQulCAKL2WCBYgjC5BUXwuEKo8ABiyIK4us38QnAWPvieilDKauUAPOWixhCmAHwAFIdgJqiicgCU8-twh4xwcBtps4KyWARmlnJZNvZoqD8yC6ZgitV0AGF-qhAcCsAkwlgvqc9qhPIisvsHo8rCjTJ5bA4nN0stiNswXhksQxLpdcowWGxUFghoJVHB-rosFBeK9GP1oPANDBuQQ8NwACIQGIdADqUGQYAMql2pjgBRFbPQiy8EJIkEE3RgqtQsskUk2iIg8nGk2mLUEt0s2NQBlwwGQ9lVAH43CMoBpNLlSXlCoKFDxJjBgHMpTKsPLFcqZhkTmc3HH2HKFUqsCqztdnQxHqyRlY4K6WR6vSYLh9RJ5G5Qy78LHjULlHpQYDwoG9ng73p9vh9fpZG55mzBfsx9sGGQxWHAeKhkJosIwCJH8DG3gBBJWHQvY0vwdgwQTlebuXyeFdYTY1BoptodLo9I6CHj2ewAQku2Ldr2-aZtmSZ5i+byIqClJCAkchfOel6jrcIr5PA5KgQmObJg61IhkAA"},"children":[{"type":"text","value":"TS Playground link","position":{"start":{"line":173,"column":3,"offset":6860},"end":{"line":173,"column":21,"offset":6878}}}],"position":{"start":{"line":173,"column":2,"offset":6859},"end":{"line":173,"column":817,"offset":7674}}}],"position":{"start":{"line":173,"column":1,"offset":6858},"end":{"line":173,"column":818,"offset":7675}}}],"position":{"start":{"line":173,"column":1,"offset":6858},"end":{"line":173,"column":818,"offset":7675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polymorphic Components (e.g. with ","position":{"start":{"line":175,"column":4,"offset":7680},"end":{"line":175,"column":38,"offset":7714}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":175,"column":38,"offset":7714},"end":{"line":175,"column":42,"offset":7718}}},{"type":"text","value":" props)","position":{"start":{"line":175,"column":42,"offset":7718},"end":{"line":175,"column":49,"offset":7725}}}],"position":{"start":{"line":175,"column":1,"offset":7677},"end":{"line":175,"column":49,"offset":7725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Polymorphic Components\" = passing a component to be rendered, e.g. with ","position":{"start":{"line":177,"column":3,"offset":7729},"end":{"line":177,"column":76,"offset":7802}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":177,"column":76,"offset":7802},"end":{"line":177,"column":80,"offset":7806}}},{"type":"text","value":" props","position":{"start":{"line":177,"column":80,"offset":7806},"end":{"line":177,"column":86,"offset":7812}}}],"position":{"start":{"line":177,"column":3,"offset":7729},"end":{"line":177,"column":86,"offset":7812}}},{"type":"text","value":"\n"}],"position":{"start":{"line":177,"column":1,"offset":7727},"end":{"line":177,"column":86,"offset":7812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ElementType"}],"position":{"start":{"line":179,"column":1,"offset":7814},"end":{"line":179,"column":14,"offset":7827}}},{"type":"text","value":" is pretty useful to cover most types that can be passed to createElement e.g.","position":{"start":{"line":179,"column":14,"offset":7827},"end":{"line":179,"column":92,"offset":7905}}}],"position":{"start":{"line":179,"column":1,"offset":7814},"end":{"line":179,"column":92,"offset":7905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"function PassThrough(props: { as: React.ElementType<any> }) {\n    const { as: Component } = props;\n\n    return <Component />;\n}\n"}],"position":{"start":{"line":181,"column":1,"offset":7907},"end":{"line":187,"column":4,"offset":8045}}}],"position":{"start":{"line":181,"column":1,"offset":7907},"end":{"line":187,"column":4,"offset":8045}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might also see this with React Router:","position":{"start":{"line":189,"column":1,"offset":8047},"end":{"line":189,"column":43,"offset":8089}}}],"position":{"start":{"line":189,"column":1,"offset":8047},"end":{"line":189,"column":43,"offset":8089}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const PrivateRoute = ({ component: Component, ...rest }: PrivateRouteProps) => {\n    const { isLoggedIn } = useAuth();\n\n    return isLoggedIn ? <Component {...rest} /> : <Redirect to=\"/\" />;\n};\n"}],"position":{"start":{"line":191,"column":1,"offset":8091},"end":{"line":197,"column":4,"offset":8295}}}],"position":{"start":{"line":191,"column":1,"offset":8091},"end":{"line":197,"column":4,"offset":8295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more info you can refer to these resources:","position":{"start":{"line":199,"column":1,"offset":8297},"end":{"line":199,"column":48,"offset":8344}}}],"position":{"start":{"line":199,"column":1,"offset":8297},"end":{"line":199,"column":48,"offset":8344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/polymorphic-react-components/"},"children":[{"type":"text","value":"https://blog.andrewbran.ch/polymorphic-react-components/","position":{"start":{"line":201,"column":3,"offset":8348},"end":{"line":201,"column":59,"offset":8404}}}],"position":{"start":{"line":201,"column":3,"offset":8348},"end":{"line":201,"column":59,"offset":8404}}}],"position":{"start":{"line":201,"column":1,"offset":8346},"end":{"line":201,"column":59,"offset":8404}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/kripod/react-polymorphic-box"},"children":[{"type":"text","value":"https://github.com/kripod/react-polymorphic-box","position":{"start":{"line":202,"column":3,"offset":8407},"end":{"line":202,"column":50,"offset":8454}}}],"position":{"start":{"line":202,"column":3,"offset":8407},"end":{"line":202,"column":50,"offset":8454}}}],"position":{"start":{"line":202,"column":1,"offset":8405},"end":{"line":202,"column":50,"offset":8454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom"},"children":[{"type":"text","value":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom","position":{"start":{"line":203,"column":3,"offset":8457},"end":{"line":203,"column":124,"offset":8578}}}],"position":{"start":{"line":203,"column":3,"offset":8457},"end":{"line":203,"column":124,"offset":8578}}}],"position":{"start":{"line":203,"column":1,"offset":8455},"end":{"line":203,"column":124,"offset":8578}}},{"type":"text","value":"\n"}],"position":{"start":{"line":201,"column":1,"offset":8346},"end":{"line":203,"column":124,"offset":8578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/69"},"children":[{"type":"text","value":"Thanks @eps1lon","position":{"start":{"line":205,"column":2,"offset":8581},"end":{"line":205,"column":17,"offset":8596}}}],"position":{"start":{"line":205,"column":1,"offset":8580},"end":{"line":205,"column":97,"offset":8676}}},{"type":"text","value":" and ","position":{"start":{"line":205,"column":97,"offset":8676},"end":{"line":205,"column":102,"offset":8681}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/151"},"children":[{"type":"text","value":"@karol-majewski","position":{"start":{"line":205,"column":103,"offset":8682},"end":{"line":205,"column":118,"offset":8697}}}],"position":{"start":{"line":205,"column":102,"offset":8681},"end":{"line":205,"column":179,"offset":8758}}},{"type":"text","value":" for thoughts!","position":{"start":{"line":205,"column":179,"offset":8758},"end":{"line":205,"column":193,"offset":8772}}}],"position":{"start":{"line":205,"column":1,"offset":8580},"end":{"line":205,"column":193,"offset":8772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Generic Components","position":{"start":{"line":207,"column":4,"offset":8777},"end":{"line":207,"column":22,"offset":8795}}}],"position":{"start":{"line":207,"column":1,"offset":8774},"end":{"line":207,"column":22,"offset":8795}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just as you can make generic functions and classes in TypeScript, you can also make generic components to take advantage of the type system for reusable type safety. Both Props and State can take advantage of the same generic types, although it probably makes more sense for Props than for State. You can then use the generic type to annotate types of any variables defined inside your function / class scope.","position":{"start":{"line":209,"column":1,"offset":8797},"end":{"line":209,"column":410,"offset":9206}}}],"position":{"start":{"line":209,"column":1,"offset":8797},"end":{"line":209,"column":410,"offset":9206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\nfunction List<T>(props: Props<T>) {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":211,"column":1,"offset":9208},"end":{"line":227,"column":4,"offset":9680}}}],"position":{"start":{"line":211,"column":1,"offset":9208},"end":{"line":227,"column":4,"offset":9680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can then use the generic components and get nice type safety through type inference:","position":{"start":{"line":229,"column":1,"offset":9682},"end":{"line":229,"column":89,"offset":9770}}}],"position":{"start":{"line":229,"column":1,"offset":9682},"end":{"line":229,"column":89,"offset":9770}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List\n        items={['a', 'b']} // type of 'string' inferred\n        renderItem={(item) => (\n            <li key={item}>\n                {/* Error: Property 'toPrecision' does not exist on type 'string'. */}\n                {item.toPrecision(3)}\n            </li>\n        )}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":231,"column":1,"offset":9772},"end":{"line":244,"column":4,"offset":10108}}}],"position":{"start":{"line":231,"column":1,"offset":9772},"end":{"line":244,"column":4,"offset":10108}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As of ","position":{"start":{"line":246,"column":1,"offset":10110},"end":{"line":246,"column":7,"offset":10116}}},{"type":"element","tagName":"a","properties":{"href":"#typescript-29"},"children":[{"type":"text","value":"TS 2.9","position":{"start":{"line":246,"column":8,"offset":10117},"end":{"line":246,"column":14,"offset":10123}}}],"position":{"start":{"line":246,"column":7,"offset":10116},"end":{"line":246,"column":31,"offset":10140}}},{"type":"text","value":", you can also supply the type parameter in your JSX to opt out of type inference:","position":{"start":{"line":246,"column":31,"offset":10140},"end":{"line":246,"column":113,"offset":10222}}}],"position":{"start":{"line":246,"column":1,"offset":10110},"end":{"line":246,"column":113,"offset":10222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List<number>\n        items={['a', 'b']} // Error: Type 'string' is not assignable to type 'number'.\n        renderItem={(item) => <li key={item}>{item.toPrecision(3)}</li>}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":248,"column":1,"offset":10224},"end":{"line":256,"column":4,"offset":10458}}}],"position":{"start":{"line":248,"column":1,"offset":10224},"end":{"line":256,"column":4,"offset":10458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also use Generics using fat arrow function style:","position":{"start":{"line":258,"column":1,"offset":10460},"end":{"line":258,"column":58,"offset":10517}}}],"position":{"start":{"line":258,"column":1,"offset":10460},"end":{"line":258,"column":58,"offset":10517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\n// Note the <T extends unknown> before the function definition.\n// You can't use just `<T>` as it will confuse the TSX parser whether it's a JSX tag or a Generic Declaration.\n// You can also use <T,> https://github.com/microsoft/TypeScript/issues/15713#issuecomment-499474386\nconst List = <T extends unknown>(props: Props<T>) => {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":260,"column":1,"offset":10519},"end":{"line":280,"column":4,"offset":11288}}}],"position":{"start":{"line":260,"column":1,"offset":10519},"end":{"line":280,"column":4,"offset":11288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The same for using classes: (Credit: ","position":{"start":{"line":282,"column":1,"offset":11290},"end":{"line":282,"column":38,"offset":11327}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/WrocTypeScript/status/1163234064343736326"},"children":[{"type":"text","value":"Karol Majewski","position":{"start":{"line":282,"column":39,"offset":11328},"end":{"line":282,"column":53,"offset":11342}}}],"position":{"start":{"line":282,"column":38,"offset":11327},"end":{"line":282,"column":117,"offset":11406}}},{"type":"text","value":"'s ","position":{"start":{"line":282,"column":117,"offset":11406},"end":{"line":282,"column":120,"offset":11409}}},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/karol-majewski/befaf05af73c7cb3248b4e084ae5df71"},"children":[{"type":"text","value":"gist","position":{"start":{"line":282,"column":121,"offset":11410},"end":{"line":282,"column":125,"offset":11414}}}],"position":{"start":{"line":282,"column":120,"offset":11409},"end":{"line":282,"column":199,"offset":11488}}},{"type":"text","value":")","position":{"start":{"line":282,"column":199,"offset":11488},"end":{"line":282,"column":200,"offset":11489}}}],"position":{"start":{"line":282,"column":1,"offset":11290},"end":{"line":282,"column":200,"offset":11489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\ninterface State<T> {\n    items: T[];\n}\n\nclass List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // You can use type T inside List class.\n    state: Readonly<State<T>> = {\n        items: []\n    };\n    render() {\n        const { items, renderItem } = this.props;\n        // You can use type T inside List class.\n        const clone: T[] = items.slice(0);\n        return (\n            <div>\n                {items.map(renderItem)}\n                <button onClick={() => this.setState({ items: clone })}>Clone</button>\n                {JSON.stringify(this.state, null, 2)}\n            </div>\n        );\n    }\n}\n"}],"position":{"start":{"line":284,"column":1,"offset":11491},"end":{"line":312,"column":4,"offset":12206}}}],"position":{"start":{"line":284,"column":1,"offset":11491},"end":{"line":312,"column":4,"offset":12206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Though you can't use Generic Type Parameters for Static Members:","position":{"start":{"line":314,"column":1,"offset":12208},"end":{"line":314,"column":65,"offset":12272}}}],"position":{"start":{"line":314,"column":1,"offset":12208},"end":{"line":314,"column":65,"offset":12272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // Static members cannot reference class type parameters.ts(2302)\n    static getDerivedStateFromProps(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":316,"column":1,"offset":12274},"end":{"line":323,"column":4,"offset":12537}}}],"position":{"start":{"line":316,"column":1,"offset":12274},"end":{"line":323,"column":4,"offset":12537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To fix this you need to convert your static function to a type inferred function:","position":{"start":{"line":325,"column":1,"offset":12539},"end":{"line":325,"column":82,"offset":12620}}}],"position":{"start":{"line":325,"column":1,"offset":12539},"end":{"line":325,"column":82,"offset":12620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    static getDerivedStateFromProps<T>(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":327,"column":1,"offset":12622},"end":{"line":333,"column":4,"offset":12818}}}],"position":{"start":{"line":327,"column":1,"offset":12622},"end":{"line":333,"column":4,"offset":12818}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Generic components with children","position":{"start":{"line":335,"column":5,"offset":12824},"end":{"line":335,"column":37,"offset":12856}}}],"position":{"start":{"line":335,"column":1,"offset":12820},"end":{"line":335,"column":37,"offset":12856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":337,"column":1,"offset":12858},"end":{"line":337,"column":11,"offset":12868}}},{"type":"text","value":" is usually not defined as a part of the props type. Unless ","position":{"start":{"line":337,"column":11,"offset":12868},"end":{"line":337,"column":71,"offset":12928}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":337,"column":71,"offset":12928},"end":{"line":337,"column":81,"offset":12938}}},{"type":"text","value":" are explicitly defined as a part of the ","position":{"start":{"line":337,"column":81,"offset":12938},"end":{"line":337,"column":122,"offset":12979}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props"}],"position":{"start":{"line":337,"column":122,"offset":12979},"end":{"line":337,"column":129,"offset":12986}}},{"type":"text","value":" type, an attempt to use ","position":{"start":{"line":337,"column":129,"offset":12986},"end":{"line":337,"column":154,"offset":13011}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.children"}],"position":{"start":{"line":337,"column":154,"offset":13011},"end":{"line":337,"column":170,"offset":13027}}},{"type":"text","value":" in JSX or in the function body will fail:","position":{"start":{"line":337,"column":170,"offset":13027},"end":{"line":337,"column":212,"offset":13069}}}],"position":{"start":{"line":337,"column":1,"offset":12858},"end":{"line":337,"column":212,"offset":13069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\n/* Property 'children' does not exist on type 'WrapperProps<T>'. */\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n\n/*\nType '{ children: string; item: string; renderItem: (item: string) => string; }' is not assignable to type 'IntrinsicAttributes & WrapperProps<string>'.\n  Property 'children' does not exist on type 'IntrinsicAttributes & WrapperProps<string>'.\n*/\n\nconst wrapper = (\n    <Wrapper item=\"test\" renderItem={(item) => item}>\n        {test}\n    </Wrapper>\n);\n"}],"position":{"start":{"line":339,"column":1,"offset":13071},"end":{"line":365,"column":4,"offset":13780}}}],"position":{"start":{"line":339,"column":1,"offset":13071},"end":{"line":365,"column":4,"offset":13780}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgHUoUwx6AFHMAZwA8AFQB8cAN4U4cYHRAAuOMIDc0uEWoATegEl5SgBRyki5QEo4AXnHJ0MAHR2MAOQg615GWgAWwADZamkrOjqFuHhQAvhQUAPQAVHC8EFywAJ4EvgFBSNT4cFoQSPxw1BDwSAAewPzwENRwMOlcBGwcaSkCIqL4DnAJcRRoDXWs7Jz01nAicNV02qUSUaKGYHz8Su2TUF1CYpY2kupEMACuUI2G6jKCWsAAbqI3MpLrqfwOmjpQ+qZrGwcJhA5hiXleMgk7wEDmygU0YIhgji9ye6nMniinniCQowhazHwEjgcNy1CUdSgNAA5ipZAY4JSaXTvnoGcYGUzqNTDuIubS4FECrUyhU4Ch+PxgNTqCgAEb+ZgwCBNAkEXS0KnUKVoACCMBgVLlZzopQAZOMOjwNoJ+b0HOouvRmlk-PC8gUiiVRZUamMGqrWvgNYaaDr9aHjaa4Bbtp0bXa+hRBrFyCNtfBTfArHBDLyZqjRAAJJD+fwqrPIwvDUbwADuEzS02u4MEcamwKsACIs12NHkfn8QFYJMDrOJgSsXhIs4iZnF21BnuQMUA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":367,"column":2,"offset":13783},"end":{"line":367,"column":35,"offset":13816}}}],"position":{"start":{"line":367,"column":1,"offset":13782},"end":{"line":367,"column":717,"offset":14498}}}],"position":{"start":{"line":367,"column":1,"offset":13782},"end":{"line":367,"column":717,"offset":14498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To work around that, either add ","position":{"start":{"line":369,"column":1,"offset":14500},"end":{"line":369,"column":33,"offset":14532}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":369,"column":33,"offset":14532},"end":{"line":369,"column":43,"offset":14542}}},{"type":"text","value":" to the ","position":{"start":{"line":369,"column":43,"offset":14542},"end":{"line":369,"column":51,"offset":14550}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"WrapperProps"}],"position":{"start":{"line":369,"column":51,"offset":14550},"end":{"line":369,"column":65,"offset":14564}}},{"type":"text","value":" definition (possibly narrowing down its type, as needed):","position":{"start":{"line":369,"column":65,"offset":14564},"end":{"line":369,"column":123,"offset":14622}}}],"position":{"start":{"line":369,"column":1,"offset":14500},"end":{"line":369,"column":123,"offset":14622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n    children: string; // The component will only accept a single string child\n}\n\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":371,"column":1,"offset":14624},"end":{"line":386,"column":4,"offset":14986}}}],"position":{"start":{"line":371,"column":1,"offset":14624},"end":{"line":386,"column":4,"offset":14986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"or wrap the type of the props in ","position":{"start":{"line":388,"column":1,"offset":14988},"end":{"line":388,"column":34,"offset":15021}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.PropsWithChildren"}],"position":{"start":{"line":388,"column":34,"offset":15021},"end":{"line":388,"column":59,"offset":15046}}},{"type":"text","value":" (this is what ","position":{"start":{"line":388,"column":59,"offset":15046},"end":{"line":388,"column":74,"offset":15061}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.FC<>"}],"position":{"start":{"line":388,"column":74,"offset":15061},"end":{"line":388,"column":86,"offset":15073}}},{"type":"text","value":" does):","position":{"start":{"line":388,"column":86,"offset":15073},"end":{"line":388,"column":93,"offset":15080}}}],"position":{"start":{"line":388,"column":1,"offset":14988},"end":{"line":388,"column":93,"offset":15080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\nconst Wrapper = <T extends {}>(props: React.PropsWithChildren<WrapperProps<T>>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":390,"column":1,"offset":15082},"end":{"line":404,"column":4,"offset":15391}}}],"position":{"start":{"line":390,"column":1,"offset":15082},"end":{"line":404,"column":4,"offset":15391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Typing Children","position":{"start":{"line":406,"column":4,"offset":15396},"end":{"line":406,"column":19,"offset":15411}}}],"position":{"start":{"line":406,"column":1,"offset":15393},"end":{"line":406,"column":19,"offset":15411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some API designs require some restriction on ","position":{"start":{"line":408,"column":1,"offset":15413},"end":{"line":408,"column":46,"offset":15458}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":408,"column":46,"offset":15458},"end":{"line":408,"column":56,"offset":15468}}},{"type":"text","value":" passed to a parent component. It is common to want to enforce these in types, but you should be aware of limitations to this ability.","position":{"start":{"line":408,"column":56,"offset":15468},"end":{"line":408,"column":190,"offset":15602}}}],"position":{"start":{"line":408,"column":1,"offset":15413},"end":{"line":408,"column":190,"offset":15602}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CAN Do","position":{"start":{"line":410,"column":5,"offset":15608},"end":{"line":410,"column":20,"offset":15623}}}],"position":{"start":{"line":410,"column":1,"offset":15604},"end":{"line":410,"column":20,"offset":15623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can type the ","position":{"start":{"line":412,"column":1,"offset":15625},"end":{"line":412,"column":18,"offset":15642}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"structure","position":{"start":{"line":412,"column":20,"offset":15644},"end":{"line":412,"column":29,"offset":15653}}}],"position":{"start":{"line":412,"column":18,"offset":15642},"end":{"line":412,"column":31,"offset":15655}}},{"type":"text","value":" of your children: just one child, or a tuple of children.","position":{"start":{"line":412,"column":31,"offset":15655},"end":{"line":412,"column":89,"offset":15713}}}],"position":{"start":{"line":412,"column":1,"offset":15625},"end":{"line":412,"column":89,"offset":15713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following are valid:","position":{"start":{"line":414,"column":1,"offset":15715},"end":{"line":414,"column":25,"offset":15739}}}],"position":{"start":{"line":414,"column":1,"offset":15715},"end":{"line":414,"column":25,"offset":15739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type OneChild = React.ReactElement;\ntype TwoChildren = [React.ReactElement, React.ReactElement];\ntype ArrayOfProps = SomeProp[];\ntype NumbersChildren = number[];\ntype TwoNumbersChildren = [number, number];\n"}],"position":{"start":{"line":416,"column":1,"offset":15741},"end":{"line":422,"column":4,"offset":15956}}}],"position":{"start":{"line":416,"column":1,"offset":15741},"end":{"line":422,"column":4,"offset":15956}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>\nDon't forget that you can also use `prop-types` if TS fails you.\n</summary>","position":{"start":{"line":424,"column":1,"offset":15958},"end":{"line":427,"column":11,"offset":16053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"Parent.propTypes = {\n    children: PropTypes.shape({\n        props: PropTypes.shape({\n            // could share `propTypes` to the child\n            value: PropTypes.string.isRequired\n        })\n    }).isRequired\n};\n"}],"position":{"start":{"line":429,"column":1,"offset":16055},"end":{"line":438,"column":4,"offset":16281}}}],"position":{"start":{"line":429,"column":1,"offset":16055},"end":{"line":438,"column":4,"offset":16281}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":440,"column":1,"offset":16283},"end":{"line":440,"column":11,"offset":16293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CANNOT Do","position":{"start":{"line":442,"column":5,"offset":16299},"end":{"line":442,"column":23,"offset":16317}}}],"position":{"start":{"line":442,"column":1,"offset":16295},"end":{"line":442,"column":23,"offset":16317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing you cannot do is ","position":{"start":{"line":444,"column":1,"offset":16319},"end":{"line":444,"column":28,"offset":16346}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"specify which components","position":{"start":{"line":444,"column":30,"offset":16348},"end":{"line":444,"column":54,"offset":16372}}}],"position":{"start":{"line":444,"column":28,"offset":16346},"end":{"line":444,"column":56,"offset":16374}}},{"type":"text","value":" the children are, e.g. If you want to express the fact that \"React Router ","position":{"start":{"line":444,"column":56,"offset":16374},"end":{"line":444,"column":131,"offset":16449}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Routes>"}],"position":{"start":{"line":444,"column":131,"offset":16449},"end":{"line":444,"column":141,"offset":16459}}},{"type":"text","value":" can only have ","position":{"start":{"line":444,"column":141,"offset":16459},"end":{"line":444,"column":156,"offset":16474}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Route>"}],"position":{"start":{"line":444,"column":156,"offset":16474},"end":{"line":444,"column":165,"offset":16483}}},{"type":"text","value":" as children, nothing else is allowed\" in TypeScript.","position":{"start":{"line":444,"column":165,"offset":16483},"end":{"line":444,"column":218,"offset":16536}}}],"position":{"start":{"line":444,"column":1,"offset":16319},"end":{"line":444,"column":218,"offset":16536}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because when you write a JSX expression (","position":{"start":{"line":446,"column":1,"offset":16538},"end":{"line":446,"column":50,"offset":16587}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const foo = <MyComponent foo='foo' />"}],"position":{"start":{"line":446,"column":50,"offset":16587},"end":{"line":446,"column":89,"offset":16626}}},{"type":"text","value":"), the resultant type is blackboxed into a generic JSX.Element type. (","position":{"start":{"line":446,"column":89,"offset":16626},"end":{"line":446,"column":159,"offset":16696}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/271"},"children":[{"type":"text","value":"thanks @ferdaber","position":{"start":{"line":446,"column":161,"offset":16698},"end":{"line":446,"column":177,"offset":16714}}}],"position":{"start":{"line":446,"column":160,"offset":16697},"end":{"line":446,"column":238,"offset":16775}}}],"position":{"start":{"line":446,"column":159,"offset":16696},"end":{"line":446,"column":239,"offset":16776}}},{"type":"text","value":")","position":{"start":{"line":446,"column":239,"offset":16776},"end":{"line":446,"column":240,"offset":16777}}}],"position":{"start":{"line":446,"column":1,"offset":16538},"end":{"line":446,"column":240,"offset":16777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Type Narrowing based on Props","position":{"start":{"line":448,"column":4,"offset":16782},"end":{"line":448,"column":33,"offset":16811}}}],"position":{"start":{"line":448,"column":1,"offset":16779},"end":{"line":448,"column":33,"offset":16811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What you want:","position":{"start":{"line":450,"column":1,"offset":16813},"end":{"line":450,"column":15,"offset":16827}}}],"position":{"start":{"line":450,"column":1,"offset":16813},"end":{"line":450,"column":15,"offset":16827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Usage\nfunction App() {\n    return (\n        <>\n            {/* ðŸ˜Ž All good */}\n            <Button target=\"_blank\" href=\"https://www.google.com\">\n                Test\n            </Button>\n            {/* ðŸ˜­ Error, `disabled` doesnt exist on anchor element */}\n            <Button disabled href=\"x\">\n                Test\n            </Button>\n        </>\n    );\n}\n"}],"position":{"start":{"line":452,"column":1,"offset":16829},"end":{"line":468,"column":4,"offset":17206}}}],"position":{"start":{"line":452,"column":1,"offset":16829},"end":{"line":468,"column":4,"offset":17206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How to implement: Use ","position":{"start":{"line":470,"column":1,"offset":17208},"end":{"line":470,"column":23,"offset":17230}}},{"type":"element","tagName":"a","properties":{"href":"https://basarat.gitbooks.io/typescript/docs/types/typeGuard.html#user-defined-type-guards"},"children":[{"type":"text","value":"type guards","position":{"start":{"line":470,"column":24,"offset":17231},"end":{"line":470,"column":35,"offset":17242}}}],"position":{"start":{"line":470,"column":23,"offset":17230},"end":{"line":470,"column":127,"offset":17334}}},{"type":"text","value":"!","position":{"start":{"line":470,"column":127,"offset":17334},"end":{"line":470,"column":128,"offset":17335}}}],"position":{"start":{"line":470,"column":1,"offset":17208},"end":{"line":470,"column":128,"offset":17335}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Button props\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    href?: undefined;\n};\n\n// Anchor props\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n    href?: string;\n};\n\n// Input/output options\ntype Overload = {\n    (props: ButtonProps): JSX.Element;\n    (props: AnchorProps): JSX.Element;\n};\n\n// Guard to check if href exists in props\nconst hasHref = (props: ButtonProps | AnchorProps): props is AnchorProps => 'href' in props;\n\n// Component\nconst Button: Overload = (props: ButtonProps | AnchorProps) => {\n    // anchor render\n    if (hasHref(props)) return <a {...props} />;\n    // button render\n    return <button {...props} />;\n};\n"}],"position":{"start":{"line":472,"column":1,"offset":17337},"end":{"line":499,"column":4,"offset":18032}}}],"position":{"start":{"line":472,"column":1,"offset":17337},"end":{"line":499,"column":4,"offset":18032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoAekrgCEBXGGCAOzjBzAGcKYBPMEjqNmLAAqcucALyJiMAHQMmrABIAVALIAZAIJMowAEaMkXADwady0QFEANkhBIWMAHxwAZHADeFOHAAFkSYAPwAXHD0LAAmSJjALEgxANwUAL5p5BTUcLosaIHQ7JK8AkL5hdASENwycuiKlUVQVnoGxqYWbc3QDk4u7l6+-kEhEXBcMIYsAOZZmRQ5NACSLGCMlBCMG-C1MMCsPOT8gnAA8gBuSFD2ECgx9X7kAQAUHLVckTasNdwAlJEAFIAZQAGgp+s5XFk3h9uJFelA-lxAXBQRCoYMFlllnAAOL0FBQR7MOCFJBoADWcGAmDG8TgSAAHsAplJEiVPhQ0Ed4IEUFxVCF6u9JN8RL9JHAAD55AotFFo+EcqRIlEyNyjABEwXi2tpbBVuKoNAAwrhIElXDy+cIVCxIlcbncHqKVRKHRq5erJP9NSMXnBcigFcUiLEbqM6XBXgKhSExZ9-v6iDB6FA2OYUL4FHmVelg25YcGaCYHXAI3EoKM0xms+XRLn85JC5RixkTbkAKpcFCzJAUTDRDCHNi6MBgV7+54BOuZ2OjALmLVBgIBHyUABUcEAvBuAOD28vZ7HBZhAII8t5R0kv1+YfmwYMSBzBpNqAPpGeyhqkGvWYN9AiYBFqAAd3AhQzwgWZHAUXkQG1Vd12QuB1DMGBb2XSgHyQlDNx3XdAFo9uBbCgHAoAAGjgAADGI2RQL9kmouAYggMxXCZVkpjgVg4FDKooCZRxoXgK8bzXO8HxY+jGMef832ZRDMPXNCpmU8xsMlFhcKw3D-gWIA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":501,"column":2,"offset":18035},"end":{"line":501,"column":35,"offset":18068}}}],"position":{"start":{"line":501,"column":1,"offset":18034},"end":{"line":501,"column":944,"offset":18977}}}],"position":{"start":{"line":501,"column":1,"offset":18034},"end":{"line":501,"column":944,"offset":18977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Components, and JSX in general, are analogous to functions. When a component can render differently based on their props, it's similar to how a function can be overloaded to have multiple call signatures. In the same way, you can overload a function component's call signature to list all of its different \"versions\".","position":{"start":{"line":503,"column":1,"offset":18979},"end":{"line":503,"column":318,"offset":19296}}}],"position":{"start":{"line":503,"column":1,"offset":18979},"end":{"line":503,"column":318,"offset":19296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very common use case for this is to render something as either a button or an anchor, based on if it receives a ","position":{"start":{"line":505,"column":1,"offset":19298},"end":{"line":505,"column":115,"offset":19412}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"href"}],"position":{"start":{"line":505,"column":115,"offset":19412},"end":{"line":505,"column":121,"offset":19418}}},{"type":"text","value":" attribute.","position":{"start":{"line":505,"column":121,"offset":19418},"end":{"line":505,"column":132,"offset":19429}}}],"position":{"start":{"line":505,"column":1,"offset":19298},"end":{"line":505,"column":132,"offset":19429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type ButtonProps = JSX.IntrinsicElements['button'];\ntype AnchorProps = JSX.IntrinsicElements['a'];\n\n// optionally use a custom type guard\nfunction isPropsForAnchorElement(props: ButtonProps | AnchorProps): props is AnchorProps {\n    return 'href' in props;\n}\n\nfunction Clickable(props: ButtonProps | AnchorProps) {\n    if (isPropsForAnchorElement(props)) {\n        return <a {...props} />;\n    } else {\n        return <button {...props} />;\n    }\n}\n"}],"position":{"start":{"line":507,"column":1,"offset":19431},"end":{"line":523,"column":4,"offset":19890}}}],"position":{"start":{"line":507,"column":1,"offset":19431},"end":{"line":523,"column":4,"offset":19890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"They don't even need to be completely different props, as long as they have at least one difference in properties:","position":{"start":{"line":525,"column":1,"offset":19892},"end":{"line":525,"column":115,"offset":20006}}}],"position":{"start":{"line":525,"column":1,"offset":19892},"end":{"line":525,"column":115,"offset":20006}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type LinkProps = Omit<JSX.IntrinsicElements['a'], 'href'> & { to?: string };\n\nfunction RouterLink(props: LinkProps | AnchorProps) {\n    if ('href' in props) {\n        return <a {...props} />;\n    } else {\n        return <Link {...props} />;\n    }\n}\n"}],"position":{"start":{"line":527,"column":1,"offset":20008},"end":{"line":537,"column":4,"offset":20267}}}],"position":{"start":{"line":527,"column":1,"offset":20008},"end":{"line":537,"column":4,"offset":20267}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Generic Components</b></summary>","position":{"start":{"line":539,"column":1,"offset":20269},"end":{"line":540,"column":57,"offset":20335}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example solution, see the further discussion for other solutions. ","position":{"start":{"line":542,"column":1,"offset":20337},"end":{"line":542,"column":78,"offset":20414}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks to ","position":{"start":{"line":542,"column":79,"offset":20415},"end":{"line":542,"column":89,"offset":20425}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/12#issuecomment-394440577"},"children":[{"type":"text","value":"@jpavon","position":{"start":{"line":542,"column":90,"offset":20426},"end":{"line":542,"column":97,"offset":20433}}}],"position":{"start":{"line":542,"column":89,"offset":20425},"end":{"line":542,"column":202,"offset":20538}}}],"position":{"start":{"line":542,"column":78,"offset":20414},"end":{"line":542,"column":203,"offset":20539}}}],"position":{"start":{"line":542,"column":1,"offset":20337},"end":{"line":542,"column":203,"offset":20539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface LinkProps {}\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<NavLinkProps, 'href'>;\n\nconst Link = <T extends {}>(props: LinkProps & T extends RouterLinkProps ? RouterLinkProps : AnchorProps) => {\n    if ((props as RouterLinkProps).to) {\n        return <NavLink {...(props as RouterLinkProps)} />;\n    } else {\n        return <a {...(props as AnchorProps)} />;\n    }\n};\n\n<Link<RouterLinkProps> to=\"/\">My link</Link>; // ok\n<Link<AnchorProps> href=\"/\">My link</Link>; // ok\n<Link<RouterLinkProps> to=\"/\" href=\"/\">\n    My link\n</Link>; // error\n"}],"position":{"start":{"line":544,"column":1,"offset":20541},"end":{"line":562,"column":4,"offset":21149}}}],"position":{"start":{"line":544,"column":1,"offset":20541},"end":{"line":562,"column":4,"offset":21149}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":564,"column":1,"offset":21151},"end":{"line":564,"column":11,"offset":21161}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Composition</b></summary>","position":{"start":{"line":566,"column":1,"offset":21163},"end":{"line":567,"column":50,"offset":21222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to conditionally render a component, sometimes is better to use ","position":{"start":{"line":569,"column":1,"offset":21224},"end":{"line":569,"column":77,"offset":21300}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/composition-vs-inheritance.html"},"children":[{"type":"text","value":"React's composition model","position":{"start":{"line":569,"column":78,"offset":21301},"end":{"line":569,"column":103,"offset":21326}}}],"position":{"start":{"line":569,"column":77,"offset":21300},"end":{"line":569,"column":162,"offset":21385}}},{"type":"text","value":" to have simpler components and better to understand typings:","position":{"start":{"line":569,"column":162,"offset":21385},"end":{"line":569,"column":223,"offset":21446}}}],"position":{"start":{"line":569,"column":1,"offset":21224},"end":{"line":569,"column":223,"offset":21446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<AnchorProps, 'href'>;\n\ninterface Button {\n    as: React.ComponentClass | 'a';\n}\n\nconst Button: React.FunctionComponent<Button> = (props) => {\n    const { as: Component, children, ...rest } = props;\n    return (\n        <Component className=\"button\" {...rest}>\n            {children}\n        </Component>\n    );\n};\n\nconst AnchorButton: React.FunctionComponent<AnchorProps> = (props) => <Button as=\"a\" {...props} />;\n\nconst LinkButton: React.FunctionComponent<RouterLinkProps> = (props) => <Button as={NavLink} {...props} />;\n\n<LinkButton to=\"/login\">Login</LinkButton>;\n<AnchorButton href=\"/login\">Login</AnchorButton>;\n<AnchorButton href=\"/login\" to=\"/test\">\n    Login\n</AnchorButton>; // Error: Property 'to' does not exist on type...\n"}],"position":{"start":{"line":571,"column":1,"offset":21448},"end":{"line":597,"column":4,"offset":22288}}}],"position":{"start":{"line":571,"column":1,"offset":21448},"end":{"line":597,"column":4,"offset":22288}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":599,"column":1,"offset":22290},"end":{"line":599,"column":11,"offset":22300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may also want to use Discriminated Unions, please check out ","position":{"start":{"line":601,"column":1,"offset":22302},"end":{"line":601,"column":65,"offset":22366}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/expressive-react-component-apis-with-discriminated-unions/"},"children":[{"type":"text","value":"Expressive React Component APIs with Discriminated Unions","position":{"start":{"line":601,"column":66,"offset":22367},"end":{"line":601,"column":123,"offset":22424}}}],"position":{"start":{"line":601,"column":65,"offset":22366},"end":{"line":601,"column":211,"offset":22512}}},{"type":"text","value":".","position":{"start":{"line":601,"column":211,"offset":22512},"end":{"line":601,"column":212,"offset":22513}}}],"position":{"start":{"line":601,"column":1,"offset":22302},"end":{"line":601,"column":212,"offset":22513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a brief intuition for ","position":{"start":{"line":603,"column":1,"offset":22515},"end":{"line":603,"column":31,"offset":22545}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discriminated Union Types","position":{"start":{"line":603,"column":33,"offset":22547},"end":{"line":603,"column":58,"offset":22572}}}],"position":{"start":{"line":603,"column":31,"offset":22545},"end":{"line":603,"column":60,"offset":22574}}},{"type":"text","value":":","position":{"start":{"line":603,"column":60,"offset":22574},"end":{"line":603,"column":61,"offset":22575}}}],"position":{"start":{"line":603,"column":1,"offset":22515},"end":{"line":603,"column":61,"offset":22575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = {\n    type: 'TextEvent';\n    value: string;\n    target: HTMLInputElement;\n};\ntype UserMouseEvent = {\n    type: 'MouseEvent';\n    value: [number, number];\n    target: HTMLElement;\n};\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (event.type === 'TextEvent') {\n        event.value; // string\n        event.target; // HTMLInputElement\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLElement\n}\n"}],"position":{"start":{"line":605,"column":1,"offset":22577},"end":{"line":626,"column":4,"offset":23079}}}],"position":{"start":{"line":605,"column":1,"offset":22577},"end":{"line":626,"column":4,"offset":23079}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Take care: TypeScript does not narrow the type of a Discriminated Union on the basis of typeof checks. The type guard has to be on the value of a key and not it's type.\n  </summary>","position":{"start":{"line":628,"column":1,"offset":23081},"end":{"line":631,"column":13,"offset":23286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = { value: string; target: HTMLInputElement };\ntype UserMouseEvent = { value: [number, number]; target: HTMLElement };\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (typeof event.value === 'string') {\n        event.value; // string\n        event.target; // HTMLInputElement | HTMLElement (!!!!)\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLInputElement | HTMLElement (!!!!)\n}\n"}],"position":{"start":{"line":633,"column":1,"offset":23288},"end":{"line":646,"column":4,"offset":23777}}}],"position":{"start":{"line":633,"column":1,"offset":23288},"end":{"line":646,"column":4,"offset":23777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The above example does not work as we are not checking the value of ","position":{"start":{"line":648,"column":1,"offset":23779},"end":{"line":648,"column":69,"offset":23847}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"event.value"}],"position":{"start":{"line":648,"column":69,"offset":23847},"end":{"line":648,"column":82,"offset":23860}}},{"type":"text","value":" but only it's type. Read more about it ","position":{"start":{"line":648,"column":82,"offset":23860},"end":{"line":648,"column":122,"offset":23900}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/microsoft/TypeScript/issues/30506#issuecomment-474858198"},"children":[{"type":"text","value":"microsoft/TypeScript#30506 (comment)","position":{"start":{"line":648,"column":123,"offset":23901},"end":{"line":648,"column":159,"offset":23937}}}],"position":{"start":{"line":648,"column":122,"offset":23900},"end":{"line":648,"column":237,"offset":24015}}}],"position":{"start":{"line":648,"column":1,"offset":23779},"end":{"line":648,"column":237,"offset":24015}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":650,"column":1,"offset":24017},"end":{"line":650,"column":11,"offset":24027}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Discriminated Unions in TypeScript can also work with hook dependencies in React. The type matched is automatically updated when the corresponding union member based on which a hook depends, changes. Expand more to see an example usecase.\n   <br/><br/>\n  </summary>","position":{"start":{"line":652,"column":1,"offset":24029},"end":{"line":656,"column":13,"offset":24318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type SingleElement = {\n    isArray: true;\n    value: string[];\n};\ntype MultiElement = {\n    isArray: false;\n    value: string;\n};\ntype Props = SingleElement | MultiElement;\nfunction Sequence(p: Props) {\n    return React.useMemo(\n        () => (\n            <div>\n                value(s):\n                {p.isArray && p.value.join(',')}\n                {!p.isArray && p.value}\n            </div>\n        ),\n        [p.isArray, p.value] // TypeScript automatically matches the corresponding value type based on dependency change\n    );\n}\nfunction App() {\n    return (\n        <div>\n            <Sequence isArray={false} value={'foo'} />\n            <Sequence isArray={true} value={['foo', 'bar', 'baz']} />\n        </div>\n    );\n}\n"}],"position":{"start":{"line":658,"column":1,"offset":24320},"end":{"line":688,"column":4,"offset":25061}}}],"position":{"start":{"line":658,"column":1,"offset":24320},"end":{"line":688,"column":4,"offset":25061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8dccAD5wA3vwETgqAIJQoyJgC44MKAFcs9CRIBuyADYblqVcAB2AcwDaAXRpxxAgL7jhY7QKmz5SuAQOomo66BkZwJlDmFloSTvS4EGYmcAAacDxwABRgypwQ3ACU6QB8ouKUMGpQZphUMAB0aoEAslggEJnBmUU8pZ0ecAA8ACbAOsXB2nqGWJmoBYqTEiJg9V5yCnAAZFtwq9Ma9QBWEOaZZAA0ZAUuAwIiAISr6z7bu-uhWLcegwD0o+NggULsErM8ZBsmBc9vUDlgbNDfr84AAVFhYVC4SJgeDINQwEjIGDAXAGfRMOAgIm4AAWGJUdLgCTkGMgZlGljgcJU6PEBXocToBDUZnwwEScGkYDA3TKAgqVRq-QkIzGTP0aFQADlkCAsDwAERSsAGiYDQZpF4KHgifz6QJOLmfG1kAgQCBkR2-M0-S0Qnw21QaR1wm1WV3uy7kABGyCgUbIsYAXmQbF6fQI-gCffy6E4gA\">","position":{"start":{"line":690,"column":1,"offset":25063},"end":{"line":690,"column":605,"offset":25667}}},{"type":"raw","value":"<i>","position":{"start":{"line":690,"column":605,"offset":25667},"end":{"line":690,"column":608,"offset":25670}}},{"type":"text","value":"See this in TS Playground","position":{"start":{"line":690,"column":608,"offset":25670},"end":{"line":690,"column":633,"offset":25695}}},{"type":"raw","value":"</i>","position":{"start":{"line":690,"column":633,"offset":25695},"end":{"line":690,"column":637,"offset":25699}}},{"type":"text","value":"\n","position":{"start":{"line":690,"column":637,"offset":25699},"end":{"line":691,"column":1,"offset":25700}}},{"type":"raw","value":"</a>","position":{"start":{"line":691,"column":1,"offset":25700},"end":{"line":691,"column":5,"offset":25704}}}],"position":{"start":{"line":690,"column":1,"offset":25063},"end":{"line":691,"column":5,"offset":25704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example, based on the ","position":{"start":{"line":693,"column":1,"offset":25706},"end":{"line":693,"column":36,"offset":25741}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isArray"}],"position":{"start":{"line":693,"column":36,"offset":25741},"end":{"line":693,"column":45,"offset":25750}}},{"type":"text","value":" union member, the type of the ","position":{"start":{"line":693,"column":45,"offset":25750},"end":{"line":693,"column":76,"offset":25781}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":693,"column":76,"offset":25781},"end":{"line":693,"column":83,"offset":25788}}},{"type":"text","value":" hook dependency changes.","position":{"start":{"line":693,"column":83,"offset":25788},"end":{"line":693,"column":108,"offset":25813}}}],"position":{"start":{"line":693,"column":1,"offset":25706},"end":{"line":693,"column":108,"offset":25813}}},{"type":"text","value":"\n"},{"type":"raw","value":" </details>","position":{"start":{"line":695,"column":1,"offset":25815},"end":{"line":695,"column":12,"offset":25826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To streamline this you may also combine this with the concept of ","position":{"start":{"line":697,"column":1,"offset":25828},"end":{"line":697,"column":66,"offset":25893}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"User-Defined Type Guards","position":{"start":{"line":697,"column":68,"offset":25895},"end":{"line":697,"column":92,"offset":25919}}}],"position":{"start":{"line":697,"column":66,"offset":25893},"end":{"line":697,"column":94,"offset":25921}}},{"type":"text","value":":","position":{"start":{"line":697,"column":94,"offset":25921},"end":{"line":697,"column":95,"offset":25922}}}],"position":{"start":{"line":697,"column":1,"offset":25828},"end":{"line":697,"column":95,"offset":25922}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function isString(a: unknown): a is string {\n    return typeof a === 'string';\n}\n"}],"position":{"start":{"line":699,"column":1,"offset":25924},"end":{"line":703,"column":4,"offset":26014}}}],"position":{"start":{"line":699,"column":1,"offset":25924},"end":{"line":703,"column":4,"offset":26014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards"},"children":[{"type":"text","value":"Read more about User-Defined Type Guards in the Handbook","position":{"start":{"line":705,"column":2,"offset":26017},"end":{"line":705,"column":58,"offset":26073}}}],"position":{"start":{"line":705,"column":1,"offset":26016},"end":{"line":705,"column":150,"offset":26165}}},{"type":"text","value":".","position":{"start":{"line":705,"column":150,"offset":26165},"end":{"line":705,"column":151,"offset":26166}}}],"position":{"start":{"line":705,"column":1,"offset":26016},"end":{"line":705,"column":151,"offset":26166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: One or the Other but not Both","position":{"start":{"line":707,"column":4,"offset":26171},"end":{"line":707,"column":40,"offset":26207}}}],"position":{"start":{"line":707,"column":1,"offset":26168},"end":{"line":707,"column":40,"offset":26207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":709,"column":1,"offset":26209},"end":{"line":709,"column":9,"offset":26217}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"in"}],"position":{"start":{"line":709,"column":9,"offset":26217},"end":{"line":709,"column":13,"offset":26221}}},{"type":"text","value":" keyword, function overloading, and union types to make components that take either one or another sets of props, but not both:","position":{"start":{"line":709,"column":13,"offset":26221},"end":{"line":709,"column":140,"offset":26348}}}],"position":{"start":{"line":709,"column":1,"offset":26209},"end":{"line":709,"column":140,"offset":26348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type Props1 = { foo: string };\ntype Props2 = { bar: string };\n\nfunction MyComponent(props: Props1 | Props2) {\n    if ('foo' in props) {\n        // props.bar // error\n        return <div>{props.foo}</div>;\n    } else {\n        // props.foo // error\n        return <div>{props.bar}</div>;\n    }\n}\nconst UsageComponent: React.FC = () => (\n    <div>\n        <MyComponent foo=\"foo\" />\n        <MyComponent bar=\"bar\" />\n        {/* <MyComponent foo=\"foo\" bar=\"bar\"/> // invalid */}\n    </div>\n);\n"}],"position":{"start":{"line":711,"column":1,"offset":26350},"end":{"line":731,"column":4,"offset":26850}}}],"position":{"start":{"line":711,"column":1,"offset":26350},"end":{"line":731,"column":4,"offset":26850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgAUcwBnARjgF44BvOTCBABccFjCjAAdgHM4AXwDcVWvSYRWAJi684AIxRQRYiTPlLK5TAFdJGYBElwAstQDCuSJKSSYACjDMLCJqrBwAPoyBGgCUvBRwcMCYcL4ARAIQqYmOAeossTzxCXAA9CVwuawAdPpQpeVIUDhQRQlEMFZQjgA8ACbAAG4AfDyVLFUZct0l-cPmCXJwSAA2LPSF5MX1FYETgtuNza1w7Z09syNjNQZTM4ND8-IUchRoDmJwAKosKNJI7uAHN4YCJkOgYFUAGKubS+WKcIYpIp9e7HbouAGeYH8QScdKCLIlIZojEeIE+PQGPG1QnEzbFHglABUcHRbjJXgpGTxGSytWpBlSRO2UgGKGWwF6cCZJRe9OmFwo0QUQA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":733,"column":2,"offset":26853},"end":{"line":733,"column":35,"offset":26886}}}],"position":{"start":{"line":733,"column":1,"offset":26852},"end":{"line":733,"column":525,"offset":27376}}}],"position":{"start":{"line":733,"column":1,"offset":26852},"end":{"line":733,"column":525,"offset":27376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Further reading: ","position":{"start":{"line":735,"column":1,"offset":27378},"end":{"line":735,"column":18,"offset":27395}}},{"type":"element","tagName":"a","properties":{"href":"http://www.javiercasas.com/articles/typescript-impossible-states-irrepresentable"},"children":[{"type":"text","value":"how to ban passing ","position":{"start":{"line":735,"column":19,"offset":27396},"end":{"line":735,"column":38,"offset":27415}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":735,"column":38,"offset":27415},"end":{"line":735,"column":42,"offset":27419}}},{"type":"text","value":" if you have a ","position":{"start":{"line":735,"column":42,"offset":27419},"end":{"line":735,"column":57,"offset":27434}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NoFields"}],"position":{"start":{"line":735,"column":57,"offset":27434},"end":{"line":735,"column":67,"offset":27444}}},{"type":"text","value":" type.","position":{"start":{"line":735,"column":67,"offset":27444},"end":{"line":735,"column":73,"offset":27450}}}],"position":{"start":{"line":735,"column":18,"offset":27395},"end":{"line":735,"column":156,"offset":27533}}}],"position":{"start":{"line":735,"column":1,"offset":27378},"end":{"line":735,"column":156,"offset":27533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Must Pass Both","position":{"start":{"line":737,"column":4,"offset":27538},"end":{"line":737,"column":25,"offset":27559}}}],"position":{"start":{"line":737,"column":1,"offset":27535},"end":{"line":737,"column":25,"offset":27559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type OneOrAnother<T1, T2> = (T1 & { [K in keyof T2]?: undefined }) | (T2 & { [K in keyof T1]?: undefined });\n\ntype Props = OneOrAnother<{ a: string; b: string }, {}>;\n\nconst a: Props = { a: 'a' }; // error\nconst b: Props = { b: 'b' }; // error\nconst ab: Props = { a: 'a', b: 'b' }; // ok\n"}],"position":{"start":{"line":739,"column":1,"offset":27561},"end":{"line":747,"column":4,"offset":27859}}}],"position":{"start":{"line":739,"column":1,"offset":27561},"end":{"line":747,"column":4,"offset":27859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks ","position":{"start":{"line":749,"column":1,"offset":27861},"end":{"line":749,"column":8,"offset":27868}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/kentcdodds/status/1085655423611367426"},"children":[{"type":"text","value":"diegohaz","position":{"start":{"line":749,"column":9,"offset":27869},"end":{"line":749,"column":17,"offset":27877}}}],"position":{"start":{"line":749,"column":8,"offset":27868},"end":{"line":749,"column":77,"offset":27937}}}],"position":{"start":{"line":749,"column":1,"offset":27861},"end":{"line":749,"column":77,"offset":27937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Pass One ONLY IF the Other Is Passed","position":{"start":{"line":751,"column":4,"offset":27942},"end":{"line":751,"column":47,"offset":27985}}}],"position":{"start":{"line":751,"column":1,"offset":27939},"end":{"line":751,"column":47,"offset":27985}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you want a Text component that gets truncated if ","position":{"start":{"line":753,"column":1,"offset":27987},"end":{"line":753,"column":54,"offset":28040}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":753,"column":54,"offset":28040},"end":{"line":753,"column":64,"offset":28050}}},{"type":"text","value":" prop is passed but expands to show the full text when ","position":{"start":{"line":753,"column":64,"offset":28050},"end":{"line":753,"column":119,"offset":28105}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":753,"column":119,"offset":28105},"end":{"line":753,"column":129,"offset":28115}}},{"type":"text","value":" prop is passed (e.g. when the user clicks the text).","position":{"start":{"line":753,"column":129,"offset":28115},"end":{"line":753,"column":182,"offset":28168}}}],"position":{"start":{"line":753,"column":1,"offset":27987},"end":{"line":753,"column":182,"offset":28168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You want to allow ","position":{"start":{"line":755,"column":1,"offset":28170},"end":{"line":755,"column":19,"offset":28188}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":755,"column":19,"offset":28188},"end":{"line":755,"column":29,"offset":28198}}},{"type":"text","value":" to be passed only if ","position":{"start":{"line":755,"column":29,"offset":28198},"end":{"line":755,"column":51,"offset":28220}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":755,"column":51,"offset":28220},"end":{"line":755,"column":61,"offset":28230}}},{"type":"text","value":" is also passed, because there is no use for ","position":{"start":{"line":755,"column":61,"offset":28230},"end":{"line":755,"column":106,"offset":28275}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":755,"column":106,"offset":28275},"end":{"line":755,"column":116,"offset":28285}}},{"type":"text","value":" if the text is not truncated.","position":{"start":{"line":755,"column":116,"offset":28285},"end":{"line":755,"column":146,"offset":28315}}}],"position":{"start":{"line":755,"column":1,"offset":28170},"end":{"line":755,"column":146,"offset":28315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage example:","position":{"start":{"line":757,"column":1,"offset":28317},"end":{"line":757,"column":15,"offset":28331}}}],"position":{"start":{"line":757,"column":1,"offset":28317},"end":{"line":757,"column":15,"offset":28331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const App: React.FC = () => (\n    <>\n        {/* these all typecheck */}\n        <Text>not truncated</Text>\n        <Text truncate>truncated</Text>\n        <Text truncate expanded>\n            truncate-able but expanded\n        </Text>\n        {/* TS error: Property 'truncate' is missing in type '{ children: string; expanded: true; }' but required in type '{ truncate: true; expanded?: boolean | undefined; }'. */}\n        <Text expanded>truncate-able but expanded</Text>\n    </>\n);\n"}],"position":{"start":{"line":759,"column":1,"offset":28333},"end":{"line":772,"column":4,"offset":28828}}}],"position":{"start":{"line":759,"column":1,"offset":28333},"end":{"line":772,"column":4,"offset":28828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can implement this by function overloads:","position":{"start":{"line":774,"column":1,"offset":28830},"end":{"line":774,"column":46,"offset":28875}}}],"position":{"start":{"line":774,"column":1,"offset":28830},"end":{"line":774,"column":46,"offset":28875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type CommonProps = {\n    children: React.ReactNode;\n    miscProps?: any;\n};\n\ntype NoTruncateProps = CommonProps & { truncate?: false };\n\ntype TruncateProps = CommonProps & { truncate: true; expanded?: boolean };\n\n// Function overloads to accept both prop types NoTruncateProps & TruncateProps\nfunction Text(props: NoTruncateProps): JSX.Element;\nfunction Text(props: TruncateProps): JSX.Element;\nfunction Text(props: CommonProps & { truncate?: boolean; expanded?: boolean }) {\n    const { children, truncate, expanded, ...otherProps } = props;\n    const classNames = truncate ? '.truncate' : '';\n    return (\n        <div className={classNames} aria-expanded={!!expanded} {...otherProps}>\n            {children}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":776,"column":1,"offset":28877},"end":{"line":798,"column":4,"offset":29622}}}],"position":{"start":{"line":776,"column":1,"offset":28877},"end":{"line":798,"column":4,"offset":29622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Omit prop from a type","position":{"start":{"line":800,"column":4,"offset":29627},"end":{"line":800,"column":32,"offset":29655}}}],"position":{"start":{"line":800,"column":1,"offset":29624},"end":{"line":800,"column":32,"offset":29655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: ","position":{"start":{"line":802,"column":1,"offset":29657},"end":{"line":802,"column":7,"offset":29663}}},{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk"},"children":[{"type":"text","value":"Omit was added as a first class utility in TS 3.5","position":{"start":{"line":802,"column":8,"offset":29664},"end":{"line":802,"column":57,"offset":29713}}}],"position":{"start":{"line":802,"column":7,"offset":29663},"end":{"line":802,"column":130,"offset":29786}}},{"type":"text","value":"! ðŸŽ‰","position":{"start":{"line":802,"column":130,"offset":29786},"end":{"line":802,"column":134,"offset":29790}}}],"position":{"start":{"line":802,"column":1,"offset":29657},"end":{"line":802,"column":134,"offset":29790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes when intersecting types, we want to define our own version of a prop. For example, I want my component to have a ","position":{"start":{"line":804,"column":1,"offset":29792},"end":{"line":804,"column":124,"offset":29915}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":804,"column":124,"offset":29915},"end":{"line":804,"column":131,"offset":29922}}},{"type":"text","value":", but the type I am intersecting with also has a ","position":{"start":{"line":804,"column":131,"offset":29922},"end":{"line":804,"column":180,"offset":29971}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":804,"column":180,"offset":29971},"end":{"line":804,"column":187,"offset":29978}}},{"type":"text","value":" prop. Here's how to extract that out:","position":{"start":{"line":804,"column":187,"offset":29978},"end":{"line":804,"column":225,"offset":30016}}}],"position":{"start":{"line":804,"column":1,"offset":29792},"end":{"line":804,"column":225,"offset":30016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // this will conflict with the InputElement's label\n}\n\n// this comes inbuilt with TS 3.5\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// usage\nexport const Checkbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, 'label'>) => {\n    const { label } = props;\n    return (\n        <div className=\"Checkbox\">\n            <label className=\"Checkbox-label\">\n                <input type=\"checkbox\" {...props} />\n            </label>\n            <span>{label}</span>\n        </div>\n    );\n};\n"}],"position":{"start":{"line":806,"column":1,"offset":30018},"end":{"line":826,"column":4,"offset":30595}}}],"position":{"start":{"line":806,"column":1,"offset":30018},"end":{"line":826,"column":4,"offset":30595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When your component defines multiple props, chances of those conflicts increase. However you can explicitly state that all your fields should be removed from the underlying component using the ","position":{"start":{"line":828,"column":1,"offset":30597},"end":{"line":828,"column":194,"offset":30790}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"keyof"}],"position":{"start":{"line":828,"column":194,"offset":30790},"end":{"line":828,"column":201,"offset":30797}}},{"type":"text","value":" operator:","position":{"start":{"line":828,"column":201,"offset":30797},"end":{"line":828,"column":211,"offset":30807}}}],"position":{"start":{"line":828,"column":1,"offset":30597},"end":{"line":828,"column":211,"offset":30807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // conflicts with the InputElement's label\n    onChange: (text: string) => void; // conflicts with InputElement's onChange\n}\n\nexport const Textbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, keyof Props>) => {\n    // implement Textbox component ...\n};\n"}],"position":{"start":{"line":830,"column":1,"offset":30809},"end":{"line":839,"column":4,"offset":31138}}}],"position":{"start":{"line":830,"column":1,"offset":30809},"end":{"line":839,"column":4,"offset":31138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see from the Omit example above, you can write significant logic in your types as well. ","position":{"start":{"line":841,"column":1,"offset":31140},"end":{"line":841,"column":100,"offset":31239}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/pelotom/type-zoo"},"children":[{"type":"text","value":"type-zoo","position":{"start":{"line":841,"column":101,"offset":31240},"end":{"line":841,"column":109,"offset":31248}}}],"position":{"start":{"line":841,"column":100,"offset":31239},"end":{"line":841,"column":147,"offset":31286}}},{"type":"text","value":" is a nice toolkit of operators you may wish to check out (includes Omit), as well as ","position":{"start":{"line":841,"column":147,"offset":31286},"end":{"line":841,"column":233,"offset":31372}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/piotrwitek/utility-types"},"children":[{"type":"text","value":"utility-types","position":{"start":{"line":841,"column":234,"offset":31373},"end":{"line":841,"column":247,"offset":31386}}}],"position":{"start":{"line":841,"column":233,"offset":31372},"end":{"line":841,"column":293,"offset":31432}}},{"type":"text","value":" (especially for those migrating from Flow).","position":{"start":{"line":841,"column":293,"offset":31432},"end":{"line":841,"column":337,"offset":31476}}}],"position":{"start":{"line":841,"column":1,"offset":31140},"end":{"line":841,"column":337,"offset":31476}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Extracting Prop Types of a Component","position":{"start":{"line":843,"column":4,"offset":31481},"end":{"line":843,"column":47,"offset":31524}}}],"position":{"start":{"line":843,"column":1,"offset":31478},"end":{"line":843,"column":47,"offset":31524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you want the prop types of a component, but it isn't exported.","position":{"start":{"line":845,"column":1,"offset":31526},"end":{"line":845,"column":73,"offset":31598}}}],"position":{"start":{"line":845,"column":1,"offset":31526},"end":{"line":845,"column":73,"offset":31598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A simple solution is to use ","position":{"start":{"line":847,"column":1,"offset":31600},"end":{"line":847,"column":29,"offset":31628}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentProps"}],"position":{"start":{"line":847,"column":29,"offset":31628},"end":{"line":847,"column":51,"offset":31650}}},{"type":"text","value":":","position":{"start":{"line":847,"column":51,"offset":31650},"end":{"line":847,"column":52,"offset":31651}}}],"position":{"start":{"line":847,"column":1,"offset":31600},"end":{"line":847,"column":52,"offset":31651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// a Modal component defined elsewhere\nconst defaultProps: React.ComponentProps<typeof Modal> = {\n    title: 'Hello World',\n    visible: true,\n    onClick: jest.fn()\n};\n"}],"position":{"start":{"line":849,"column":1,"offset":31653},"end":{"line":856,"column":4,"offset":31832}}}],"position":{"start":{"line":849,"column":1,"offset":31653},"end":{"line":856,"column":4,"offset":31832}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are advanced edge cases if you want to extract the prop types of a component taking into account internal props, ","position":{"start":{"line":858,"column":1,"offset":31834},"end":{"line":858,"column":120,"offset":31953}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"propTypes"}],"position":{"start":{"line":858,"column":120,"offset":31953},"end":{"line":858,"column":131,"offset":31964}}},{"type":"text","value":", and ","position":{"start":{"line":858,"column":131,"offset":31964},"end":{"line":858,"column":137,"offset":31970}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"defaultProps"}],"position":{"start":{"line":858,"column":137,"offset":31970},"end":{"line":858,"column":151,"offset":31984}}},{"type":"text","value":" - ","position":{"start":{"line":858,"column":151,"offset":31984},"end":{"line":858,"column":154,"offset":31987}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/63"},"children":[{"type":"text","value":"check our issue here for helper utilities that resolve these","position":{"start":{"line":858,"column":155,"offset":31988},"end":{"line":858,"column":215,"offset":32048}}}],"position":{"start":{"line":858,"column":154,"offset":31987},"end":{"line":858,"column":275,"offset":32108}}},{"type":"text","value":".","position":{"start":{"line":858,"column":275,"offset":32108},"end":{"line":858,"column":276,"offset":32109}}}],"position":{"start":{"line":858,"column":1,"offset":31834},"end":{"line":858,"column":276,"offset":32109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Render Props","position":{"start":{"line":860,"column":4,"offset":32114},"end":{"line":860,"column":23,"offset":32133}}}],"position":{"start":{"line":860,"column":1,"offset":32111},"end":{"line":860,"column":23,"offset":32133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advice: Where possible, you should try to use Hooks instead of Render Props. We include this merely for completeness.","position":{"start":{"line":862,"column":3,"offset":32137},"end":{"line":862,"column":120,"offset":32254}}}],"position":{"start":{"line":862,"column":3,"offset":32137},"end":{"line":862,"column":120,"offset":32254}}},{"type":"text","value":"\n"}],"position":{"start":{"line":862,"column":1,"offset":32135},"end":{"line":862,"column":120,"offset":32254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you will want to write a function that can take a React element or a string or something else as a prop. The best Type to use for such a situation is ","position":{"start":{"line":864,"column":1,"offset":32256},"end":{"line":864,"column":161,"offset":32416}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ReactNode"}],"position":{"start":{"line":864,"column":161,"offset":32416},"end":{"line":864,"column":178,"offset":32433}}},{"type":"text","value":" which fits anywhere a normal, well, React Node would fit:","position":{"start":{"line":864,"column":178,"offset":32433},"end":{"line":864,"column":236,"offset":32491}}}],"position":{"start":{"line":864,"column":1,"offset":32256},"end":{"line":864,"column":236,"offset":32491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label?: React.ReactNode;\n    children: React.ReactNode;\n}\nexport const Card = (props: Props) => {\n    return (\n        <div>\n            {props.label && <div>{props.label}</div>}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":866,"column":1,"offset":32493},"end":{"line":879,"column":4,"offset":32765}}}],"position":{"start":{"line":866,"column":1,"offset":32493},"end":{"line":879,"column":4,"offset":32765}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are using a function-as-a-child render prop:","position":{"start":{"line":881,"column":1,"offset":32767},"end":{"line":881,"column":52,"offset":32818}}}],"position":{"start":{"line":881,"column":1,"offset":32767},"end":{"line":881,"column":52,"offset":32818}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    children: (foo: string) => React.ReactNode;\n}\n"}],"position":{"start":{"line":883,"column":1,"offset":32820},"end":{"line":887,"column":4,"offset":32905}}}],"position":{"start":{"line":883,"column":1,"offset":32820},"end":{"line":887,"column":4,"offset":32905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose"},"children":[{"type":"text","value":"Something to add? File an issue","position":{"start":{"line":889,"column":2,"offset":32908},"end":{"line":889,"column":33,"offset":32939}}}],"position":{"start":{"line":889,"column":1,"offset":32907},"end":{"line":889,"column":123,"offset":33029}}},{"type":"text","value":".","position":{"start":{"line":889,"column":123,"offset":33029},"end":{"line":889,"column":124,"offset":33030}}}],"position":{"start":{"line":889,"column":1,"offset":32907},"end":{"line":889,"column":124,"offset":33030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling Exceptions","position":{"start":{"line":891,"column":4,"offset":33035},"end":{"line":891,"column":23,"offset":33054}}}],"position":{"start":{"line":891,"column":1,"offset":33032},"end":{"line":891,"column":23,"offset":33054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can provide good information when bad things happen.","position":{"start":{"line":893,"column":1,"offset":33056},"end":{"line":893,"column":57,"offset":33112}}}],"position":{"start":{"line":893,"column":1,"offset":33056},"end":{"line":893,"column":57,"offset":33112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"class InvalidDateFormatError extends RangeError {}\nclass DateIsInFutureError extends RangeError {}\n\n/**\n * // optional docblock\n * @throws {InvalidDateFormatError} The user entered date incorrectly\n * @throws {DateIsInFutureError} The user entered date in future\n *\n */\nfunction parse(date: string) {\n    if (!isValid(date)) throw new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) throw new DateIsInFutureError('date is in the future');\n    // ...\n}\n\ntry {\n    // call parse(date) somewhere\n} catch (e) {\n    if (e instanceof InvalidDateFormatError) {\n        console.error('invalid date format', e);\n    } else if (e instanceof DateIsInFutureError) {\n        console.warn('date is in future', e);\n    } else {\n        throw e;\n    }\n}\n"}],"position":{"start":{"line":895,"column":1,"offset":33114},"end":{"line":922,"column":4,"offset":33890}}}],"position":{"start":{"line":895,"column":1,"offset":33114},"end":{"line":922,"column":4,"offset":33890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BJAOwDcVrgATAERRhIAYtBACAolBxQ4SAB6CW3RghQsA5kknS4AbwC+VWgzj9BTOqyEBXGNaLboshUiUq1mxzIMUKmaywYwBAscMB0AGqcPAAU3AJIAFxwdDBQwBoAlHoUcHBEdlCh8YJwAPxwadZIcMmYnHRIANwUhpTk-oEwwaHhVrb2SHEJyanpWTnkeWghqXAlSAByEADucAC8cCxIa2ZDmS1TcDMsc2j2RCwwextbO6YJw4KZuXCvBfah51Ku1wkAdJoYAAVUD7OAAPnmCWWK0BSBBYJiB1avnIAHoAFSY3KYuDo9FwCBgbohTjzCBoABG1EpAGtcXAAAIwAAWOBWjF0rA4XD4CREUDEMC8+jgwNZNWsjRkvyQRG40NKGRmPww1AAnoyWezVly9hZ+oUtFJoGKJVKZbIrvKkIqFmFQv5jbjcei-AEgiE4GAUFBGk8kik0hl1NldK9gJg4DEAIThKJ8wOZF5HPJsjl3NY86L8wSC4VeGIAIhYEHgKDgvJ4SpqmFEAmLKKOUZjfRYNmNyeyGdWWYe5ksHYGDlNUBLDvCjsqkrgzsGTcOeQJcH+a9R7TSGsmy8JaE41B9foDC2ydFwO0lRFaxwEaFZMaQ4cj0ZiNQyqTUaCQEGjOb5ewFhIY7PmmxyzBA1BIP88rSCWGTVvaCRzg2MDFgANLIzZ5GKSDUI0YSvu+pwwF+P7RgaQ6doMXigXk0wQVB-wrH6LATshU4ZHOI5IBhWFLnAuH4TUEZgb2azNK8bT6EAA"},"children":[{"type":"text","value":"View in TypeScript Playground","position":{"start":{"line":924,"column":2,"offset":33893},"end":{"line":924,"column":31,"offset":33922}}}],"position":{"start":{"line":924,"column":1,"offset":33892},"end":{"line":924,"column":904,"offset":34795}}}],"position":{"start":{"line":924,"column":1,"offset":33892},"end":{"line":924,"column":904,"offset":34795}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Simply throwing an exception is fine, however it would be nice to make TypeScript remind the consumer of your code to handle your exception. We can do that just by returning instead of throwing:","position":{"start":{"line":926,"column":1,"offset":34797},"end":{"line":926,"column":195,"offset":34991}}}],"position":{"start":{"line":926,"column":1,"offset":34797},"end":{"line":926,"column":195,"offset":34991}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function parse(date: string): Date | InvalidDateFormatError | DateIsInFutureError {\n    if (!isValid(date)) return new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) return new DateIsInFutureError('date is in the future');\n    // ...\n}\n\n// now consumer *has* to handle the errors\nlet result = parse('mydate');\nif (result instanceof InvalidDateFormatError) {\n    console.error('invalid date format', result.message);\n} else if (result instanceof DateIsInFutureError) {\n    console.warn('date is in future', result.message);\n} else {\n    /// use result safely\n}\n\n// alternately you can just handle all errors\nif (result instanceof Error) {\n    console.error('error', result);\n} else {\n    /// use result safely\n}\n"}],"position":{"start":{"line":928,"column":1,"offset":34993},"end":{"line":951,"column":4,"offset":35743}}}],"position":{"start":{"line":928,"column":1,"offset":34993},"end":{"line":951,"column":4,"offset":35743}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also describe exceptions with special-purpose data types (don't say monads...) like the ","position":{"start":{"line":953,"column":1,"offset":35745},"end":{"line":953,"column":97,"offset":35841}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Try"}],"position":{"start":{"line":953,"column":97,"offset":35841},"end":{"line":953,"column":102,"offset":35846}}},{"type":"text","value":", ","position":{"start":{"line":953,"column":102,"offset":35846},"end":{"line":953,"column":104,"offset":35848}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option"}],"position":{"start":{"line":953,"column":104,"offset":35848},"end":{"line":953,"column":112,"offset":35856}}},{"type":"text","value":" (or ","position":{"start":{"line":953,"column":112,"offset":35856},"end":{"line":953,"column":117,"offset":35861}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Maybe"}],"position":{"start":{"line":953,"column":117,"offset":35861},"end":{"line":953,"column":124,"offset":35868}}},{"type":"text","value":"), and ","position":{"start":{"line":953,"column":124,"offset":35868},"end":{"line":953,"column":131,"offset":35875}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Either"}],"position":{"start":{"line":953,"column":131,"offset":35875},"end":{"line":953,"column":139,"offset":35883}}},{"type":"text","value":" data types:","position":{"start":{"line":953,"column":139,"offset":35883},"end":{"line":953,"column":151,"offset":35895}}}],"position":{"start":{"line":953,"column":1,"offset":35745},"end":{"line":953,"column":151,"offset":35895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"interface Option<T> {\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Option<U>): FormikOption<U>;\n    getOrElse(value: T): T;\n}\nclass Some<T> implements Option<T> {\n    constructor(private value: T) {}\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Some<U>): Some<U>;\n    flatMap<U>(f: (value: T) => Option<U>): Option<U> {\n        return f(this.value);\n    }\n    getOrElse(): T {\n        return this.value;\n    }\n}\nclass None implements Option<never> {\n    flatMap<U>(): None {\n        return this;\n    }\n    getOrElse<U>(value: U): U {\n        return value;\n    }\n}\n\n// now you can use it like:\nlet result = Option(6) // Some<number>\n    .flatMap((n) => Option(n * 3)) // Some<number>\n    .flatMap((n = new None())) // None\n    .getOrElse(7);\n\n// or:\nlet result = ask() // Option<string>\n    .flatMap(parse) // Option<Date>\n    .flatMap((d) => new Some(d.toISOString())) // Option<string>\n    .getOrElse('error parsing string');\n"}],"position":{"start":{"line":955,"column":1,"offset":35897},"end":{"line":992,"column":4,"offset":36897}}}],"position":{"start":{"line":955,"column":1,"offset":35897},"end":{"line":992,"column":4,"offset":36897}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":993,"column":1,"offset":36898}}}}