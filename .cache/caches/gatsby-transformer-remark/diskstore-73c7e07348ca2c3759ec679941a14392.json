{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-41769cf1c04699408ed9edcf95c51e77--","val":"<h1>Rendering Elements\n\n</h1>\n<p>Elements are the smallest building blocks of React apps.</p>\n<p>An element describes what you want to see on the screen:</p>\n<p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>One might confuse elements with a more widely known concept of \"components\". We will introduce components in the <a href=\"https://reactjs.org/docs/components-and-props.html\">next section</a>. Elements are what components are \"made of\", and we encourage you to read this section before jumping ahead.</p>\n</blockquote>\n<h2>Rendering an Element into the DOM</h2>\n<p>Let's say there is a &#x3C;div> somewhere in your HTML file:</p>\n<p>We call this a \"root\" DOM node because everything inside it will be managed by React DOM.</p>\n<p>Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</p>\n<p>To render a React element into a root DOM node, pass both to <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a>:</p>\n<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/render-an-element\">Try it on CodePen</a></p>\n<p>It displays \"Hello, world\" on the page.</p>\n<h2>Updating the Rendered Element</h2>\n<p>React elements are <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a>. Once you create an element, you can't change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.</p>\n<p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a>.</p>\n<p>Consider this ticking clock example:</p>\n<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">Try it on CodePen</a></p>\n<p>It calls <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a> every second from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">setInterval()</a> callback.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>In practice, most React apps only call <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a> once. In the next sections we will learn how such code gets encapsulated into <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">stateful components</a>.</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>We recommend that you don't skip topics because they build on each other.</p>\n</blockquote>\n<h2>React Only Updates What's Necessary</h2>\n<p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>\n<p>You can verify by inspecting the <a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">last example</a> with the browser tools:</p>\n<p><img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\"></p>\n<p>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.</p>\n<p>In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</p>"}