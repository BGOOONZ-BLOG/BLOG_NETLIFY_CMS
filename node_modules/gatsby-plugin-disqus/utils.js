"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.insertScript = insertScript;
exports.removeScript = removeScript;
exports.debounce = debounce;
exports.isReactElement = isReactElement;
exports.shallowComparison = shallowComparison;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireDefault(require("react"));

function insertScript(src, id, parent) {
  var script = window.document.createElement('script');
  script.async = true;
  script.src = src;
  script.id = id;
  parent.appendChild(script);
  return script;
}

function removeScript(id, parent) {
  var script = window.document.getElementById(id);

  if (script) {
    parent.removeChild(script);
  }
}

function debounce(func, wait, runOnFirstCall) {
  var timeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var context = this;

    var deferredExecution = function deferredExecution() {
      timeout = null;

      if (!runOnFirstCall) {
        func.apply(context, args);
      }
    };

    var callNow = runOnFirstCall && !timeout;
    window.clearTimeout(timeout);
    timeout = setTimeout(deferredExecution, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };
}

function isReactElement(element) {
  if ( /*#__PURE__*/_react.default.isValidElement(element)) {
    return true;
  } else if (Array.isArray(element)) {
    return element.some(function (value) {
      return /*#__PURE__*/_react.default.isValidElement(value);
    });
  }

  return false;
}

function shallowComparison(currentProps, nextProps) {
  var _ref;

  // Perform a comparison of all props, excluding React Elements, to prevent
  // unnecessary updates
  var propNames = new Set(Object.keys(currentProps).concat(Object.keys(nextProps)));

  var changes = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(propNames)).filter(function (name) {
    if (typeof currentProps[name] === 'object') {
      if (shallowComparison(currentProps[name], nextProps[name])) {
        return true;
      }
    } else if (currentProps[name] !== nextProps[name] && !isReactElement(currentProps[name])) {
      return true;
    }

    return false;
  });

  return changes.length !== 0;
}