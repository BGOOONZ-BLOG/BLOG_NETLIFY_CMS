{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-3ec7b1a9d03bbf3dcb09cba3e95fcec0--","val":"<h2>Introduction to npm</h2>\n<p><code>npm</code> is the standard package manager for Node.js.</p>\n<p>In January 2017 over 350000 packages were reported being listed in the npm registry, making it the biggest single language code repository on Earth, and you can be sure there is a package for (almost!) everything.</p>\n<p>It started as a way to download and manage dependencies of Node.js packages, but it has since become a tool used also in frontend JavaScript.</p>\n<p>There are many things that <code>npm</code> does.</p>\n<blockquote>\n<p><a href=\"https://yarnpkg.com/en/\"><strong>Yarn</strong></a> is an alternative to npm. Make sure you check it out as well.</p>\n</blockquote>\n<h2>Downloads</h2>\n<p><code>npm</code> manages downloads of dependencies of your project.</p>\n<h3>Installing all dependencies</h3>\n<p>If a project has a <code>package.json</code> file, by running</p>\n<pre><code class=\"language-bash\">npm install\n</code></pre>\n<p>it will install everything the project needs, in the <code>node_modules</code> folder, creating it if it's not existing already.</p>\n<h3>Installing a single package</h3>\n<p>You can also install a specific package by running</p>\n<pre><code class=\"language-bash\">npm install &#x3C;package-name>\n</code></pre>\n<p>Often you'll see more flags added to this command:</p>\n<ul>\n<li><code>--save</code> installs and adds the entry to the <code>package.json</code> file <em>dependencies</em></li>\n<li><code>--save-dev</code> installs and adds the entry to the <code>package.json</code> file <em>devDependencies</em></li>\n</ul>\n<p>The difference is mainly that devDependencies are usually development tools, like a testing library, while <code>dependencies</code> are bundled with the app in production.</p>\n<h3>Updating packages</h3>\n<p>Updating is also made easy, by running</p>\n<pre><code class=\"language-console\">npm update\n</code></pre>\n<p><code>npm</code> will check all packages for a newer version that satisfies your versioning constraints.</p>\n<p>You can specify a single package to update as well:</p>\n<pre><code class=\"language-console\">npm update &#x3C;package-name>\n</code></pre>\n<h2>Versioning</h2>\n<p>In addition to plain downloads, <code>npm</code> also manages <strong>versioning</strong>, so you can specify any specific version of a package, or require a version higher or lower than what you need.</p>\n<p>Many times you'll find that a library is only compatible with a major release of another library.</p>\n<p>Or a bug in the latest release of a lib, still unfixed, is causing an issue.</p>\n<p>Specifying an explicit version of a library also helps to keep everyone on the same exact version of a package, so that the whole team runs the same version until the <code>package.json</code> file is updated.</p>\n<p>In all those cases, versioning helps a lot, and <code>npm</code> follows the semantic versioning (semver) standard.</p>\n<h2>Running Tasks</h2>\n<p>The package.json file supports a format for specifying command line tasks that can be run by using</p>\n<pre><code class=\"language-console\">npm run &#x3C;task-name>\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"language-json\">{\n    \"scripts\": {\n        \"start-dev\": \"node lib/server-development\",\n        \"start\": \"node lib/server-production\"\n    }\n}\n</code></pre>\n<p>It's very common to use this feature to run Webpack:</p>\n<pre><code class=\"language-json\">{\n    \"scripts\": {\n        \"watch\": \"webpack --watch --progress --colors --config webpack.conf.js\",\n        \"dev\": \"webpack --progress --colors --config webpack.conf.js\",\n        \"prod\": \"NODE_ENV=production webpack -p --config webpack.conf.js\"\n    }\n}\n</code></pre>\n<p>So instead of typing those long commands, which are easy to forget or mistype, you can run</p>\n<pre><code class=\"language-console\">$ npm run watch\n$ npm run dev\n$ npm run prod\n</code></pre>"}