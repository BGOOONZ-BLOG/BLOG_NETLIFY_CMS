{"expireTime":9007200904342770000,"key":"transformer-remark-markdown-html-ast-239318229c2d107c8c84ae4aae587878--","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"JS Fat Arrow Functions","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":26,"offset":26}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":26,"offset":26}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Classical JavaScript function syntax doesn't provide for any flexibility, be that a 1 statement function or an unfortunate multi-page function. Every time you need a function you have to type out the dreaded ","position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":209,"offset":236}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function () {}"}],"position":{"start":{"line":4,"column":209,"offset":236},"end":{"line":4,"column":225,"offset":252}}},{"type":"text","value":". More concise function syntax was one of the many reasons why ","position":{"start":{"line":4,"column":225,"offset":252},"end":{"line":4,"column":288,"offset":315}}},{"type":"element","tagName":"a","properties":{"href":"http://coffeescript.org/"},"children":[{"type":"text","value":"CoffeeScript","position":{"start":{"line":4,"column":289,"offset":316},"end":{"line":4,"column":301,"offset":328}}}],"position":{"start":{"line":4,"column":288,"offset":315},"end":{"line":4,"column":328,"offset":355}}},{"type":"text","value":" gained so much momentum back in the day. This is especially pronounced in the case of tiny callback functions. Lets look at a Promise chain:","position":{"start":{"line":4,"column":328,"offset":355},"end":{"line":4,"column":469,"offset":496}}}],"position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":469,"offset":496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function getVerifiedToken(selector) {\n  return getUsers(selector)\n    .then(function (users) { return users[0]; })\n    .then(verifyUser)\n    .then(function (user, verifiedToken) { return verifiedToken; })\n    .catch(function (err) { log(err.stack); });\n}\n"}],"position":{"start":{"line":6,"column":1,"offset":498},"end":{"line":15,"column":4,"offset":761}}}],"position":{"start":{"line":6,"column":1,"offset":498},"end":{"line":15,"column":4,"offset":761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Above is more or less plausible piece of code written using classical JavaScript ","position":{"start":{"line":17,"column":1,"offset":763},"end":{"line":17,"column":82,"offset":844}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":17,"column":82,"offset":844},"end":{"line":17,"column":92,"offset":854}}},{"type":"text","value":" syntax. Here is what the same code could look like rewritten using the arrow syntax:","position":{"start":{"line":17,"column":92,"offset":854},"end":{"line":17,"column":177,"offset":939}}}],"position":{"start":{"line":17,"column":1,"offset":763},"end":{"line":17,"column":177,"offset":939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function getVerifiedToken(selector) {\n  return getUsers(selector)\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n}\n"}],"position":{"start":{"line":19,"column":1,"offset":941},"end":{"line":28,"column":4,"offset":1153}}}],"position":{"start":{"line":19,"column":1,"offset":941},"end":{"line":28,"column":4,"offset":1153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A few important things to notice here:","position":{"start":{"line":30,"column":1,"offset":1155},"end":{"line":30,"column":39,"offset":1193}}}],"position":{"start":{"line":30,"column":1,"offset":1155},"end":{"line":30,"column":39,"offset":1193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost ","position":{"start":{"line":32,"column":5,"offset":1199},"end":{"line":32,"column":16,"offset":1210}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":32,"column":16,"offset":1210},"end":{"line":32,"column":26,"offset":1220}}},{"type":"text","value":" and ","position":{"start":{"line":32,"column":26,"offset":1220},"end":{"line":32,"column":31,"offset":1225}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":32,"column":31,"offset":1225},"end":{"line":32,"column":35,"offset":1229}}},{"type":"text","value":" because all of our callback functions are one liners.","position":{"start":{"line":32,"column":35,"offset":1229},"end":{"line":32,"column":89,"offset":1283}}}],"position":{"start":{"line":32,"column":1,"offset":1195},"end":{"line":32,"column":89,"offset":1283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost ","position":{"start":{"line":33,"column":5,"offset":1288},"end":{"line":33,"column":16,"offset":1299}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}],"position":{"start":{"line":33,"column":16,"offset":1299},"end":{"line":33,"column":20,"offset":1303}}},{"type":"text","value":" around the argument list when there's just one argument (rest arguments are an exception, eg ","position":{"start":{"line":33,"column":20,"offset":1303},"end":{"line":33,"column":114,"offset":1397}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(...args) => ..."}],"position":{"start":{"line":33,"column":114,"offset":1397},"end":{"line":33,"column":132,"offset":1415}}},{"type":"text","value":")","position":{"start":{"line":33,"column":132,"offset":1415},"end":{"line":33,"column":133,"offset":1416}}}],"position":{"start":{"line":33,"column":1,"offset":1284},"end":{"line":33,"column":133,"offset":1416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost the ","position":{"start":{"line":34,"column":5,"offset":1421},"end":{"line":34,"column":20,"offset":1436}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}],"position":{"start":{"line":34,"column":20,"offset":1436},"end":{"line":34,"column":28,"offset":1444}}},{"type":"text","value":" keyword because when omitting ","position":{"start":{"line":34,"column":28,"offset":1444},"end":{"line":34,"column":59,"offset":1475}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":34,"column":59,"offset":1475},"end":{"line":34,"column":63,"offset":1479}}},{"type":"text","value":", single line arrow functions perform an implicit return (these functions are often referred to as lambda functions in other languages).","position":{"start":{"line":34,"column":63,"offset":1479},"end":{"line":34,"column":199,"offset":1615}}}],"position":{"start":{"line":34,"column":1,"offset":1417},"end":{"line":34,"column":199,"offset":1615}}},{"type":"text","value":"\n"}],"position":{"start":{"line":32,"column":1,"offset":1195},"end":{"line":34,"column":199,"offset":1615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's important to reinforce the last point. Implicit return only happens for single statement arrow functions. When arrow function is declared with ","position":{"start":{"line":36,"column":1,"offset":1617},"end":{"line":36,"column":149,"offset":1765}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":36,"column":149,"offset":1765},"end":{"line":36,"column":153,"offset":1769}}},{"type":"text","value":", even if it's a single statement, implicit return does not happen:","position":{"start":{"line":36,"column":153,"offset":1769},"end":{"line":36,"column":220,"offset":1836}}}],"position":{"start":{"line":36,"column":1,"offset":1617},"end":{"line":36,"column":220,"offset":1836}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const getVerifiedToken = selector => {\n  return getUsers()\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n}\n"}],"position":{"start":{"line":38,"column":1,"offset":1838},"end":{"line":47,"column":4,"offset":2043}}}],"position":{"start":{"line":38,"column":1,"offset":1838},"end":{"line":47,"column":4,"offset":2043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's the really fun bit. Because our function has only one statement, we can still get rid of the ","position":{"start":{"line":49,"column":1,"offset":2045},"end":{"line":49,"column":101,"offset":2145}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":49,"column":101,"offset":2145},"end":{"line":49,"column":105,"offset":2149}}},{"type":"text","value":" and it will look almost exactly like ","position":{"start":{"line":49,"column":105,"offset":2149},"end":{"line":49,"column":143,"offset":2187}}},{"type":"element","tagName":"a","properties":{"href":"http://coffeescript.org/"},"children":[{"type":"text","value":"CoffeeScript","position":{"start":{"line":49,"column":144,"offset":2188},"end":{"line":49,"column":156,"offset":2200}}}],"position":{"start":{"line":49,"column":143,"offset":2187},"end":{"line":49,"column":183,"offset":2227}}},{"type":"text","value":" syntax:","position":{"start":{"line":49,"column":183,"offset":2227},"end":{"line":49,"column":191,"offset":2235}}}],"position":{"start":{"line":49,"column":1,"offset":2045},"end":{"line":49,"column":191,"offset":2235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const getVerifiedToken = selector =>\n  getUsers()\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n"}],"position":{"start":{"line":51,"column":1,"offset":2237},"end":{"line":59,"column":4,"offset":2431}}}],"position":{"start":{"line":51,"column":1,"offset":2237},"end":{"line":59,"column":4,"offset":2431}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Yep, the example above is completely valid ES2015 syntax (I was also surprised that it ","position":{"start":{"line":61,"column":1,"offset":2433},"end":{"line":61,"column":88,"offset":2520}}},{"type":"element","tagName":"a","properties":{"href":"http://babeljs.io/repl/#?"},"children":[{"type":"text","value":"compiles fine","position":{"start":{"line":61,"column":89,"offset":2521},"end":{"line":61,"column":102,"offset":2534}}}],"position":{"start":{"line":61,"column":88,"offset":2520},"end":{"line":61,"column":130,"offset":2562}}},{"type":"text","value":"). When we talk about single statement arrow functions, it doesn't mean the statement can't be spread out to multiple lines for better comprehension.","position":{"start":{"line":61,"column":130,"offset":2562},"end":{"line":61,"column":279,"offset":2711}}}],"position":{"start":{"line":61,"column":1,"offset":2433},"end":{"line":61,"column":279,"offset":2711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There's one caveat, however, with omitting ","position":{"start":{"line":63,"column":1,"offset":2713},"end":{"line":63,"column":44,"offset":2756}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":63,"column":44,"offset":2756},"end":{"line":63,"column":48,"offset":2760}}},{"type":"text","value":" from arrow functions -- how do you return an empty object, eg ","position":{"start":{"line":63,"column":48,"offset":2760},"end":{"line":63,"column":111,"offset":2823}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":63,"column":111,"offset":2823},"end":{"line":63,"column":115,"offset":2827}}},{"type":"text","value":"?","position":{"start":{"line":63,"column":115,"offset":2827},"end":{"line":63,"column":116,"offset":2828}}}],"position":{"start":{"line":63,"column":1,"offset":2713},"end":{"line":63,"column":116,"offset":2828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const emptyObject = () => {};\nemptyObject(); // ?\n"}],"position":{"start":{"line":65,"column":1,"offset":2830},"end":{"line":69,"column":4,"offset":2888}}}],"position":{"start":{"line":65,"column":1,"offset":2830},"end":{"line":69,"column":4,"offset":2888}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately there's no way to distinguish between empty block ","position":{"start":{"line":71,"column":1,"offset":2890},"end":{"line":71,"column":65,"offset":2954}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":71,"column":65,"offset":2954},"end":{"line":71,"column":69,"offset":2958}}},{"type":"text","value":" and an object ","position":{"start":{"line":71,"column":69,"offset":2958},"end":{"line":71,"column":84,"offset":2973}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":71,"column":84,"offset":2973},"end":{"line":71,"column":88,"offset":2977}}},{"type":"text","value":". Because of that ","position":{"start":{"line":71,"column":88,"offset":2977},"end":{"line":71,"column":106,"offset":2995}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"emptyObject()"}],"position":{"start":{"line":71,"column":106,"offset":2995},"end":{"line":71,"column":121,"offset":3010}}},{"type":"text","value":" evaluates to ","position":{"start":{"line":71,"column":121,"offset":3010},"end":{"line":71,"column":135,"offset":3024}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"undefined"}],"position":{"start":{"line":71,"column":135,"offset":3024},"end":{"line":71,"column":146,"offset":3035}}},{"type":"text","value":" and ","position":{"start":{"line":71,"column":146,"offset":3035},"end":{"line":71,"column":151,"offset":3040}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":71,"column":151,"offset":3040},"end":{"line":71,"column":155,"offset":3044}}},{"type":"text","value":" interpreted as empty block. To return an empty object from fat arrow functions you have to surround it with brackets like so ","position":{"start":{"line":71,"column":155,"offset":3044},"end":{"line":71,"column":281,"offset":3170}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"({})"}],"position":{"start":{"line":71,"column":281,"offset":3170},"end":{"line":71,"column":287,"offset":3176}}},{"type":"text","value":":","position":{"start":{"line":71,"column":287,"offset":3176},"end":{"line":71,"column":288,"offset":3177}}}],"position":{"start":{"line":71,"column":1,"offset":2890},"end":{"line":71,"column":288,"offset":3177}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const emptyObject = () => ({});\nemptyObject(); // {}\n"}],"position":{"start":{"line":73,"column":1,"offset":3179},"end":{"line":77,"column":4,"offset":3240}}}],"position":{"start":{"line":73,"column":1,"offset":3179},"end":{"line":77,"column":4,"offset":3240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's all of the above together:","position":{"start":{"line":79,"column":1,"offset":3242},"end":{"line":79,"column":34,"offset":3275}}}],"position":{"start":{"line":79,"column":1,"offset":3242},"end":{"line":79,"column":34,"offset":3275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function () { return 1; }\n() => { return 1; }\n() => 1\n\nfunction (a) { return a * 2; }\n(a) => { return a * 2; }\n(a) => a * 2\na => a * 2\n\nfunction (a, b) { return a * b; }\n(a, b) => { return a * b; }\n(a, b) => a * b\n\nfunction () { return arguments[0]; }\n(...args) => args[0]\n\n() => {} // undefined\n() => ({}) // {}\n"}],"position":{"start":{"line":81,"column":1,"offset":3277},"end":{"line":101,"column":4,"offset":3598}}}],"position":{"start":{"line":81,"column":1,"offset":3277},"end":{"line":101,"column":4,"offset":3598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Lexical ","position":{"start":{"line":103,"column":4,"offset":3603},"end":{"line":103,"column":12,"offset":3611}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":103,"column":12,"offset":3611},"end":{"line":103,"column":18,"offset":3617}}}],"position":{"start":{"line":103,"column":1,"offset":3600},"end":{"line":103,"column":18,"offset":3617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The story of clobbering ","position":{"start":{"line":105,"column":1,"offset":3619},"end":{"line":105,"column":25,"offset":3643}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":105,"column":25,"offset":3643},"end":{"line":105,"column":31,"offset":3649}}},{"type":"text","value":" in JavaScript is a really old one. Each ","position":{"start":{"line":105,"column":31,"offset":3649},"end":{"line":105,"column":72,"offset":3690}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":105,"column":72,"offset":3690},"end":{"line":105,"column":82,"offset":3700}}},{"type":"text","value":" in JavaScript defines its own ","position":{"start":{"line":105,"column":82,"offset":3700},"end":{"line":105,"column":113,"offset":3731}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":105,"column":113,"offset":3731},"end":{"line":105,"column":119,"offset":3737}}},{"type":"text","value":" context, which is as easy to get around as it is annoying. The example below tries to display a clock that updates every second using jQuery:","position":{"start":{"line":105,"column":119,"offset":3737},"end":{"line":105,"column":261,"offset":3879}}}],"position":{"start":{"line":105,"column":1,"offset":3619},"end":{"line":105,"column":261,"offset":3879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  setInterval(function () {\n    $(this).text(Date.now());\n  }, 1000);\n});\n"}],"position":{"start":{"line":107,"column":1,"offset":3881},"end":{"line":114,"column":4,"offset":4001}}}],"position":{"start":{"line":107,"column":1,"offset":3881},"end":{"line":114,"column":4,"offset":4001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When attempting to reference the DOM element ","position":{"start":{"line":116,"column":1,"offset":4003},"end":{"line":116,"column":46,"offset":4048}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":116,"column":46,"offset":4048},"end":{"line":116,"column":52,"offset":4054}}},{"type":"text","value":" set by ","position":{"start":{"line":116,"column":52,"offset":4054},"end":{"line":116,"column":60,"offset":4062}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"each"}],"position":{"start":{"line":116,"column":60,"offset":4062},"end":{"line":116,"column":66,"offset":4068}}},{"type":"text","value":" in the ","position":{"start":{"line":116,"column":66,"offset":4068},"end":{"line":116,"column":74,"offset":4076}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setInterval"}],"position":{"start":{"line":116,"column":74,"offset":4076},"end":{"line":116,"column":87,"offset":4089}}},{"type":"text","value":" callback, we unfortunately get a brand new ","position":{"start":{"line":116,"column":87,"offset":4089},"end":{"line":116,"column":131,"offset":4133}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":116,"column":131,"offset":4133},"end":{"line":116,"column":137,"offset":4139}}},{"type":"text","value":" that belongs to the callback itself. A common way around this is to declare ","position":{"start":{"line":116,"column":137,"offset":4139},"end":{"line":116,"column":214,"offset":4216}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"that"}],"position":{"start":{"line":116,"column":214,"offset":4216},"end":{"line":116,"column":220,"offset":4222}}},{"type":"text","value":" or ","position":{"start":{"line":116,"column":220,"offset":4222},"end":{"line":116,"column":224,"offset":4226}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}],"position":{"start":{"line":116,"column":224,"offset":4226},"end":{"line":116,"column":230,"offset":4232}}},{"type":"text","value":" variable:","position":{"start":{"line":116,"column":230,"offset":4232},"end":{"line":116,"column":240,"offset":4242}}}],"position":{"start":{"line":116,"column":1,"offset":4003},"end":{"line":116,"column":240,"offset":4242}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  var self = this;\n\n  setInterval(function () {\n    $(self).text(Date.now());\n  }, 1000);\n});\n"}],"position":{"start":{"line":118,"column":1,"offset":4244},"end":{"line":127,"column":4,"offset":4384}}}],"position":{"start":{"line":118,"column":1,"offset":4244},"end":{"line":127,"column":4,"offset":4384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The fat arrow functions allow you to solve this problem because they don't introduce their own ","position":{"start":{"line":129,"column":1,"offset":4386},"end":{"line":129,"column":96,"offset":4481}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":129,"column":96,"offset":4481},"end":{"line":129,"column":102,"offset":4487}}},{"type":"text","value":":","position":{"start":{"line":129,"column":102,"offset":4487},"end":{"line":129,"column":103,"offset":4488}}}],"position":{"start":{"line":129,"column":1,"offset":4386},"end":{"line":129,"column":103,"offset":4488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  setInterval(() => $(this).text(Date.now()), 1000);\n});\n"}],"position":{"start":{"line":131,"column":1,"offset":4490},"end":{"line":136,"column":4,"offset":4593}}}],"position":{"start":{"line":131,"column":1,"offset":4490},"end":{"line":136,"column":4,"offset":4593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"What about arguments?","position":{"start":{"line":138,"column":4,"offset":4598},"end":{"line":138,"column":25,"offset":4619}}}],"position":{"start":{"line":138,"column":1,"offset":4595},"end":{"line":138,"column":25,"offset":4619}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One of the caveats with arrow functions is that they also don't have their own ","position":{"start":{"line":140,"column":1,"offset":4621},"end":{"line":140,"column":80,"offset":4700}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"arguments"}],"position":{"start":{"line":140,"column":80,"offset":4700},"end":{"line":140,"column":91,"offset":4711}}},{"type":"text","value":" variable like regular functions:","position":{"start":{"line":140,"column":91,"offset":4711},"end":{"line":140,"column":124,"offset":4744}}}],"position":{"start":{"line":140,"column":1,"offset":4621},"end":{"line":140,"column":124,"offset":4744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function log(msg) {\n  const print = () => console.log(arguments[0]);\n  print(`LOG: ${msg}`);\n}\n\nlog('hello'); // hello\n"}],"position":{"start":{"line":142,"column":1,"offset":4746},"end":{"line":150,"column":4,"offset":4873}}}],"position":{"start":{"line":142,"column":1,"offset":4746},"end":{"line":150,"column":4,"offset":4873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To reiterate, fat arrow functions don't have their own ","position":{"start":{"line":152,"column":1,"offset":4875},"end":{"line":152,"column":56,"offset":4930}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":152,"column":56,"offset":4930},"end":{"line":152,"column":62,"offset":4936}}},{"type":"text","value":" and ","position":{"start":{"line":152,"column":62,"offset":4936},"end":{"line":152,"column":67,"offset":4941}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"arguments"}],"position":{"start":{"line":152,"column":67,"offset":4941},"end":{"line":152,"column":78,"offset":4952}}},{"type":"text","value":". Having said that, you can still get all arguments passed into the arrow functions using rest parameters (also known as spread operator):","position":{"start":{"line":152,"column":78,"offset":4952},"end":{"line":152,"column":216,"offset":5090}}}],"position":{"start":{"line":152,"column":1,"offset":4875},"end":{"line":152,"column":216,"offset":5090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function log(msg) {\n  const print = (...args) => console.log(args[0]);\n  print(`LOG: ${msg}`);\n}\n\nlog('hello'); // LOG: hello\n"}],"position":{"start":{"line":154,"column":1,"offset":5092},"end":{"line":162,"column":4,"offset":5226}}}],"position":{"start":{"line":154,"column":1,"offset":5092},"end":{"line":162,"column":4,"offset":5226}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"What about yield?","position":{"start":{"line":164,"column":4,"offset":5231},"end":{"line":164,"column":21,"offset":5248}}}],"position":{"start":{"line":164,"column":1,"offset":5228},"end":{"line":164,"column":21,"offset":5248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fat arrow functions can't be used as generators. That's it -- no exceptions, no caveats and no workarounds.","position":{"start":{"line":166,"column":1,"offset":5250},"end":{"line":166,"column":108,"offset":5357}}}],"position":{"start":{"line":166,"column":1,"offset":5250},"end":{"line":166,"column":108,"offset":5357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Bottom Line","position":{"start":{"line":168,"column":4,"offset":5362},"end":{"line":168,"column":15,"offset":5373}}}],"position":{"start":{"line":168,"column":1,"offset":5359},"end":{"line":168,"column":15,"offset":5373}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fat arrow functions are one of my favorite additions to JavaScript. It might be very tempting to just start using ","position":{"start":{"line":170,"column":1,"offset":5375},"end":{"line":170,"column":115,"offset":5489}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":170,"column":115,"offset":5489},"end":{"line":170,"column":119,"offset":5493}}},{"type":"text","value":" instead of ","position":{"start":{"line":170,"column":119,"offset":5493},"end":{"line":170,"column":131,"offset":5505}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":170,"column":131,"offset":5505},"end":{"line":170,"column":141,"offset":5515}}},{"type":"text","value":" everywhere. I've seen whole libraries written just using ","position":{"start":{"line":170,"column":141,"offset":5515},"end":{"line":170,"column":199,"offset":5573}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":170,"column":199,"offset":5573},"end":{"line":170,"column":203,"offset":5577}}},{"type":"text","value":" and I don't think it's the right thing to do because of the special features that ","position":{"start":{"line":170,"column":203,"offset":5577},"end":{"line":170,"column":286,"offset":5660}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":170,"column":286,"offset":5660},"end":{"line":170,"column":290,"offset":5664}}},{"type":"text","value":" introduces. I recommend using arrow functions only in places where you explicitly want to use the new features:","position":{"start":{"line":170,"column":290,"offset":5664},"end":{"line":170,"column":402,"offset":5776}}}],"position":{"start":{"line":170,"column":1,"offset":5375},"end":{"line":170,"column":402,"offset":5776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Single statement functions that immediately return (lambdas)","position":{"start":{"line":172,"column":3,"offset":5780},"end":{"line":172,"column":63,"offset":5840}}}],"position":{"start":{"line":172,"column":1,"offset":5778},"end":{"line":172,"column":63,"offset":5840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Functions that need to work with parent scope ","position":{"start":{"line":173,"column":3,"offset":5843},"end":{"line":173,"column":49,"offset":5889}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":173,"column":49,"offset":5889},"end":{"line":173,"column":55,"offset":5895}}}],"position":{"start":{"line":173,"column":1,"offset":5841},"end":{"line":173,"column":55,"offset":5895}}},{"type":"text","value":"\n"}],"position":{"start":{"line":172,"column":1,"offset":5778},"end":{"line":173,"column":55,"offset":5895}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":174,"column":1,"offset":5896}}}}