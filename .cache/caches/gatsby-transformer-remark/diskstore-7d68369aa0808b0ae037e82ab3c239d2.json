{"expireTime":9007200904342769000,"key":"transformer-remark-markdown-ast-3cbbea9130985651fd87671609450238--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Promise.any()","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":16,"offset":33},"indent":[]}},{"type":"text","value":" takes an iterable of ","position":{"start":{"line":4,"column":16,"offset":33},"end":{"line":4,"column":38,"offset":55},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":4,"column":39,"offset":56},"end":{"line":4,"column":48,"offset":65},"indent":[]}}],"position":{"start":{"line":4,"column":38,"offset":55},"end":{"line":4,"column":61,"offset":78},"indent":[]}},{"type":"text","value":" objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill (if all of the given promises are rejected), then the returned promise is rejected with an ","position":{"start":{"line":4,"column":61,"offset":78},"end":{"line":4,"column":335,"offset":352},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":4,"column":336,"offset":353},"end":{"line":4,"column":352,"offset":369},"indent":[]}}],"position":{"start":{"line":4,"column":335,"offset":352},"end":{"line":4,"column":372,"offset":389},"indent":[]}},{"type":"text","value":", a new subclass of ","position":{"start":{"line":4,"column":372,"offset":389},"end":{"line":4,"column":392,"offset":409},"indent":[]}},{"type":"link","title":null,"url":"../error","children":[{"type":"inlineCode","value":"Error","position":{"start":{"line":4,"column":393,"offset":410},"end":{"line":4,"column":400,"offset":417},"indent":[]}}],"position":{"start":{"line":4,"column":392,"offset":409},"end":{"line":4,"column":411,"offset":428},"indent":[]}},{"type":"text","value":" that groups together individual errors. Essentially, this method is the opposite of ","position":{"start":{"line":4,"column":411,"offset":428},"end":{"line":4,"column":496,"offset":513},"indent":[]}},{"type":"link","title":null,"url":"all","children":[{"type":"inlineCode","value":"Promise.all()","position":{"start":{"line":4,"column":497,"offset":514},"end":{"line":4,"column":512,"offset":529},"indent":[]}}],"position":{"start":{"line":4,"column":496,"offset":513},"end":{"line":4,"column":518,"offset":535},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":518,"offset":535},"end":{"line":4,"column":519,"offset":536},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":519,"offset":536},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":6,"column":4,"offset":541},"end":{"line":6,"column":10,"offset":547},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":538},"end":{"line":6,"column":10,"offset":547},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Promise.any(iterable);","position":{"start":{"line":8,"column":1,"offset":549},"end":{"line":8,"column":27,"offset":575},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parameters","position":{"start":{"line":10,"column":5,"offset":581},"end":{"line":10,"column":15,"offset":591},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":577},"end":{"line":10,"column":15,"offset":591},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"iterable","position":{"start":{"line":12,"column":1,"offset":593},"end":{"line":12,"column":11,"offset":603},"indent":[]}},{"type":"text","value":"\nAn ","position":{"start":{"line":12,"column":11,"offset":603},"end":{"line":13,"column":4,"offset":607},"indent":[1]}},{"type":"link","title":null,"url":"../../iteration_protocols#the_iterable_protocol","children":[{"type":"text","value":"iterable","position":{"start":{"line":13,"column":5,"offset":608},"end":{"line":13,"column":13,"offset":616},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":607},"end":{"line":13,"column":63,"offset":666},"indent":[]}},{"type":"text","value":" object, such as an ","position":{"start":{"line":13,"column":63,"offset":666},"end":{"line":13,"column":83,"offset":686},"indent":[]}},{"type":"link","title":null,"url":"../array","children":[{"type":"inlineCode","value":"Array","position":{"start":{"line":13,"column":84,"offset":687},"end":{"line":13,"column":91,"offset":694},"indent":[]}}],"position":{"start":{"line":13,"column":83,"offset":686},"end":{"line":13,"column":102,"offset":705},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":13,"column":102,"offset":705},"end":{"line":13,"column":103,"offset":706},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":593},"end":{"line":13,"column":103,"offset":706},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Return value","position":{"start":{"line":15,"column":5,"offset":712},"end":{"line":15,"column":17,"offset":724},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":708},"end":{"line":15,"column":17,"offset":724},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":17,"column":3,"offset":728},"end":{"line":17,"column":6,"offset":731},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"already rejected","position":{"start":{"line":17,"column":8,"offset":733},"end":{"line":17,"column":24,"offset":749},"indent":[]}}],"position":{"start":{"line":17,"column":6,"offset":731},"end":{"line":17,"column":26,"offset":751},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":17,"column":26,"offset":751},"end":{"line":17,"column":27,"offset":752},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":17,"column":28,"offset":753},"end":{"line":17,"column":37,"offset":762},"indent":[]}}],"position":{"start":{"line":17,"column":27,"offset":752},"end":{"line":17,"column":50,"offset":775},"indent":[]}},{"type":"text","value":" if the iterable passed is empty.","position":{"start":{"line":17,"column":50,"offset":775},"end":{"line":17,"column":83,"offset":808},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":728},"end":{"line":17,"column":83,"offset":808},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":726},"end":{"line":17,"column":83,"offset":808},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":18,"column":3,"offset":811},"end":{"line":18,"column":6,"offset":814},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"asynchronously resolved","position":{"start":{"line":18,"column":8,"offset":816},"end":{"line":18,"column":31,"offset":839},"indent":[]}}],"position":{"start":{"line":18,"column":6,"offset":814},"end":{"line":18,"column":33,"offset":841},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":18,"column":33,"offset":841},"end":{"line":18,"column":34,"offset":842},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":18,"column":35,"offset":843},"end":{"line":18,"column":44,"offset":852},"indent":[]}}],"position":{"start":{"line":18,"column":34,"offset":842},"end":{"line":18,"column":57,"offset":865},"indent":[]}},{"type":"text","value":" if the iterable passed contains no promises.","position":{"start":{"line":18,"column":57,"offset":865},"end":{"line":18,"column":102,"offset":910},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":811},"end":{"line":18,"column":102,"offset":910},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":809},"end":{"line":18,"column":102,"offset":910},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":19,"column":3,"offset":913},"end":{"line":19,"column":5,"offset":915},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"pending","position":{"start":{"line":19,"column":7,"offset":917},"end":{"line":19,"column":14,"offset":924},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":915},"end":{"line":19,"column":16,"offset":926},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":19,"column":16,"offset":926},"end":{"line":19,"column":17,"offset":927},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":19,"column":18,"offset":928},"end":{"line":19,"column":27,"offset":937},"indent":[]}}],"position":{"start":{"line":19,"column":17,"offset":927},"end":{"line":19,"column":40,"offset":950},"indent":[]}},{"type":"text","value":" in all other cases. This returned promise is then resolved/rejected ","position":{"start":{"line":19,"column":40,"offset":950},"end":{"line":19,"column":109,"offset":1019},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"asynchronously","position":{"start":{"line":19,"column":111,"offset":1021},"end":{"line":19,"column":125,"offset":1035},"indent":[]}}],"position":{"start":{"line":19,"column":109,"offset":1019},"end":{"line":19,"column":127,"offset":1037},"indent":[]}},{"type":"text","value":" (as soon as the stack is empty) when any of the promises in the given iterable resolve, or if all the promises have rejected.","position":{"start":{"line":19,"column":127,"offset":1037},"end":{"line":19,"column":253,"offset":1163},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":913},"end":{"line":19,"column":253,"offset":1163},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":911},"end":{"line":19,"column":253,"offset":1163},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":726},"end":{"line":19,"column":253,"offset":1163},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":21,"column":4,"offset":1168},"end":{"line":21,"column":15,"offset":1179},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1165},"end":{"line":21,"column":15,"offset":1179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one. Unlike ","position":{"start":{"line":23,"column":1,"offset":1181},"end":{"line":23,"column":195,"offset":1375},"indent":[]}},{"type":"link","title":null,"url":"all","children":[{"type":"inlineCode","value":"Promise.all()","position":{"start":{"line":23,"column":196,"offset":1376},"end":{"line":23,"column":211,"offset":1391},"indent":[]}}],"position":{"start":{"line":23,"column":195,"offset":1375},"end":{"line":23,"column":217,"offset":1397},"indent":[]}},{"type":"text","value":", which returns an ","position":{"start":{"line":23,"column":217,"offset":1397},"end":{"line":23,"column":236,"offset":1416},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"array","position":{"start":{"line":23,"column":237,"offset":1417},"end":{"line":23,"column":242,"offset":1422},"indent":[]}}],"position":{"start":{"line":23,"column":236,"offset":1416},"end":{"line":23,"column":243,"offset":1423},"indent":[]}},{"type":"text","value":" of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: This method rejects upon receiving an ","position":{"start":{"line":23,"column":243,"offset":1423},"end":{"line":23,"column":503,"offset":1683},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"empty iterable","position":{"start":{"line":23,"column":504,"offset":1684},"end":{"line":23,"column":518,"offset":1698},"indent":[]}}],"position":{"start":{"line":23,"column":503,"offset":1683},"end":{"line":23,"column":519,"offset":1699},"indent":[]}},{"type":"text","value":", since, truthfully, the iterable contains no items that fulfill.","position":{"start":{"line":23,"column":519,"offset":1699},"end":{"line":23,"column":584,"offset":1764},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1181},"end":{"line":23,"column":584,"offset":1764},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, unlike ","position":{"start":{"line":25,"column":1,"offset":1766},"end":{"line":25,"column":14,"offset":1779},"indent":[]}},{"type":"link","title":null,"url":"race","children":[{"type":"inlineCode","value":"Promise.race()","position":{"start":{"line":25,"column":15,"offset":1780},"end":{"line":25,"column":31,"offset":1796},"indent":[]}}],"position":{"start":{"line":25,"column":14,"offset":1779},"end":{"line":25,"column":38,"offset":1803},"indent":[]}},{"type":"text","value":", which returns the first ","position":{"start":{"line":25,"column":38,"offset":1803},"end":{"line":25,"column":64,"offset":1829},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"settled","position":{"start":{"line":25,"column":65,"offset":1830},"end":{"line":25,"column":72,"offset":1837},"indent":[]}}],"position":{"start":{"line":25,"column":64,"offset":1829},"end":{"line":25,"column":73,"offset":1838},"indent":[]}},{"type":"text","value":" value (either fulfillment or rejection), this method returns the first ","position":{"start":{"line":25,"column":73,"offset":1838},"end":{"line":25,"column":145,"offset":1910},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"fulfilled","position":{"start":{"line":25,"column":146,"offset":1911},"end":{"line":25,"column":155,"offset":1920},"indent":[]}}],"position":{"start":{"line":25,"column":145,"offset":1910},"end":{"line":25,"column":156,"offset":1921},"indent":[]}},{"type":"text","value":" value. This method will ignore all rejected promises up until the first promise that fulfils.","position":{"start":{"line":25,"column":156,"offset":1921},"end":{"line":25,"column":250,"offset":2015},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1766},"end":{"line":25,"column":250,"offset":2015},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Fulfillment","position":{"start":{"line":27,"column":5,"offset":2021},"end":{"line":27,"column":16,"offset":2032},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2017},"end":{"line":27,"column":16,"offset":2032},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The returned promise is fulfilled with ","position":{"start":{"line":29,"column":1,"offset":2034},"end":{"line":29,"column":40,"offset":2073},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"the first","position":{"start":{"line":29,"column":42,"offset":2075},"end":{"line":29,"column":51,"offset":2084},"indent":[]}}],"position":{"start":{"line":29,"column":40,"offset":2073},"end":{"line":29,"column":53,"offset":2086},"indent":[]}},{"type":"text","value":" resolved value (or non-promise value) in the iterable passed as the argument, whether or not the other promises have rejected.","position":{"start":{"line":29,"column":53,"offset":2086},"end":{"line":29,"column":180,"offset":2213},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2034},"end":{"line":29,"column":180,"offset":2213},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a nonempty ","position":{"start":{"line":31,"column":3,"offset":2217},"end":{"line":31,"column":17,"offset":2231},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"iterable","position":{"start":{"line":31,"column":18,"offset":2232},"end":{"line":31,"column":26,"offset":2240},"indent":[]}}],"position":{"start":{"line":31,"column":17,"offset":2231},"end":{"line":31,"column":27,"offset":2241},"indent":[]}},{"type":"text","value":" is passed, and ","position":{"start":{"line":31,"column":27,"offset":2241},"end":{"line":31,"column":43,"offset":2257},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"any","position":{"start":{"line":31,"column":45,"offset":2259},"end":{"line":31,"column":48,"offset":2262},"indent":[]}}],"position":{"start":{"line":31,"column":43,"offset":2257},"end":{"line":31,"column":50,"offset":2264},"indent":[]}},{"type":"text","value":" of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.","position":{"start":{"line":31,"column":50,"offset":2264},"end":{"line":31,"column":166,"offset":2380},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":2217},"end":{"line":31,"column":166,"offset":2380},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2215},"end":{"line":31,"column":166,"offset":2380},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2215},"end":{"line":31,"column":166,"offset":2380},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rejection","position":{"start":{"line":33,"column":5,"offset":2386},"end":{"line":33,"column":14,"offset":2395},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2382},"end":{"line":33,"column":14,"offset":2395},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If all of the passed-in promises reject, ","position":{"start":{"line":35,"column":1,"offset":2397},"end":{"line":35,"column":42,"offset":2438},"indent":[]}},{"type":"inlineCode","value":"Promise.any","position":{"start":{"line":35,"column":42,"offset":2438},"end":{"line":35,"column":55,"offset":2451},"indent":[]}},{"type":"text","value":" asynchronously rejects with an ","position":{"start":{"line":35,"column":55,"offset":2451},"end":{"line":35,"column":87,"offset":2483},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":35,"column":88,"offset":2484},"end":{"line":35,"column":104,"offset":2500},"indent":[]}}],"position":{"start":{"line":35,"column":87,"offset":2483},"end":{"line":35,"column":124,"offset":2520},"indent":[]}},{"type":"text","value":" object, which extends ","position":{"start":{"line":35,"column":124,"offset":2520},"end":{"line":35,"column":147,"offset":2543},"indent":[]}},{"type":"link","title":null,"url":"../error","children":[{"type":"inlineCode","value":"Error","position":{"start":{"line":35,"column":148,"offset":2544},"end":{"line":35,"column":155,"offset":2551},"indent":[]}}],"position":{"start":{"line":35,"column":147,"offset":2543},"end":{"line":35,"column":166,"offset":2562},"indent":[]}},{"type":"text","value":", and contains an ","position":{"start":{"line":35,"column":166,"offset":2562},"end":{"line":35,"column":184,"offset":2580},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":35,"column":184,"offset":2580},"end":{"line":35,"column":192,"offset":2588},"indent":[]}},{"type":"text","value":" property with an array of rejection values.","position":{"start":{"line":35,"column":192,"offset":2588},"end":{"line":35,"column":236,"offset":2632},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2397},"end":{"line":35,"column":236,"offset":2632},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If an empty iterable is passed, then the promise returned by this method is rejected synchronously. The rejected reason is an ","position":{"start":{"line":37,"column":3,"offset":2636},"end":{"line":37,"column":129,"offset":2762},"indent":[]}},{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":37,"column":129,"offset":2762},"end":{"line":37,"column":145,"offset":2778},"indent":[]}},{"type":"text","value":" object whose ","position":{"start":{"line":37,"column":145,"offset":2778},"end":{"line":37,"column":159,"offset":2792},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":37,"column":159,"offset":2792},"end":{"line":37,"column":167,"offset":2800},"indent":[]}},{"type":"text","value":" property is an empty array.","position":{"start":{"line":37,"column":167,"offset":2800},"end":{"line":37,"column":195,"offset":2828},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2636},"end":{"line":37,"column":195,"offset":2828},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2634},"end":{"line":37,"column":195,"offset":2828},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2634},"end":{"line":37,"column":195,"offset":2828},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":39,"column":4,"offset":2833},"end":{"line":39,"column":12,"offset":2841},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2830},"end":{"line":39,"column":12,"offset":2841},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"First to fulfil","position":{"start":{"line":41,"column":5,"offset":2847},"end":{"line":41,"column":20,"offset":2862},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2843},"end":{"line":41,"column":20,"offset":2862},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":43,"column":1,"offset":2864},"end":{"line":43,"column":16,"offset":2879},"indent":[]}},{"type":"text","value":" resolves with the first promise to fulfil, even if a promise rejects first. This is in contrast to ","position":{"start":{"line":43,"column":16,"offset":2879},"end":{"line":43,"column":116,"offset":2979},"indent":[]}},{"type":"link","title":null,"url":"race","children":[{"type":"inlineCode","value":"Promise.race()","position":{"start":{"line":43,"column":117,"offset":2980},"end":{"line":43,"column":133,"offset":2996},"indent":[]}}],"position":{"start":{"line":43,"column":116,"offset":2979},"end":{"line":43,"column":140,"offset":3003},"indent":[]}},{"type":"text","value":", which resolves or rejects with the first promise to settle.","position":{"start":{"line":43,"column":140,"offset":3003},"end":{"line":43,"column":201,"offset":3064},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2864},"end":{"line":43,"column":201,"offset":3064},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const pErr = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nconst pSlow = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"Done eventually\");\n});\n\nconst pFast = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"Done quick\");\n});\n\nPromise.any([pErr, pSlow, pFast]).then((value) => {\n  console.log(value);\n  // pFast fulfils first\n})\n// expected output: \"Done quick\"","position":{"start":{"line":45,"column":1,"offset":3066},"end":{"line":61,"column":37,"offset":3532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rejections with AggregateError","position":{"start":{"line":63,"column":5,"offset":3538},"end":{"line":63,"column":35,"offset":3568},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3534},"end":{"line":63,"column":35,"offset":3568},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":65,"column":1,"offset":3570},"end":{"line":65,"column":16,"offset":3585},"indent":[]}},{"type":"text","value":" rejects with an ","position":{"start":{"line":65,"column":16,"offset":3585},"end":{"line":65,"column":33,"offset":3602},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":65,"column":34,"offset":3603},"end":{"line":65,"column":50,"offset":3619},"indent":[]}}],"position":{"start":{"line":65,"column":33,"offset":3602},"end":{"line":65,"column":70,"offset":3639},"indent":[]}},{"type":"text","value":" if no promise fulfils.","position":{"start":{"line":65,"column":70,"offset":3639},"end":{"line":65,"column":93,"offset":3662},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3570},"end":{"line":65,"column":93,"offset":3662},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const pErr = new Promise((resolve, reject) => {\n  reject('Always fails');\n});\n\nPromise.any([pErr]).catch((err) => {\n  console.log(err);\n})\n// expected output: \"AggregateError: No Promise in Promise.any was resolved\"","position":{"start":{"line":67,"column":1,"offset":3664},"end":{"line":74,"column":81,"offset":3907},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Displaying the first image loaded","position":{"start":{"line":76,"column":5,"offset":3913},"end":{"line":76,"column":38,"offset":3946},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3909},"end":{"line":76,"column":38,"offset":3946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we have a function that fetches an image and returns a blob. We use ","position":{"start":{"line":78,"column":1,"offset":3948},"end":{"line":78,"column":86,"offset":4033},"indent":[]}},{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":78,"column":86,"offset":4033},"end":{"line":78,"column":101,"offset":4048},"indent":[]}},{"type":"text","value":" to fetch a couple of images and display the first one available (i.e. whose promise has resolved).","position":{"start":{"line":78,"column":101,"offset":4048},"end":{"line":78,"column":200,"offset":4147},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":3948},"end":{"line":78,"column":200,"offset":4147},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"function fetchAndDecode(url) {\n  return fetch(url).then(response => {\n    if(!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    } else {\n      return response.blob();\n    }\n  })\n}\n\nlet coffee = fetchAndDecode('coffee.jpg');\nlet tea = fetchAndDecode('tea.jpg');\n\nPromise.any([coffee, tea]).then(value => {\n  let objectURL = URL.createObjectURL(value);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n})\n.catch(e => {\n  console.log(e.message);\n});","position":{"start":{"line":80,"column":1,"offset":4149},"end":{"line":101,"column":8,"offset":4766},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":102,"column":1,"offset":4767}}}}