{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-2e0514a61a66ad56a8809a7ce266b9a7--","val":"<p>The <code>node</code> command is the one we use to run our Node.js scripts:</p>\n<pre><code class=\"language-bash\">node script.js\n</code></pre>\n<p>If we omit the filename, we use it in REPL mode:</p>\n<pre><code class=\"language-bash\">node\n</code></pre>\n<blockquote>\n<p>Note: REPL also known as Read Evaluate Print Loop is a programming language environment(Basically a console window) that takes single expression as user input and returns the result back to the console after execution.</p>\n</blockquote>\n<p>If you try it now in your terminal, this is what happens:</p>\n<pre><code class=\"language-bash\">❯ node\n>\n</code></pre>\n<p>the command stays in idle mode and waits for us to enter something.</p>\n<blockquote>\n<p>Tip: if you are unsure how to open your terminal, google \"How to open terminal on &#x3C;your-operating-system>\".</p>\n</blockquote>\n<p>The REPL is waiting for us to enter some JavaScript code, to be more precise.</p>\n<p>Start simple and enter</p>\n<pre><code class=\"language-console\">> console.log('test')\ntest\nundefined\n>\n</code></pre>\n<p>The first value, <code>test</code>, is the output we told the console to print, then we get undefined which is the return value of running <code>console.log()</code>.</p>\n<p>We can now enter a new line of JavaScript.</p>\n<h2>Use the tab to autocomplete</h2>\n<p>The cool thing about the REPL is that it's interactive.</p>\n<p>As you write your code, if you press the <code>tab</code> key the REPL will try to autocomplete what you wrote to match a variable you already defined or a predefined one.</p>\n<h2>Exploring JavaScript objects</h2>\n<p>Try entering the name of a JavaScript class, like <code>Number</code>, add a dot and press <code>tab</code>.</p>\n<p>The REPL will print all the properties and methods you can access on that class:</p>\n<p><img src=\"tab.png\" alt=\"Pressing tab reveals object properties\"></p>\n<h2>Explore global objects</h2>\n<p>You can inspect the globals you have access to by typing <code>global.</code> and pressing <code>tab</code>:</p>\n<p><img src=\"globals.png\" alt=\"Globals\"></p>\n<h2>The _ special variable</h2>\n<p>If after some code you type <code>_</code>, that is going to print the result of the last operation.</p>\n<h2>Dot commands</h2>\n<p>The REPL has some special commands, all starting with a dot <code>.</code>. They are</p>\n<ul>\n<li><code>.help</code>: shows the dot commands help</li>\n<li><code>.editor</code>: enables editor mode, to write multiline JavaScript code with ease. Once you are in this mode, enter ctrl-D to run the code you wrote.</li>\n<li><code>.break</code>: when inputting a multi-line expression, entering the .break command will abort further input. Same as pressing ctrl-C.</li>\n<li><code>.clear</code>: resets the REPL context to an empty object and clears any multi-line expression currently being input.</li>\n<li><code>.load</code>: loads a JavaScript file, relative to the current working directory</li>\n<li><code>.save</code>: saves all you entered in the REPL session to a file (specify the filename)</li>\n<li><code>.exit</code>: exits the repl (same as pressing ctrl-C two times)</li>\n</ul>\n<p>The REPL knows when you are typing a multi-line statement without the need to invoke <code>.editor</code>.</p>\n<p>For example if you start typing an iteration like this:</p>\n<pre><code class=\"language-js\">[1, 2, 3].forEach(num => {\n</code></pre>\n<p>and you press <code>enter</code>, the REPL will go to a new line that starts with 3 dots, indicating you can now continue to work on that block.</p>\n<pre><code class=\"language-js\">... console.log(num)\n... })\n</code></pre>\n<p>If you type <code>.break</code> at the end of a line, the multiline mode will stop and the statement will not be executed.</p>"}