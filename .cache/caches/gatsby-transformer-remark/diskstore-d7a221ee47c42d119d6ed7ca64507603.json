{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-42e408dec1cdda0f516c8138e4b02789--","val":"<h1>This module provides many functions that you can use to retrieve information from the underlying operating system and the computer the program runs on, and interact with it.</h1>\n<pre><code class=\"language-js\">const os = require('os');\n</code></pre>\n<p>There are a few useful properties that tell us some key things related to handling files:</p>\n<p><code>os.EOL</code> gives the line delimiter sequence. It's <code>\\n</code> on Linux and macOS, and <code>\\r\\n</code> on Windows.</p>\n<p><code>os.constants.signals</code> tells us all the constants related to handling process signals, like SIGHUP, SIGKILL and so on.</p>\n<p><code>os.constants.errno</code> sets the constants for error reporting, like EADDRINUSE, EOVERFLOW and more.</p>\n<p>You can read them all on <a href=\"https://nodejs.org/api/os.html#os_signal_constants\">https://nodejs.org/api/os.html#os_signal_constants</a>.</p>\n<p>Let's now see the main methods that <code>os</code> provides:</p>\n<h2><code>os.arch()</code></h2>\n<p>Return the string that identifies the underlying architecture, like <code>arm</code>, <code>x64</code>, <code>arm64</code>.</p>\n<h2><code>os.cpus()</code></h2>\n<p>Return information on the CPUs available on your system.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">[\n    {\n        model: 'Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz',\n        speed: 2400,\n        times: {\n            user: 281685380,\n            nice: 0,\n            sys: 187986530,\n            idle: 685833750,\n            irq: 0\n        }\n    },\n    {\n        model: 'Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz',\n        speed: 2400,\n        times: {\n            user: 282348700,\n            nice: 0,\n            sys: 161800480,\n            idle: 703509470,\n            irq: 0\n        }\n    }\n];\n</code></pre>\n<h2><code>os.endianness()</code></h2>\n<p>Return <code>BE</code> or <code>LE</code> depending if Node.js was compiled with <a href=\"https://en.wikipedia.org/wiki/Endianness\">Big Endian or Little Endian</a>.</p>\n<h2><code>os.freemem()</code></h2>\n<p>Return the number of bytes that represent the free memory in the system.</p>\n<h2><code>os.homedir()</code></h2>\n<p>Return the path to the home directory of the current user.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">'/Users/joe';\n</code></pre>\n<h2><code>os.hostname()</code></h2>\n<p>Return the host name.</p>\n<h2><code>os.loadavg()</code></h2>\n<p>Return the calculation made by the operating system on the load average.</p>\n<p>It only returns a meaningful value on Linux and macOS.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">[3.68798828125, 4.00244140625, 11.1181640625];\n</code></pre>\n<h2><code>os.networkInterfaces()</code></h2>\n<p>Returns the details of the network interfaces available on your system.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">{ lo0:\n   [ { address: '127.0.0.1',\n       netmask: '255.0.0.0',\n       family: 'IPv4',\n       mac: 'fe:82:00:00:00:00',\n       internal: true },\n     { address: '::1',\n       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n       family: 'IPv6',\n       mac: 'fe:82:00:00:00:00',\n       scopeid: 0,\n       internal: true },\n     { address: 'fe80::1',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: 'fe:82:00:00:00:00',\n       scopeid: 1,\n       internal: true } ],\n  en1:\n   [ { address: 'fe82::9b:8282:d7e6:496e',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: '06:00:00:02:0e:00',\n       scopeid: 5,\n       internal: false },\n     { address: '192.168.1.38',\n       netmask: '255.255.255.0',\n       family: 'IPv4',\n       mac: '06:00:00:02:0e:00',\n       internal: false } ],\n  utun0:\n   [ { address: 'fe80::2513:72bc:f405:61d0',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: 'fe:80:00:20:00:00',\n       scopeid: 8,\n       internal: false } ] }\n</code></pre>\n<h2><code>os.platform()</code></h2>\n<p>Return the platform that Node.js was compiled for:</p>\n<ul>\n<li><code>darwin</code></li>\n<li><code>freebsd</code></li>\n<li><code>linux</code></li>\n<li><code>openbsd</code></li>\n<li><code>win32</code></li>\n<li>...more</li>\n</ul>\n<h2><code>os.release()</code></h2>\n<p>Returns a string that identifies the operating system release number</p>\n<h2><code>os.tmpdir()</code></h2>\n<p>Returns the path to the assigned temp folder.</p>\n<h2><code>os.totalmem()</code></h2>\n<p>Returns the number of bytes that represent the total memory available in the system.</p>\n<h2><code>os.type()</code></h2>\n<p>Identifies the operating system:</p>\n<ul>\n<li><code>Linux</code></li>\n<li><code>Darwin</code> on macOS</li>\n<li><code>Windows_NT</code> on Windows</li>\n</ul>\n<h2><code>os.uptime()</code></h2>\n<p>Returns the number of seconds the computer has been running since it was last rebooted.</p>\n<h2><code>os.userInfo()</code></h2>\n<p>Returns an object that contains the current <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code></p>"}