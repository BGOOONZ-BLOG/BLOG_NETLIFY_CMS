{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-a7948f98366f51ad3f6f183bd3d6d350--","val":"<p>Javascript has a native method <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">sort</a></strong> that allows sorting arrays. Doing a simple <code>array.sort()</code> will treat each array entry as a string and sort it alphabetically. Also you can provide your <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters\">own custom sorting</a> function.</p>\n<pre><code class=\"language-js\">['Shanghai', 'New York', 'Mumbai', 'Buenos Aires'].sort();\n// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]\n</code></pre>\n<p>But when you try order an array of non ASCII characters like this <code>['é', 'a', 'ú', 'c']</code>, you will obtain a strange result <code>['c', 'e', 'á', 'ú']</code>. That happens because sort works only with the English language.</p>\n<p>See the next example:</p>\n<pre><code class=\"language-js\">// Spanish\n['único', 'árbol', 'cosas', 'fútbol'].sort();\n// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order\n\n// German\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort();\n// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order\n</code></pre>\n<p>Fortunately, there are two ways to overcome this behavior <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">localeCompare</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\">Intl.Collator</a> provided by ECMAScript Internationalization API.</p>\n<blockquote>\n<p>Both methods have their own custom parameters in order to configure it to work adequately.</p>\n</blockquote>\n<h3>Using <code>localeCompare()</code></h3>\n<pre><code class=\"language-js\">['único', 'árbol', 'cosas', 'fútbol'].sort(function (a, b) {\n    return a.localeCompare(b);\n});\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(function (a, b) {\n    return a.localeCompare(b);\n});\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n</code></pre>\n<h3>Using <code>Intl.Collator()</code></h3>\n<pre><code class=\"language-js\">['único', 'árbol', 'cosas', 'fútbol'].sort(Intl.Collator().compare);\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(Intl.Collator().compare);\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n</code></pre>\n<ul>\n<li>For each method you can customize the location.</li>\n<li>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance\">Firefox</a> Intl.Collator is faster when comparing large numbers of strings.</li>\n</ul>\n<p>So when you are working with arrays of strings in a language other than English, remember to use this method to avoid unexpected sorting.</p>"}