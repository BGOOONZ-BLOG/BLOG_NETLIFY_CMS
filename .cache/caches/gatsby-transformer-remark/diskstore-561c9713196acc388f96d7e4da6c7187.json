{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-c629dc2112445253d7317894ccadd183--","val":"<h1>AJAX and APIs - React</h1>\n<blockquote>\n<h2>Excerpt</h2>\n<p>A JavaScript library for building user interfaces</p>\n</blockquote>\n<hr>\n<h3><a href=\"https://reactjs.org/docs/lists-and-keys.html#how-can-i-make-an-ajax-call\"></a>How can I make an AJAX call?</h3>\n<p>You can use any AJAX library you like with React. Some popular ones are <a href=\"https://github.com/axios/axios\">Axios</a>, <a href=\"https://api.jquery.com/jQuery.ajax/\">jQuery AJAX</a>, and the browser built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">window.fetch</a>.</p>\n<h3><a href=\"https://reactjs.org/docs/lists-and-keys.html#where-in-the-component-lifecycle-should-i-make-an-ajax-call\"></a>Where in the component lifecycle should I make an AJAX call?</h3>\n<p>You should populate data with AJAX calls in the <a href=\"https://reactjs.org/docs/react-component.html#mounting\"><code>componentDidMount</code></a> lifecycle method. This is so you can use <code>setState</code> to update your component when the data is retrieved.</p>\n<h3><a href=\"https://reactjs.org/docs/lists-and-keys.html#example-using-ajax-results-to-set-local-state\"></a>Example: Using AJAX results to set local state</h3>\n<p>The component below demonstrates how to make an AJAX call in <code>componentDidMount</code> to populate local component state.</p>\n<p>The example API returns a JSON object like this:</p>\n<pre><code class=\"language-js\">{\n  \"items\": [\n    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n  ]\n}\n</code></pre>\n<pre><code class=\"language-js\">class MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://api.example.com/items')\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.items\n                    });\n                },\n\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            );\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n            return &#x3C;div>Error: {error.message}&#x3C;/div>;\n        } else if (!isLoaded) {\n            return &#x3C;div>Loading...&#x3C;/div>;\n        } else {\n            return (\n                &#x3C;ul>\n                    {items.map((item) => (\n                        &#x3C;li key={item.id}>\n                            {item.name} {item.price}\n                        &#x3C;/li>\n                    ))}\n                &#x3C;/ul>\n            );\n        }\n    }\n}\n</code></pre>\n<p>Here is the equivalent with <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>:</p>\n<hr>\n<pre><code class=\"language-js\">function MyComponent() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch('https://api.example.com/items')\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setItems(result);\n                },\n\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            );\n    }, []);\n\n    if (error) {\n        return &#x3C;div>Error: {error.message}&#x3C;/div>;\n    } else if (!isLoaded) {\n        return &#x3C;div>Loading...&#x3C;/div>;\n    } else {\n        return (\n            &#x3C;ul>\n                {items.map((item) => (\n                    &#x3C;li key={item.id}>\n                        {item.name} {item.price}\n                    &#x3C;/li>\n                ))}\n            &#x3C;/ul>\n        );\n    }\n}\n</code></pre>"}