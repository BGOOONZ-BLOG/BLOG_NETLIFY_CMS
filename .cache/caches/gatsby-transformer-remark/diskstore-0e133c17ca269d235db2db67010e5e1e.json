{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-86dd4ea9b3dfa946e439c5ac59c44c3b--","val":"<h2><a href=\"https://leetcode.com/problems/divide-two-integers/description/\">29. Divide Two Integers</a></h2>\n<h3>Problem:</h3>\n<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\n<p>The integer division should truncate toward zero.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: dividend = 10, divisor = 3\nOutput: 3\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: dividend = 7, divisor = -3\nOutput: -2\n</code></pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Both dividend and divisor will be 32-bit signed integers.</li>\n<li>The divisor will never be 0.</li>\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li>\n</ul>\n<h3>Solution:</h3>\n<p>Every decimal number can be represented as <code>a0*2^0 + a1*2^1 + a2*2^2 + ... + an*2^n</code>.</p>\n<p>Replace multiplication and division with binary shifting.</p>\n<pre><code class=\"language-js\">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nlet divide = function (dividend, divisor) {\n    if (divisor === 0 || (divisor === -1 &#x26;&#x26; dividend &#x3C; -2147483647) || dividend > 2147483647 || dividend &#x3C; -2147483648) {\n        return 2147483647;\n    }\n\n    const isNegative = (dividend &#x3C; 0 &#x26;&#x26; divisor >= 0) || (dividend >= 0 &#x26;&#x26; divisor &#x3C; 0);\n    const pDividend = Math.abs(dividend);\n    const pDivisor = Math.abs(divisor);\n\n    if (dividend === 0 || pDividend &#x3C; pDivisor) {\n        return 0;\n    }\n\n    let doubling = pDivisor;\n    let count = 1;\n    while (doubling &#x3C; pDividend &#x26;&#x26; !(doubling &#x26; (1 &#x3C;&#x3C; 30))) {\n        doubling &#x3C;&#x3C;= 1;\n        count &#x3C;&#x3C;= 1;\n    }\n    if (doubling > pDividend) {\n        doubling >>>= 1;\n        count >>>= 1;\n    }\n\n    const result = count + divide(pDividend - doubling, pDivisor);\n    return isNegative ? -result : result;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}