{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-f5a70a239f0bc2a7cd477ab82cf84c4b--","val":"<h1>Introduction to React for Complete Beginners</h1>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist.</p>\n<hr>\n<h3>Introduction to React for Complete Beginners</h3>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist, so that it is properly syntax highlighted.</p>\n<p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*Olfj44MF6WSzvlSM.png\" class=\"graf-image\" /></figure>\n<h3>React</h3>\n<blockquote>\n<p><em>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX</em></p>\n</blockquote>\n<blockquote>\n<p><em>include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }</em></p>\n</blockquote>\n<blockquote>\n<p><em>JSX code must be compiled into JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>under the hood the challenges are calling ReactDOM.render (JSX, document.getElementById('root'))</em></p>\n</blockquote>\n<blockquote>\n<p><em>One important thing to know about nested JSX is that it must return a single element.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.</em></p>\n</blockquote>\n<hr>\n<h3>From the React Docs:</h3>\n<h3>What is React?</h3>\n<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components\".</p>\n<p>React has a few different kinds of components, but we'll start with <code>React.Component</code> subclasses:</p>\n<pre><code>class ShoppingList extends React.Component {\n  render() {\n    return (\n      &#x3C;div className=\"shopping-list\">\n        &#x3C;h1>Shopping List for {this.props.name}&#x3C;/h1>\n        &#x3C;ul>\n          &#x3C;li>Instagram&#x3C;/li>\n          &#x3C;li>WhatsApp&#x3C;/li>\n          &#x3C;li>Oculus&#x3C;/li>\n        &#x3C;/ul>\n      &#x3C;/div>\n    );\n  }\n}\n\n// Example usage: &#x3C;ShoppingList name=\"Mark\" />\n</code></pre>\n<p>We'll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.</p>\n<p>Here, ShoppingList is a <strong>React component class</strong>, or <strong>React component type</strong>. A component takes in parameters, called <code>props</code> (short for \"properties\"), and returns a hierarchy of views to display via the <code>render</code> method.</p>\n<p>The <code>render</code> method returns a <em>description</em> of what you want to see on the screen. React takes the description and displays the result. In particular, <code>render</code> returns a <strong>React element</strong>, which is a lightweight description of what to render. Most React developers use a special syntax called \"JSX\" which makes these structures easier to write. The <code>&#x3C;div /></code> syntax is transformed at build time to <code>React.createElement('div')</code>. The example above is equivalent to:</p>\n<pre><code>return React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n</code></pre>\n<pre><code>---\n\n### Valid JSX:\n\n    &#x3C;div>\n      &#x3C;p>Paragraph One&#x3C;/p>\n      &#x3C;p>Paragraph Two&#x3C;/p>\n      &#x3C;p>Paragraph Three&#x3C;/p>\n    &#x3C;/div>\n\n---\n\n### Invalid JSX:\n\n    &#x3C;p>Paragraph One&#x3C;/p>\n    &#x3C;p>Paragraph Two&#x3C;/p>\n    &#x3C;p>Paragraph Three&#x3C;/p>\n\n#### To put comments inside JSX, you use the syntax {/\\* \\*/} to wrap around the comment text.\n\nTo put comments inside JSX, you use the syntax {/\\* \\*/} to wrap around the comment text.\n\nThe code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.\n\n\n```js\n\n    const JSX = (\n      &#x3C;div>\n      {/* This is a comment */}\n        &#x3C;h1>This is a block of JSX&#x3C;/h1>\n        &#x3C;p>Here's a subtitle&#x3C;/p>\n      &#x3C;/div>\n    );\n</code></pre>\n<hr>\n<blockquote>\n<p><em>With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.</em></p>\n</blockquote>\n<blockquote>\n<p><em>ReactDOM offers a simple method to render React elements to the DOM which looks like this:</em></p>\n</blockquote>\n<p><code>ReactDOM.render(componentToRender, targetNode)</code></p>\n<ul>\n<li><span id=\"f724\">the first argument is the React element or component that you want to render,</span></li>\n<li><span id=\"7093\">and the second argument is the DOM node that you want to render the component to.</span></li>\n</ul>\n<blockquote>\n<p><em>ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.</em></p>\n</blockquote>\n<blockquote>\n<p><em>key difference in JSX is that you can no longer use the word class to define HTML classes.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"aafc\">— -> This is because class is a reserved word in JavaScript. Instead, JSX uses className</span></li>\n</ul>\n<blockquote>\n<p><em>the naming convention for all HTML attributes and event references in JSX become camelCase</em></p>\n</blockquote>\n<blockquote>\n<p><em>a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.</em></p>\n</blockquote>\n<h3>Apply a class of myDiv to the div provided in the JSX code.</h3>\n<ul>\n<li><span id=\"9500\">The constant JSX should return a div element.</span></li>\n<li><span id=\"8d42\">The div should have a class of myDiv.</span></li>\n</ul>\n<!-- -->\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code class=\"language-js\"> const JSX = (\n      &#x3C;div className=\"myDiv\">\n        &#x3C;h1>Add a class to this div&#x3C;/h1>\n      &#x3C;/div>\n    );\n\n### React: Learn About Self-Closing JSX Tags\n\n-Another important way in which JSX differs from HTML is in the idea of the self-closing tag.\n\n> _In HTML, almost all tags have both an opening and closing tag:_ `&#x3C;div>&#x3C;/div>;` _the closing tag always has a forward slash before the tag name that you are closing._\n\n> _there are special instances in HTML called \"self-closing tags\", or tags that don't require both an opening and closing tag before another tag can start._\n\n> _For example the line-break tag can be written as_ `&#x3C;br>` _or as_ `&#x3C;br />,` _but should never be written as_ `&#x3C;br>&#x3C;/br>`_, since it doesn't contain any content._\n\n> _In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.  \n> The line-break tag, for example, must always be written as_ `&#x3C;br />` _in order to be valid JSX that can be transpiled.  \n> A_ `&#x3C;div>`_, on the other hand, can be written as_ `&#x3C;div />`_or_`&#x3C;div>&#x3C;/div>`_.  \n> The difference is that in the first syntax version there is no way to include anything in the_ `&#x3C;div />`_._\n\n### Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content — you only need to close tags where they are needed.\n\n\n```js\n\n    const JSX = (\n      &#x3C;div>\n        &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br >\n        &#x3C;p>Be sure to close all tags!&#x3C;/p>\n        &#x3C;hr >\n      &#x3C;/div>\n    );\n\n### Ans:\n\n```js\n\n const JSX = (\n      &#x3C;div>\n        &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br />\n        &#x3C;p>Be sure to close all tags!&#x3C;/p>\n        &#x3C;hr />\n      &#x3C;/div>\n    );\n</code></pre>\n<hr>\n<h3>React: Create a Stateless Functional Component</h3>\n<blockquote>\n<p><em>There are two ways to create a React component. The first way is to use a JavaScript function.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Defining a component in this way creates a stateless functional component.</em></p>\n</blockquote>\n<blockquote>\n<p><em>think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</em></p>\n</blockquote>\n<h4>To create a component with a function, you simply write a JavaScript function that returns either JSX or null</h4>\n<ul>\n<li><span id=\"b514\">React requires your function name to begin with a capital letter.</span></li>\n</ul>\n<blockquote>\n<p><em>Here's an example of a stateless functional component that assigns an HTML class in JSX:</em></p>\n</blockquote>\n<pre><code>// After being transpiled, the &#x3C;div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    &#x3C;div className='customClass' />\n  );\n};\n</code></pre>\n<blockquote>\n<p><em>Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.</em></p>\n</blockquote>\n<h3>The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text.</h3>\n<p>Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag.</p>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\n  // Change code above this line\n}\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\nreturn (\n   &#x3C;div> Some Text &#x3C;/div >\n  );\n\n  // Change code above this line\n};\n</code></pre>\n<hr>\n<h3>React: Create a React Component</h3>\n<blockquote>\n<p><em>The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:</em></p>\n</blockquote>\n<pre><code>class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &#x3C;h1>Hi&#x3C;/h1>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p><em>This creates an ES6 class Kitten which extends the React.Component class.</em></p>\n</blockquote>\n<blockquote>\n<p><em>So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Also notice the Kitten class has a constructor defined within it that calls super()</em></p>\n</blockquote>\n<blockquote>\n<p><em>It uses super() to call the constructor of the parent class, in this case React.Component</em></p>\n</blockquote>\n<blockquote>\n<p><em>The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component's constructor with super, and pass props to both.</em></p>\n</blockquote>\n<blockquote>\n<p><em>This makes sure the component is initialized properly. For now, know that it is standard for this code to be included.</em></p>\n</blockquote>\n<h3>MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!.</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n return (\n   &#x3C;div>\n      &#x3C;h1>Hello React!&#x3C;/h1>\n      &#x3C;/div>\n    );\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<hr>\n<details>\n<summary>  See More </summary>   \n<h3>React: Create a Component with Composition</h3>\n<blockquote>\n<p><em>Imagine you are building an App and have created three components, a Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<blockquote>\n<p><em>To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"000b\">For example, in the render method you could write:</span></li>\n</ul>\n<!-- -->\n<pre><code>return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<blockquote>\n<p><em>When React encounters a custom HTML tag that references another component (a component name wrapped in &#x3C; /> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<h3>Challenge:</h3>\n<blockquote>\n<p><em>In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"2ed5\">Note:<strong>ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React</strong>.</span></li>\n<li><span id=\"fddd\">However, know that this is just a function.</span></li>\n</ul>\n<!-- -->\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>⌛The React component should return a single div element.<br>\n⌛The component should return two nested elements.<br>\n⌛The component should return the ChildComponent as its second child.</p>\n<h3>Ans:</h3>\n<details>\n<summary>  Answers </summary>   \n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<pre><code>    \n &#x3C;/details>   \n    \n\n### More Examples:\n\n\n\n&#x3C;a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\">&#x3C;strong>bgoonz - Overview&#x3C;/strong>&#x3C;br />\n&#x3C;em>Web Developer, Electrical Engineer https://bryanguner.medium.com/ https://portfolio42.netlify.app/…&#x3C;/em>github.com&#x3C;/a>&#x3C;a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">&#x3C;/a>\n\n_More content at_ &#x3C;a href=\"http://plainenglish.io/\" class=\"markup--anchor markup--p-anchor\">&#x3C;em>plainenglish.io&#x3C;/em>&#x3C;/a>\n\nBy &#x3C;a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner&#x3C;/a> on [May 19, 2021](https://medium.com/p/8021738aa1ad).\n\n&#x3C;a href=\"https://medium.com/@bryanguner/introduction-to-react-for-complete-beginners-8021738aa1ad\" class=\"p-canonical\">Canonical link&#x3C;/a>\n\n May 23, 2021.\n\n# Snippets:\n\n&#x3C;p>Renders an accordion menu with multiple collapsible content elements.&#x3C;/p>\n&#x3C;ul>\n&#x3C;li>Define an &#x3C;code>AccordionItem&#x3C;/code> component, that renders a &#x3C;code>&#x26;lt;button&#x26;gt;&#x3C;/code> which is used to update the component and notify its parent via the &#x3C;code>handleClick&#x3C;/code> callback.&#x3C;/li>\n&#x3C;li>Use the &#x3C;code>isCollapsed&#x3C;/code> prop in &#x3C;code>AccordionItem&#x3C;/code> to determine its appearance and set an appropriate &#x3C;code>className&#x3C;/code>.&#x3C;/li>\n&#x3C;li>Define an &#x3C;code>Accordion&#x3C;/code> component that uses the &#x3C;code>useState()&#x3C;/code> hook to initialize the value of the &#x3C;code>bindIndex&#x3C;/code> state variable to &#x3C;code>defaultIndex&#x3C;/code>.&#x3C;/li>\n&#x3C;li>Filter &#x3C;code>children&#x3C;/code> to remove unnecessary nodes except for &#x3C;code>AccordionItem&#x3C;/code> by identifying the function's name.&#x3C;/li>\n&#x3C;li>Use &#x3C;code>Array.prototype.map()&#x3C;/code> on the collected nodes to render the individual collapsible elements.&#x3C;/li>\n&#x3C;li>Define &#x3C;code>changeItem&#x3C;/code>, which will be executed when clicking an &#x3C;code>AccordionItem&#x3C;/code>'s &#x3C;code>&#x26;lt;button&#x26;gt;&#x3C;/code>.&#x3C;/li>\n&#x3C;li>&#x3C;code>changeItem&#x3C;/code> executes the passed callback, &#x3C;code>onItemClick&#x3C;/code>, and updates &#x3C;code>bindIndex&#x3C;/code> based on the clicked element.&#x3C;/li>\n&#x3C;/ul>\n&#x3C;div class=\"sourceCode\" id=\"cb1\">&#x3C;pre class=\"sourceCode css\">&#x3C;code class=\"sourceCode css\">&#x3C;a class=\"sourceLine\" id=\"cb1-1\" title=\"1\">&#x3C;span class=\"fu\">.accordion-item.collapsed&#x3C;/span> {&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">  &#x3C;span class=\"kw\">display&#x3C;/span>: &#x3C;span class=\"dv\">none&#x3C;/span>&#x3C;span class=\"op\">;&#x3C;/span>&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">}&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-4\" title=\"4\">&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-5\" title=\"5\">&#x3C;span class=\"fu\">.accordion-item.expanded&#x3C;/span> {&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-6\" title=\"6\">  &#x3C;span class=\"kw\">display&#x3C;/span>: &#x3C;span class=\"dv\">block&#x3C;/span>&#x3C;span class=\"op\">;&#x3C;/span>&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-7\" title=\"7\">}&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-8\" title=\"8\">&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-9\" title=\"9\">&#x3C;span class=\"fu\">.accordion-button&#x3C;/span> {&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-10\" title=\"10\">  &#x3C;span class=\"kw\">display&#x3C;/span>: &#x3C;span class=\"dv\">block&#x3C;/span>&#x3C;span class=\"op\">;&#x3C;/span>&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-11\" title=\"11\">  &#x3C;span class=\"kw\">width&#x3C;/span>: &#x3C;span class=\"dv\">100&#x3C;/span>&#x3C;span class=\"dt\">%&#x3C;/span>&#x3C;span class=\"op\">;&#x3C;/span>&#x3C;/a>\n&#x3C;a class=\"sourceLine\" id=\"cb1-12\" title=\"12\">}&#x3C;/a>\n\n&#x3C;/div>\n\n```js\n\nconst AccordionItem = ({ label, isCollapsed, handleClick, children }) =&#x26;gt; {\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;button className=&#x26;quot;accordion-button&#x26;quot; onClick={handleClick}&#x26;gt;\n        {label}\n      &#x26;lt;/button&#x26;gt;\n      &#x26;lt;div\n        className={`accordion-item ${isCollapsed ? &#x26;quot;collapsed&#x26;quot; : &#x26;quot;expanded&#x26;quot;}`}\n        aria-expanded={isCollapsed}\n      &#x26;gt;\n        {children}\n      &#x26;lt;/div&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n\nconst Accordion = ({ defaultIndex, onItemClick, children }) =&#x26;gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\n\nconst changeItem = (itemIndex) =&#x26;gt; {\nif (typeof onItemClick === &#x26;quot;function&#x26;quot;) onItemClick(itemIndex);\nif (itemIndex !== bindIndex) setBindIndex(itemIndex);\n};\nconst items = children.filter((item) =&#x26;gt; item.type.name === &#x26;quot;AccordionItem&#x26;quot;);\n\nreturn (\n&#x26;lt;&#x26;gt;\n{items.map(({ props }) =&#x26;gt; (\n&#x26;lt;AccordionItem\nisCollapsed={bindIndex !== props.index}\nlabel={props.label}\nhandleClick={() =&#x26;gt; changeItem(props.index)}\nchildren={props.children}\n/&#x26;gt;\n))}\n&#x26;lt;/&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Accordion defaultIndex=&#x26;quot;1&#x26;quot; onItemClick={console.log}&#x26;gt;\n    &#x26;lt;AccordionItem label=&#x26;quot;A&#x26;quot; index=&#x26;quot;1&#x26;quot;&#x26;gt;\n      Lorem ipsum\n    &#x26;lt;/AccordionItem&#x26;gt;\n    &#x26;lt;AccordionItem label=&#x26;quot;B&#x26;quot; index=&#x26;quot;2&#x26;quot;&#x26;gt;\n      Dolor sit amet\n    &#x26;lt;/AccordionItem&#x26;gt;\n  &#x26;lt;/Accordion&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an alert component with <code>type</code> prop.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isShown</code> and <code>isLeaving</code> state variables and set both to <code>false</code> initially.</li>\n<li>Define <code>timeoutId</code> to keep the timer instance for clearing on component unmount.</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>isShown</code> to <code>true</code> and clear the interval by using <code>timeoutId</code> when the component is unmounted.</li>\n<li>Define a <code>closeAlert</code> function to set the component as removed from the DOM by displaying a fading out animation and set <code>isShown</code> to <code>false</code> via <code>setTimeout()</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\"><span class=\"im\">@keyframes</span> leave {</a>\n<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-3\" title=\"3\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-4\" title=\"4\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-5\" title=\"5\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-6\" title=\"6\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-7\" title=\"7\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb4-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb4-10\" title=\"10\"><span class=\"fu\">.alert</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-11\" title=\"11\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0.75</span><span class=\"dt\">rem</span> <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-12\" title=\"12\">  <span class=\"kw\">margin-bottom</span>: <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-13\" title=\"13\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-14\" title=\"14\">  <span class=\"kw\">padding-right</span>: <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-15\" title=\"15\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-16\" title=\"16\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-17\" title=\"17\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-18\" title=\"18\">}</a>\n<a class=\"sourceLine\" id=\"cb4-19\" title=\"19\"></a>\n<a class=\"sourceLine\" id=\"cb4-20\" title=\"20\"><span class=\"fu\">.alert.warning</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-21\" title=\"21\">  <span class=\"kw\">color</span>: <span class=\"cn\">#856404</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-22\" title=\"22\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#fff3cd</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-23\" title=\"23\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#ffeeba</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-24\" title=\"24\">}</a>\n<a class=\"sourceLine\" id=\"cb4-25\" title=\"25\"></a>\n<a class=\"sourceLine\" id=\"cb4-26\" title=\"26\"><span class=\"fu\">.alert.error</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-27\" title=\"27\">  <span class=\"kw\">color</span>: <span class=\"cn\">#721c24</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-28\" title=\"28\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#f8d7da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-29\" title=\"29\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#f5c6cb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-30\" title=\"30\">}</a>\n<a class=\"sourceLine\" id=\"cb4-31\" title=\"31\"></a>\n<a class=\"sourceLine\" id=\"cb4-32\" title=\"32\"><span class=\"fu\">.alert.leaving</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-33\" title=\"33\">  <span class=\"kw\">animation</span>: leave <span class=\"dv\">0.5</span><span class=\"dt\">s</span> <span class=\"dv\">forwards</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-34\" title=\"34\">}</a>\n<a class=\"sourceLine\" id=\"cb4-35\" title=\"35\"></a>\n<a class=\"sourceLine\" id=\"cb4-36\" title=\"36\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-37\" title=\"37\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-38\" title=\"38\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-39\" title=\"39\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-40\" title=\"40\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">0.75</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-41\" title=\"41\">  <span class=\"kw\">color</span>: <span class=\"cn\">#333</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-42\" title=\"42\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-43\" title=\"43\">  <span class=\"kw\">height</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-44\" title=\"44\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-45\" title=\"45\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-46\" title=\"46\">  <span class=\"kw\">font-weight</span>: <span class=\"dv\">600</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-47\" title=\"47\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-48\" title=\"48\">}</a>\n<a class=\"sourceLine\" id=\"cb4-49\" title=\"49\"></a>\n<a class=\"sourceLine\" id=\"cb4-50\" title=\"50\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span><span class=\"in\">:after</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-51\" title=\"51\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;x&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-52\" title=\"52\">}</a>\n</div>\n<pre><code class=\"language-js\">const Alert = ({ isDefaultShown = false, timeout = 250, type, message }) =&#x26;gt; {\n  const [isShown, setIsShown] = React.useState(isDefaultShown);\n  const [isLeaving, setIsLeaving] = React.useState(false);\n\nlet timeoutId = null;\n\nReact.useEffect(() =&#x26;gt; {\nsetIsShown(true);\nreturn () =&#x26;gt; {\nclearTimeout(timeoutId);\n};\n}, [isDefaultShown, timeout, timeoutId]);\n\nconst closeAlert = () =&#x26;gt; {\nsetIsLeaving(true);\ntimeoutId = setTimeout(() =&#x26;gt; {\nsetIsLeaving(false);\nsetIsShown(false);\n}, timeout);\n};\n\nreturn (\nisShown &#x26;amp;&#x26;amp; (\n&#x26;lt;div\nclassName={`alert ${type} ${isLeaving ? &#x26;quot;leaving&#x26;quot; : &#x26;quot;&#x26;quot;}`}\nrole=&#x26;quot;alert&#x26;quot;\n&#x26;gt;\n&#x26;lt;button className=&#x26;quot;close&#x26;quot; onClick={closeAlert} /&#x26;gt;\n{message}\n&#x26;lt;/div&#x26;gt;\n)\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Alert type=&#x26;quot;info&#x26;quot; message=&#x26;quot;This is info&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a string as plaintext, with URLs converted to appropriate link elements.</p>\n<ul>\n<li>Use <code>String.prototype.split()</code> and <code>String.prototype.match()</code> with a regular expression to find URLs in a string.</li>\n<li>Return matched URLs rendered as <code>&lt;a&gt;</code> elements, dealing with missing protocol prefixes if necessary.</li>\n<li>Render the rest of the string as plaintext.</li>\n</ul>\n<pre><code class=\"language-js\">const AutoLink = ({ text }) =&#x26;gt; {\n  const delimiter =\n    /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&#x26;amp;=;%+?\\-\\\\(\\\\)]*)/gi;\n\nreturn (\n&#x26;lt;&#x26;gt;\n{text.split(delimiter).map((word) =&#x26;gt; {\nconst match = word.match(delimiter);\nif (match) {\nconst url = match[0];\nreturn (\n&#x26;lt;a href={url.startsWith(&#x26;quot;http&#x26;quot;) ? url : `http://${url}`}&#x26;gt;{url}&#x26;lt;/a&#x26;gt;\n);\n}\nreturn word;\n})}\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;AutoLink text=&#x26;quot;foo bar baz http://example.org bar&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a link formatted to call a phone number (<code>tel:</code> link).</p>\n<ul>\n<li>Use <code>phone</code> to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>\n<pre><code class=\"language-js\">const Callto = ({ phone, children }) =&#x26;gt; {\n  return &#x26;lt;a href={`tel:${phone}`}&#x26;gt;{children}&#x26;lt;/a&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Callto phone=&#x26;quot;+302101234567&#x26;quot;&#x26;gt;Call me!&#x26;lt;/Callto&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a carousel component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>active</code> state variable and give it a value of <code>0</code> (index of the first item).</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>active</code> to the index of the next item, using <code>setTimeout</code>.</li>\n<li>Compute the <code>className</code> for each carousel item while mapping over them and applying it accordingly.</li>\n<li>Render the carousel items using <code>React.cloneElement()</code> and pass down <code>...rest</code> along with the computed <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><span class=\"fu\">.carousel</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\"><span class=\"fu\">.carousel-item</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-7\" title=\"7\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb11-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb11-10\" title=\"10\"><span class=\"fu\">.carousel-item.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-11\" title=\"11\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">visible</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-12\" title=\"12\">}</a>\n</div>\n<pre><code class=\"language-js\">const Carousel = ({ carouselItems, ...rest }) =&#x26;gt; {\n  const [active, setActive] = React.useState(0);\n  let scrollInterval = null;\n\nReact.useEffect(() =&#x26;gt; {\nscrollInterval = setTimeout(() =&#x26;gt; {\nsetActive((active + 1) % carouselItems.length);\n}, 2000);\nreturn () =&#x26;gt; clearTimeout(scrollInterval);\n});\n\nreturn (\n&#x26;lt;div className=&#x26;quot;carousel&#x26;quot;&#x26;gt;\n{carouselItems.map((item, index) =&#x26;gt; {\nconst activeClass = active === index ? &#x26;quot; visible&#x26;quot; : &#x26;quot;&#x26;quot;;\nreturn React.cloneElement(item, {\n...rest,\nclassName: `carousel-item${activeClass}`,\n});\n})}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Carousel\n    carouselItems={[\n      &#x26;lt;div&#x26;gt;carousel item 1&#x26;lt;/div&#x26;gt;,\n      &#x26;lt;div&#x26;gt;carousel item 2&#x26;lt;/div&#x26;gt;,\n      &#x26;lt;div&#x26;gt;carousel item 3&#x26;lt;/div&#x26;gt;,\n    ]}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a component with collapsible content.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isCollapsed</code> state variable with an initial value of <code>collapsed</code>.</li>\n<li>Use the <code>&lt;button&gt;</code> to change the component's <code>isCollapsed</code> state and the content of the component, passed down via <code>children</code>.</li>\n<li>Determine the appearance of the content, based on <code>isCollapsed</code> and apply the appropriate <code>className</code>.</li>\n<li>Update the value of the <code>aria-expanded</code> attribute based on <code>isCollapsed</code> to make the component accessible.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\"><span class=\"fu\">.collapse-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb14-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb14-6\" title=\"6\"><span class=\"fu\">.collapse-content.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-7\" title=\"7\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb14-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb14-10\" title=\"10\"><span class=\"fu\">.collapsed-content.expanded</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-11\" title=\"11\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-12\" title=\"12\">}</a>\n</div>\n<pre><code class=\"language-js\">const Collapse = ({ collapsed, children }) =&#x26;gt; {\n  const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;button\nclassName=&#x26;quot;collapse-button&#x26;quot;\nonClick={() =&#x26;gt; setIsCollapsed(!isCollapsed)}\n&#x26;gt;\n{isCollapsed ? &#x26;quot;Show&#x26;quot; : &#x26;quot;Hide&#x26;quot;} content\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;div\nclassName={`collapse-content ${isCollapsed ? &#x26;quot;collapsed&#x26;quot; : &#x26;quot;expanded&#x26;quot;}`}\naria-expanded={isCollapsed}\n&#x26;gt;\n{children}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Collapse&#x26;gt;\n    &#x26;lt;h1&#x26;gt;This is a collapse&#x26;lt;/h1&#x26;gt;\n    &#x26;lt;p&#x26;gt;Hello world!&#x26;lt;/p&#x26;gt;\n  &#x26;lt;/Collapse&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a controlled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>value</code> passed down from the parent as the controlled input field's value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>The parent must update the input field's <code>value</code> prop in order for its value to change on user input.</li>\n</ul>\n<pre><code class=\"language-js\">const ControlledInput = ({ value, onValueChange, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      value={value}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Form = () =&#x26;gt; {\n  const [value, setValue] = React.useState(&#x26;quot;&#x26;quot;);\n\nreturn (\n&#x26;lt;ControlledInput\ntype=&#x26;quot;text&#x26;quot;\nplaceholder=&#x26;quot;Insert some text here...&#x26;quot;\nvalue={value}\nonValueChange={setValue}\n/&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Form /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a countdown timer that prints a message when it reaches zero.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable to hold the time value, initialize it from the props and destructure it into its components.</li>\n<li>Use the <code>useState()</code> hook to create the <code>paused</code> and <code>over</code> state variables, used to prevent the timer from ticking if it's paused or the time has run out.</li>\n<li>Create a method <code>tick</code>, that updates the time values based on the current value (i.e. decreasing the time by one second).</li>\n<li>Create a method <code>reset</code>, that resets all state variables to their initial states.</li>\n<li>Use the the <code>useEffect()</code> hook to call the <code>tick</code> method every second via the use of <code>setInterval()</code> and use <code>clearInterval()</code> to clean up when the component is unmounted.</li>\n<li>Use <code>String.prototype.padStart()</code> to pad each part of the time array to two characters to create the visual representation of the timer.</li>\n</ul>\n<pre><code class=\"language-js\">const CountDown = ({ hours = 0, minutes = 0, seconds = 0 }) =&#x26;gt; {\n  const [paused, setPaused] = React.useState(false);\n  const [over, setOver] = React.useState(false);\n  const [[h, m, s], setTime] = React.useState([hours, minutes, seconds]);\n\nconst tick = () =&#x26;gt; {\nif (paused || over) return;\nif (h === 0 &#x26;amp;&#x26;amp; m === 0 &#x26;amp;&#x26;amp; s === 0) setOver(true);\nelse if (m === 0 &#x26;amp;&#x26;amp; s === 0) {\nsetTime([h - 1, 59, 59]);\n} else if (s == 0) {\nsetTime([h, m - 1, 59]);\n} else {\nsetTime([h, m, s - 1]);\n}\n};\n\nconst reset = () =&#x26;gt; {\nsetTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\nsetPaused(false);\nsetOver(false);\n};\n\nReact.useEffect(() =&#x26;gt; {\nconst timerID = setInterval(() =&#x26;gt; tick(), 1000);\nreturn () =&#x26;gt; clearInterval(timerID);\n});\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;{`${h.toString().padStart(2, &#x26;quot;0&#x26;quot;)}:${m.toString().padStart(2, &#x26;quot;0&#x26;quot;)}:${s .toString() .padStart(2, &#x26;quot;0&#x26;quot;)}`}&#x26;lt;/p&#x26;gt;\n&#x26;lt;div&#x26;gt;{over ? &#x26;quot;Time&#x26;#39;s up!&#x26;quot; : &#x26;quot;&#x26;quot;}&#x26;lt;/div&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setPaused(!paused)}&#x26;gt;\n{paused ? &#x26;quot;Resume&#x26;quot; : &#x26;quot;Pause&#x26;quot;}\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; reset()}&#x26;gt;Restart&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;CountDown hours={1} minutes={45} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a list of elements from an array of primitives.</p>\n<ul>\n<li>Use the value of the <code>isOrdered</code> prop to conditionally render an <code>&lt;ol&gt;</code> or a <code>&lt;ul&gt;</code> list.</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;li&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const DataList = ({ isOrdered = false, data }) =&#x26;gt; {\n  const list = data.map((val, i) =&#x26;gt; &#x26;lt;li key={`${i}_${val}`}&#x26;gt;{val}&#x26;lt;/li&#x26;gt;);\n  return isOrdered ? &#x26;lt;ol&#x26;gt;{list}&#x26;lt;/ol&#x26;gt; : &#x26;lt;ul&#x26;gt;{list}&#x26;lt;/ul&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const names = [&#x26;quot;John&#x26;quot;, &#x26;quot;Paul&#x26;quot;, &#x26;quot;Mary&#x26;quot;];\nReactDOM.render(&#x26;lt;DataList data={names} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\nReactDOM.render(\n  &#x26;lt;DataList data={names} isOrdered /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a table with rows dynamically created from an array of primitives.</p>\n<ul>\n<li>Render a <code>&lt;table&gt;</code> element with two columns (<code>ID</code> and <code>Value</code>).</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;tr&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const DataTable = ({ data }) =&#x26;gt; {\n  return (\n    &#x26;lt;table&#x26;gt;\n      &#x26;lt;thead&#x26;gt;\n        &#x26;lt;tr&#x26;gt;\n          &#x26;lt;th&#x26;gt;ID&#x26;lt;/th&#x26;gt;\n          &#x26;lt;th&#x26;gt;Value&#x26;lt;/th&#x26;gt;\n        &#x26;lt;/tr&#x26;gt;\n      &#x26;lt;/thead&#x26;gt;\n      &#x26;lt;tbody&#x26;gt;\n        {data.map((val, i) =&#x26;gt; (\n          &#x26;lt;tr key={`${i}_${val}`}&#x26;gt;\n            &#x26;lt;td&#x26;gt;{i}&#x26;lt;/td&#x26;gt;\n            &#x26;lt;td&#x26;gt;{val}&#x26;lt;/td&#x26;gt;\n          &#x26;lt;/tr&#x26;gt;\n        ))}\n      &#x26;lt;/tbody&#x26;gt;\n    &#x26;lt;/table&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const people = [&#x26;quot;John&#x26;quot;, &#x26;quot;Jesse&#x26;quot;];\nReactDOM.render(&#x26;lt;DataTable data={people} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a file drag and drop component for a single file.</p>\n<ul>\n<li>Create a ref, called <code>dropRef</code> and bind it to the component's wrapper.</li>\n<li>Use the <code>useState()</code> hook to create the <code>drag</code> and <code>filename</code> variables, initialized to <code>false</code> and <code>''</code> respectively.</li>\n<li>The variables <code>dragCounter</code> and <code>drag</code> are used to determine if a file is being dragged, while <code>filename</code> is used to store the dropped file's name.</li>\n<li>Create the <code>handleDrag</code>, <code>handleDragIn</code>, <code>handleDragOut</code> and <code>handleDrop</code> methods to handle drag and drop functionality.</li>\n<li><code>handleDrag</code> prevents the browser from opening the dragged file, <code>handleDragIn</code> and <code>handleDragOut</code> handle the dragged file entering and exiting the component, while <code>handleDrop</code> handles the file being dropped and passes it to <code>onDrop</code>.</li>\n<li>Use the <code>useEffect()</code> hook to handle each of the drag and drop events using the previously created methods.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\"><span class=\"fu\">.filedrop</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">120</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d3d3d3</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-5\" title=\"5\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-6\" title=\"6\">  <span class=\"kw\">padding</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb25-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb25-10\" title=\"10\"><span class=\"fu\">.filedrop.drag</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-11\" title=\"11\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">dashed</span> <span class=\"cn\">#1e90ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-12\" title=\"12\">}</a>\n<a class=\"sourceLine\" id=\"cb25-13\" title=\"13\"></a>\n<a class=\"sourceLine\" id=\"cb25-14\" title=\"14\"><span class=\"fu\">.filedrop.ready</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-15\" title=\"15\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#32cd32</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-16\" title=\"16\">}</a>\n</div>\n<pre><code class=\"language-js\">const FileDrop = ({ onDrop }) =&#x26;gt; {\n  const [drag, setDrag] = React.useState(false);\n  const [filename, setFilename] = React.useState(&#x26;quot;&#x26;quot;);\n  let dropRef = React.createRef();\n  let dragCounter = 0;\n\nconst handleDrag = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\n};\n\nconst handleDragIn = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter++;\nif (e.dataTransfer.items &#x26;amp;&#x26;amp; e.dataTransfer.items.length &#x26;gt; 0) setDrag(true);\n};\n\nconst handleDragOut = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter--;\nif (dragCounter === 0) setDrag(false);\n};\n\nconst handleDrop = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\nsetDrag(false);\nif (e.dataTransfer.files &#x26;amp;&#x26;amp; e.dataTransfer.files.length &#x26;gt; 0) {\nonDrop(e.dataTransfer.files[0]);\nsetFilename(e.dataTransfer.files[0].name);\ne.dataTransfer.clearData();\ndragCounter = 0;\n}\n};\n\nReact.useEffect(() =&#x26;gt; {\nlet div = dropRef.current;\ndiv.addEventListener(&#x26;quot;dragenter&#x26;quot;, handleDragIn);\ndiv.addEventListener(&#x26;quot;dragleave&#x26;quot;, handleDragOut);\ndiv.addEventListener(&#x26;quot;dragover&#x26;quot;, handleDrag);\ndiv.addEventListener(&#x26;quot;drop&#x26;quot;, handleDrop);\nreturn () =&#x26;gt; {\ndiv.removeEventListener(&#x26;quot;dragenter&#x26;quot;, handleDragIn);\ndiv.removeEventListener(&#x26;quot;dragleave&#x26;quot;, handleDragOut);\ndiv.removeEventListener(&#x26;quot;dragover&#x26;quot;, handleDrag);\ndiv.removeEventListener(&#x26;quot;drop&#x26;quot;, handleDrop);\n};\n});\n\nreturn (\n&#x26;lt;div\nref={dropRef}\nclassName={\ndrag ? &#x26;quot;filedrop drag&#x26;quot; : filename ? &#x26;quot;filedrop ready&#x26;quot; : &#x26;quot;filedrop&#x26;quot;\n}\n&#x26;gt;\n{filename &#x26;amp;&#x26;amp; !drag ? &#x26;lt;div&#x26;gt;{filename}&#x26;lt;/div&#x26;gt; : &#x26;lt;div&#x26;gt;Drop a file here!&#x26;lt;/div&#x26;gt;}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;FileDrop onDrop={console.log} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a textarea component with a character limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>content</code> state variable and set its value to that of <code>value</code> prop, trimmed down to <code>limit</code> characters.</li>\n<li>Create a method <code>setFormattedContent</code>, which trims the content down to <code>limit</code> characters and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of the fired event.</li>\n</ul>\n<pre><code class=\"language-js\">const LimitedTextarea = ({ rows, cols, value, limit }) =&#x26;gt; {\n  const [content, setContent] = React.useState(value.slice(0, limit));\n\nconst setFormattedContent = React.useCallback(\n(text) =&#x26;gt; {\nsetContent(text.slice(0, limit));\n},\n[limit, setContent]\n);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&#x26;gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&#x26;gt;\n&#x26;lt;p&#x26;gt;\n{content.length}/{limit}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;LimitedTextarea limit={32} value=&#x26;quot;Hello!&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a textarea component with a word limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable, containing <code>content</code> and <code>wordCount</code>, using the <code>value</code> prop and <code>0</code> as the initial values respectively.</li>\n<li>Use the <code>useCallback()</code> hooks to create a memoized function, <code>setFormattedContent</code>, that uses <code>String.prototype.split()</code> to turn the input into an array of words.</li>\n<li>Check if the result of applying <code>Array.prototype.filter()</code> combined with <code>Boolean</code> has a <code>length</code> longer than <code>limit</code> and, if so, trim the input, otherwise return the raw input, updating state accordingly in both cases.</li>\n<li>Use the <code>useEffect()</code> hook to call the <code>setFormattedContent</code> method on the value of the <code>content</code> state variable during the initial render.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of <code>event.target.value</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const LimitedWordTextarea = ({ rows, cols, value, limit }) =&#x26;gt; {\n  const [{ content, wordCount }, setContent] = React.useState({\n    content: value,\n    wordCount: 0,\n  });\n\nconst setFormattedContent = React.useCallback(\n(text) =&#x26;gt; {\nlet words = text.split(&#x26;quot; &#x26;quot;).filter(Boolean);\nif (words.length &#x26;gt; limit) {\nsetContent({\ncontent: words.slice(0, limit).join(&#x26;quot; &#x26;quot;),\nwordCount: limit,\n});\n} else {\nsetContent({ content: text, wordCount: words.length });\n}\n},\n[limit, setContent]\n);\n\nReact.useEffect(() =&#x26;gt; {\nsetFormattedContent(content);\n}, []);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&#x26;gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&#x26;gt;\n&#x26;lt;p&#x26;gt;\n{wordCount}/{limit}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;LimitedWordTextarea limit={5} value=&#x26;quot;Hello there!&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a spinning loader component.</p>\n<ul>\n<li>Render an SVG, whose <code>height</code> and <code>width</code> are determined by the <code>size</code> prop.</li>\n<li>Use CSS to animate the SVG, creating a spinning animation.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb32-1\" title=\"1\"><span class=\"fu\">.loader</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-2\" title=\"2\">  <span class=\"kw\">animation</span>: rotate <span class=\"dv\">2</span><span class=\"dt\">s</span> <span class=\"dv\">linear</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb32-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb32-5\" title=\"5\"><span class=\"im\">@keyframes</span> rotate {</a>\n<a class=\"sourceLine\" id=\"cb32-6\" title=\"6\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-7\" title=\"7\">    <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">360</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-8\" title=\"8\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-9\" title=\"9\">}</a>\n<a class=\"sourceLine\" id=\"cb32-10\" title=\"10\"></a>\n<a class=\"sourceLine\" id=\"cb32-11\" title=\"11\"><span class=\"fu\">.loader</span> circle {</a>\n<a class=\"sourceLine\" id=\"cb32-12\" title=\"12\">  <span class=\"kw\">animation</span>: dash <span class=\"dv\">1.5</span><span class=\"dt\">s</span> <span class=\"dv\">ease-in-out</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb32-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb32-15\" title=\"15\"><span class=\"im\">@keyframes</span> dash {</a>\n<a class=\"sourceLine\" id=\"cb32-16\" title=\"16\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-17\" title=\"17\">    stroke-dasharray: <span class=\"dv\">1</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-18\" title=\"18\">    stroke-dashoffset: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-19\" title=\"19\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-20\" title=\"20\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-21\" title=\"21\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-22\" title=\"22\">    stroke-dashoffset: <span class=\"dv\">-35</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-23\" title=\"23\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-24\" title=\"24\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-25\" title=\"25\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-26\" title=\"26\">    stroke-dashoffset: <span class=\"dv\">-124</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-27\" title=\"27\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-28\" title=\"28\">}</a>\n</div>\n<pre><code class=\"language-js\">const Loader = ({ size }) =&#x26;gt; {\n  return (\n    &#x26;lt;svg\n      className=&#x26;quot;loader&#x26;quot;\n      xmlns=&#x26;quot;http://www.w3.org/2000/svg&#x26;quot;\n      width={size}\n      height={size}\n      viewBox=&#x26;quot;0 0 24 24&#x26;quot;\n      fill=&#x26;quot;none&#x26;quot;\n      stroke=&#x26;quot;currentColor&#x26;quot;\n      strokeWidth=&#x26;quot;2&#x26;quot;\n      strokeLinecap=&#x26;quot;round&#x26;quot;\n      strokeLinejoin=&#x26;quot;round&#x26;quot;\n    &#x26;gt;\n      &#x26;lt;circle cx=&#x26;quot;12&#x26;quot; cy=&#x26;quot;12&#x26;quot; r=&#x26;quot;10&#x26;quot; /&#x26;gt;\n    &#x26;lt;/svg&#x26;gt;\n  );\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;Loader size={24} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a link formatted to send an email (<code>mailto:</code> link).</p>\n<ul>\n<li>Use the <code>email</code>, <code>subject</code> and <code>body</code> props to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Use <code>encodeURIcomponent</code> to safely encode the <code>subject</code> and <code>body</code> into the link URL.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>\n<pre><code class=\"language-js\">const Mailto = ({ email, subject = &#x26;quot;&#x26;quot;, body = &#x26;quot;&#x26;quot;, children }) =&#x26;gt; {\n  let params = subject || body ? &#x26;quot;?&#x26;quot; : &#x26;quot;&#x26;quot;;\n  if (subject) params += `subject=${encodeURIComponent(subject)}`;\n  if (body) params += `${subject ? &#x26;quot;&#x26;amp;&#x26;quot; : &#x26;quot;&#x26;quot;}body=${encodeURIComponent(body)}`;\n\nreturn &#x26;lt;a href={`mailto:${email}${params}`}&#x26;gt;{children}&#x26;lt;/a&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Mailto email=&#x26;quot;foo@bar.baz&#x26;quot; subject=&#x26;quot;Hello &#x26;amp; Welcome&#x26;quot; body=&#x26;quot;Hello world!&#x26;quot;&#x26;gt;\n    Mail me!\n  &#x26;lt;/Mailto&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a table with rows dynamically created from an array of objects and a list of property names.</p>\n<ul>\n<li>Use <code>Object.keys()</code>, <code>Array.prototype.filter()</code>, <code>Array.prototype.includes()</code> and <code>Array.prototype.reduce()</code> to produce a <code>filteredData</code> array, containing all objects with the keys specified in <code>propertyNames</code>.</li>\n<li>Render a <code>&lt;table&gt;</code> element with a set of columns equal to the amount of values in <code>propertyNames</code>.</li>\n<li>Use <code>Array.prototype.map()</code> to render each value in the <code>propertyNames</code> array as a <code>&lt;th&gt;</code> element.</li>\n<li>Use <code>Array.prototype.map()</code> to render each object in the <code>filteredData</code> array as a <code>&lt;tr&gt;</code> element, containing a <code>&lt;td&gt;</code> for each key in the object.</li>\n</ul>\n<p><em>This component does not work with nested objects and will break if there are nested objects inside any of the properties specified in <code>propertyNames</code></em></p>\n<pre><code class=\"language-js\">const MappedTable = ({ data, propertyNames }) =&#x26;gt; {\n  let filteredData = data.map((v) =&#x26;gt;\n    Object.keys(v)\n      .filter((k) =&#x26;gt; propertyNames.includes(k))\n      .reduce((acc, key) =&#x26;gt; ((acc[key] = v[key]), acc), {})\n  );\n  return (\n    &#x26;lt;table&#x26;gt;\n      &#x26;lt;thead&#x26;gt;\n        &#x26;lt;tr&#x26;gt;\n          {propertyNames.map((val) =&#x26;gt; (\n            &#x26;lt;th key={`h_${val}`}&#x26;gt;{val}&#x26;lt;/th&#x26;gt;\n          ))}\n        &#x26;lt;/tr&#x26;gt;\n      &#x26;lt;/thead&#x26;gt;\n      &#x26;lt;tbody&#x26;gt;\n        {filteredData.map((val, i) =&#x26;gt; (\n          &#x26;lt;tr key={`i_${i}`}&#x26;gt;\n            {propertyNames.map((p) =&#x26;gt; (\n              &#x26;lt;td key={`i_${i}_${p}`}&#x26;gt;{val[p]}&#x26;lt;/td&#x26;gt;\n            ))}\n          &#x26;lt;/tr&#x26;gt;\n        ))}\n      &#x26;lt;/tbody&#x26;gt;\n    &#x26;lt;/table&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const people = [\n  { name: &#x26;quot;John&#x26;quot;, surname: &#x26;quot;Smith&#x26;quot;, age: 42 },\n  { name: &#x26;quot;Adam&#x26;quot;, surname: &#x26;quot;Smith&#x26;quot;, gender: &#x26;quot;male&#x26;quot; },\n];\nconst propertyNames = [&#x26;quot;name&#x26;quot;, &#x26;quot;surname&#x26;quot;, &#x26;quot;age&#x26;quot;];\nReactDOM.render(\n  &#x26;lt;MappedTable data={people} propertyNames={propertyNames} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a Modal component, controllable through events.</p>\n<ul>\n<li>Define <code>keydownHandler</code>, a method which handles all keyboard events and is used to call <code>onClose</code> when the <code>Esc</code> key is pressed.</li>\n<li>Use the <code>useEffect()</code> hook to add or remove the <code>keydown</code> event listener to the <code>document</code>, calling <code>keydownHandler</code> for every event.</li>\n<li>Add a styled <code>&lt;span&gt;</code> element that acts as a close button, calling <code>onClose</code> when clicked.</li>\n<li>Use the <code>isVisible</code> prop passed down from the parent to determine if the modal should be displayed or not.</li>\n<li>To use the component, import <code>Modal</code> only once and then display it by passing a boolean value to the <code>isVisible</code> attribute.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb39-1\" title=\"1\"><span class=\"fu\">.modal</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">fixed</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-3\" title=\"3\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-4\" title=\"4\">  <span class=\"kw\">bottom</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-5\" title=\"5\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-6\" title=\"6\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-7\" title=\"7\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-8\" title=\"8\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">9999</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-9\" title=\"9\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-10\" title=\"10\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-11\" title=\"11\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-12\" title=\"12\">  <span class=\"kw\">background-color</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.25</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-13\" title=\"13\">  <span class=\"kw\">animation-name</span>: appear<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-14\" title=\"14\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">300</span><span class=\"dt\">ms</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb39-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb39-17\" title=\"17\"><span class=\"fu\">.modal-dialog</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-18\" title=\"18\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-19\" title=\"19\">  <span class=\"kw\">max-width</span>: <span class=\"dv\">550</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-20\" title=\"20\">  <span class=\"kw\">background</span>: <span class=\"cn\">white</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-21\" title=\"21\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-22\" title=\"22\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-23\" title=\"23\">  <span class=\"kw\">max-height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">vh</span> <span class=\"op\">-</span> <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-24\" title=\"24\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-25\" title=\"25\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-26\" title=\"26\">  <span class=\"kw\">flex-direction</span>: column<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-27\" title=\"27\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-28\" title=\"28\">  <span class=\"kw\">box-shadow</span>: <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.2</span><span class=\"fu\">)</span><span class=\"op\">,</span> <span class=\"dv\">0</span> <span class=\"dv\">6</span><span class=\"dt\">px</span> <span class=\"dv\">20</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.19</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-29\" title=\"29\">  <span class=\"kw\">-webkit-animation-name</span>: animatetop<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-30\" title=\"30\">  <span class=\"kw\">-webkit-animation-duration</span>: <span class=\"dv\">0.4</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-31\" title=\"31\">  <span class=\"kw\">animation-name</span>: slide-in<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-32\" title=\"32\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">0.5</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb39-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb39-35\" title=\"35\"><span class=\"fu\">.modal-header</span><span class=\"op\">,</span></a>\n<a class=\"sourceLine\" id=\"cb39-36\" title=\"36\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-37\" title=\"37\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-38\" title=\"38\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-39\" title=\"39\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-40\" title=\"40\">}</a>\n<a class=\"sourceLine\" id=\"cb39-41\" title=\"41\"></a>\n<a class=\"sourceLine\" id=\"cb39-42\" title=\"42\"><span class=\"fu\">.modal-header</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-43\" title=\"43\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-44\" title=\"44\">  <span class=\"kw\">justify-content</span>: space-between<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-45\" title=\"45\">}</a>\n<a class=\"sourceLine\" id=\"cb39-46\" title=\"46\"></a>\n<a class=\"sourceLine\" id=\"cb39-47\" title=\"47\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-48\" title=\"48\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-49\" title=\"49\">  <span class=\"kw\">justify-content</span>: flex-end<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-50\" title=\"50\">}</a>\n<a class=\"sourceLine\" id=\"cb39-51\" title=\"51\"></a>\n<a class=\"sourceLine\" id=\"cb39-52\" title=\"52\"><span class=\"fu\">.modal-close</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-53\" title=\"53\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-54\" title=\"54\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-55\" title=\"55\">  <span class=\"kw\">margin</span>: <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-56\" title=\"56\">}</a>\n<a class=\"sourceLine\" id=\"cb39-57\" title=\"57\"></a>\n<a class=\"sourceLine\" id=\"cb39-58\" title=\"58\"><span class=\"fu\">.modal-body</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-59\" title=\"59\">  <span class=\"kw\">overflow</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-60\" title=\"60\">}</a>\n<a class=\"sourceLine\" id=\"cb39-61\" title=\"61\"></a>\n<a class=\"sourceLine\" id=\"cb39-62\" title=\"62\"><span class=\"fu\">.modal-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-63\" title=\"63\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-64\" title=\"64\">}</a>\n<a class=\"sourceLine\" id=\"cb39-65\" title=\"65\"></a>\n<a class=\"sourceLine\" id=\"cb39-66\" title=\"66\"><span class=\"im\">@keyframes</span> appear {</a>\n<a class=\"sourceLine\" id=\"cb39-67\" title=\"67\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-68\" title=\"68\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-69\" title=\"69\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-70\" title=\"70\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-71\" title=\"71\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-72\" title=\"72\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-73\" title=\"73\">}</a>\n<a class=\"sourceLine\" id=\"cb39-74\" title=\"74\"></a>\n<a class=\"sourceLine\" id=\"cb39-75\" title=\"75\"><span class=\"im\">@keyframes</span> slide-in {</a>\n<a class=\"sourceLine\" id=\"cb39-76\" title=\"76\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-77\" title=\"77\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">-150</span><span class=\"dt\">px</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-78\" title=\"78\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-79\" title=\"79\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-80\" title=\"80\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">0</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-81\" title=\"81\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-82\" title=\"82\">}</a>\n</div>\n<pre><code class=\"language-js\">const Modal = ({ isVisible = false, title, content, footer, onClose }) =&#x26;gt; {\n  const keydownHandler = ({ key }) =&#x26;gt; {\n    switch (key) {\n      case &#x26;quot;Escape&#x26;quot;:\n        onClose();\n        break;\n      default:\n    }\n  };\n\nReact.useEffect(() =&#x26;gt; {\ndocument.addEventListener(&#x26;quot;keydown&#x26;quot;, keydownHandler);\nreturn () =&#x26;gt; document.removeEventListener(&#x26;quot;keydown&#x26;quot;, keydownHandler);\n});\n\nreturn !isVisible ? null : (\n&#x26;lt;div className=&#x26;quot;modal&#x26;quot; onClick={onClose}&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-dialog&#x26;quot; onClick={(e) =&#x26;gt; e.stopPropagation()}&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-header&#x26;quot;&#x26;gt;\n&#x26;lt;h3 className=&#x26;quot;modal-title&#x26;quot;&#x26;gt;{title}&#x26;lt;/h3&#x26;gt;\n&#x26;lt;span className=&#x26;quot;modal-close&#x26;quot; onClick={onClose}&#x26;gt;\n&#x26;amp;times;\n&#x26;lt;/span&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-body&#x26;quot;&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-content&#x26;quot;&#x26;gt;{content}&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n{footer &#x26;amp;&#x26;amp; &#x26;lt;div className=&#x26;quot;modal-footer&#x26;quot;&#x26;gt;{footer}&#x26;lt;/div&#x26;gt;}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nconst App = () =&#x26;gt; {\n  const [isModal, setModal] = React.useState(false);\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;button onClick={() =&#x26;gt; setModal(true)}&#x26;gt;Click Here&#x26;lt;/button&#x26;gt;\n      &#x26;lt;Modal\n        isVisible={isModal}\n        title=&#x26;quot;Modal Title&#x26;quot;\n        content={&#x26;lt;p&#x26;gt;Add your content here&#x26;lt;/p&#x26;gt;}\n        footer={&#x26;lt;button&#x26;gt;Cancel&#x26;lt;/button&#x26;gt;}\n        onClose={() =&#x26;gt; setModal(false)}\n      /&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;App /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a checkbox list that uses a callback function to pass its selected value/values to the parent component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>data</code> state variable and use the <code>options</code> prop to initialize its value.</li>\n<li>Create a <code>toggle</code> function that uses the spread operator (<code>...</code>) and <code>Array.prototype.splice()</code> to update the <code>data</code> state variable and call the <code>onChange</code> callback with any <code>checked</code> options.</li>\n<li>Use <code>Array.prototype.map()</code> to map the <code>data</code> state variable to individual <code>&lt;input type=\"checkbox\"&gt;</code> elements, each one wrapped in a <code>&lt;label&gt;</code>, binding the <code>onClick</code> handler to the <code>toggle</code> function.</li>\n</ul>\n<pre><code class=\"language-js\">const MultiselectCheckbox = ({ options, onChange }) =&#x26;gt; {\n  const [data, setData] = React.useState(options);\n\nconst toggle = (index) =&#x26;gt; {\nconst newData = [...data];\nnewData.splice(index, 1, {\nlabel: data[index].label,\nchecked: !data[index].checked,\n});\nsetData(newData);\nonChange(newData.filter((x) =&#x26;gt; x.checked));\n};\n\nreturn (\n&#x26;lt;&#x26;gt;\n{data.map((item, index) =&#x26;gt; (\n&#x26;lt;label key={item.label}&#x26;gt;\n&#x26;lt;input\nreadOnly\ntype=&#x26;quot;checkbox&#x26;quot;\nchecked={item.checked || false}\nonClick={() =&#x26;gt; toggle(index)}\n/&#x26;gt;\n{item.label}\n&#x26;lt;/label&#x26;gt;\n))}\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const options = [{ label: &#x26;quot;Item One&#x26;quot; }, { label: &#x26;quot;Item Two&#x26;quot; }];\n\nReactDOM.render(\n&#x26;lt;MultiselectCheckbox\noptions={options}\nonChange={(data) =&#x26;gt; {\nconsole.log(data);\n}}\n/&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a password input field with a reveal button.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>shown</code> state variable and set its value to <code>false</code>.</li>\n<li>When the <code>&lt;button&gt;</code> is clicked, execute <code>setShown</code>, toggling the <code>type</code> of the <code>&lt;input&gt;</code> between <code>\"text\"</code> and <code>\"password\"</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const PasswordRevealer = ({ value }) =&#x26;gt; {\n  const [shown, setShown] = React.useState(false);\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;input type={shown ? &#x26;quot;text&#x26;quot; : &#x26;quot;password&#x26;quot;} value={value} /&#x26;gt;\n      &#x26;lt;button onClick={() =&#x26;gt; setShown(!shown)}&#x26;gt;Show/Hide&#x26;lt;/button&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(&#x26;lt;PasswordRevealer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a button that animates a ripple effect when clicked.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>coords</code> and <code>isRippling</code> state variables for the pointer's coordinates and the animation state of the button respectively.</li>\n<li>Use a <code>useEffect()</code> hook to change the value of <code>isRippling</code> every time the <code>coords</code> state variable changes, starting the animation.</li>\n<li>Use <code>setTimeout()</code> in the previous hook to clear the animation after it's done playing.</li>\n<li>Use a <code>useEffect()</code> hook to reset <code>coords</code> whenever the <code>isRippling</code> state variable is <code>false.</code></li>\n<li>Handle the <code>onClick</code> event by updating the <code>coords</code> state variable and calling the passed callback.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb46\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb46-1\" title=\"1\"><span class=\"fu\">.ripple-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-2\" title=\"2\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-4\" title=\"4\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span> <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"cn\">#1976d2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-7\" title=\"7\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-8\" title=\"8\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-9\" title=\"9\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-10\" title=\"10\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb46-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb46-13\" title=\"13\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.ripple</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-14\" title=\"14\">  <span class=\"kw\">width</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-16\" title=\"16\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-17\" title=\"17\">  <span class=\"kw\">background</span>: <span class=\"cn\">#63a4ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-19\" title=\"19\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-20\" title=\"20\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">9999</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-21\" title=\"21\">  <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-22\" title=\"22\">  <span class=\"kw\">animation</span>: <span class=\"dv\">0.9</span><span class=\"dt\">s</span> <span class=\"dv\">ease</span> <span class=\"dv\">1</span> <span class=\"dv\">forwards</span> ripple-effect<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-23\" title=\"23\">}</a>\n<a class=\"sourceLine\" id=\"cb46-24\" title=\"24\"></a>\n<a class=\"sourceLine\" id=\"cb46-25\" title=\"25\"><span class=\"im\">@keyframes</span> ripple-effect {</a>\n<a class=\"sourceLine\" id=\"cb46-26\" title=\"26\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-27\" title=\"27\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">1</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-28\" title=\"28\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-29\" title=\"29\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-30\" title=\"30\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-31\" title=\"31\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">10</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-32\" title=\"32\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0.375</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-33\" title=\"33\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-34\" title=\"34\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-35\" title=\"35\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">35</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-36\" title=\"36\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-37\" title=\"37\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-38\" title=\"38\">}</a>\n<a class=\"sourceLine\" id=\"cb46-39\" title=\"39\"></a>\n<a class=\"sourceLine\" id=\"cb46-40\" title=\"40\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.content</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-41\" title=\"41\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-42\" title=\"42\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-43\" title=\"43\">}</a>\n</div>\n<pre><code class=\"language-js\">const RippleButton = ({ children, onClick }) =&#x26;gt; {\n  const [coords, setCoords] = React.useState({ x: -1, y: -1 });\n  const [isRippling, setIsRippling] = React.useState(false);\n\nReact.useEffect(() =&#x26;gt; {\nif (coords.x !== -1 &#x26;amp;&#x26;amp; coords.y !== -1) {\nsetIsRippling(true);\nsetTimeout(() =&#x26;gt; setIsRippling(false), 300);\n} else setIsRippling(false);\n}, [coords]);\n\nReact.useEffect(() =&#x26;gt; {\nif (!isRippling) setCoords({ x: -1, y: -1 });\n}, [isRippling]);\n\nreturn (\n&#x26;lt;button\nclassName=&#x26;quot;ripple-button&#x26;quot;\nonClick={(e) =&#x26;gt; {\nconst rect = e.target.getBoundingClientRect();\nsetCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top });\nonClick &#x26;amp;&#x26;amp; onClick(e);\n}}\n&#x26;gt;\n{isRippling ? (\n&#x26;lt;span\nclassName=&#x26;quot;ripple&#x26;quot;\nstyle={{\n            left: coords.x,\n            top: coords.y,\n          }}\n/&#x26;gt;\n) : (\n&#x26;quot;&#x26;quot;\n)}\n&#x26;lt;span className=&#x26;quot;content&#x26;quot;&#x26;gt;{children}&#x26;lt;/span&#x26;gt;\n&#x26;lt;/button&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;RippleButton onClick={(e) =&#x26;gt; console.log(e)}&#x26;gt;Click me&#x26;lt;/RippleButton&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;select&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the the <code>selectedValue</code> prop as the <code>defaultValue</code> of the <code>&lt;select&gt;</code> element to set its initial value..</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>Use <code>Array.prototype.map()</code> on the <code>values</code> array to create an <code>&lt;option&gt;</code> element for each passed value.</li>\n<li>Each item in <code>values</code> must be a 2-element array, where the first element is the <code>value</code> of the item and the second one is the displayed text for it.</li>\n</ul>\n<pre><code class=\"language-js\">const Select = ({ values, onValueChange, selectedValue, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;select\n      defaultValue={selectedValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    &#x26;gt;\n      {values.map(([value, text]) =&#x26;gt; (\n        &#x26;lt;option key={value} value={value}&#x26;gt;\n          {text}\n        &#x26;lt;/option&#x26;gt;\n      ))}\n    &#x26;lt;/select&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const choices = [\n  [&#x26;quot;grapefruit&#x26;quot;, &#x26;quot;Grapefruit&#x26;quot;],\n  [&#x26;quot;lime&#x26;quot;, &#x26;quot;Lime&#x26;quot;],\n  [&#x26;quot;coconut&#x26;quot;, &#x26;quot;Coconut&#x26;quot;],\n  [&#x26;quot;mango&#x26;quot;, &#x26;quot;Mango&#x26;quot;],\n];\nReactDOM.render(\n  &#x26;lt;Select\n    values={choices}\n    selectedValue=&#x26;quot;lime&#x26;quot;\n    onValueChange={(val) =&#x26;gt; console.log(val)}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled range input element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Set the <code>type</code> of the <code>&lt;input&gt;</code> element to <code>\"range\"</code> to create a slider.</li>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const Slider = ({\n  min = 0,\n  max = 100,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      type=&#x26;quot;range&#x26;quot;\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Slider onValueChange={(val) =&#x26;gt; console.log(val)} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a star rating component.</p>\n<ul>\n<li>Define a component, called <code>Star</code> that will render each individual star with the appropriate appearance, based on the parent component's state.</li>\n<li>In the <code>StarRating</code> component, use the <code>useState()</code> hook to define the <code>rating</code> and <code>selection</code> state variables with the appropriate initial values.</li>\n<li>Create a method, <code>hoverOver</code>, that updates <code>selected</code> according to the provided <code>event</code>, using the .<code>data-star-id</code> attribute of the event's target or resets it to <code>0</code> if called with a <code>null</code> argument.</li>\n<li>Use <code>Array.from()</code> to create an array of <code>5</code> elements and <code>Array.prototype.map()</code> to create individual <code>&lt;Star&gt;</code> components.</li>\n<li>Handle the <code>onMouseOver</code> and <code>onMouseLeave</code> events of the wrapping element using <code>hoverOver</code> and the <code>onClick</code> event using <code>setRating</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb53\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb53-1\" title=\"1\"><span class=\"fu\">.star</span> {</a>\n<a class=\"sourceLine\" id=\"cb53-2\" title=\"2\">  <span class=\"kw\">color</span>: <span class=\"cn\">#ff9933</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-3\" title=\"3\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-4\" title=\"4\">}</a>\n</div>\n<pre><code class=\"language-js\">const Star = ({ marked, starId }) =&#x26;gt; {\n  return (\n    &#x26;lt;span data-star-id={starId} className=&#x26;quot;star&#x26;quot; role=&#x26;quot;button&#x26;quot;&#x26;gt;\n      {marked ? &#x26;quot;\\u2605&#x26;quot; : &#x26;quot;\\u2606&#x26;quot;}\n    &#x26;lt;/span&#x26;gt;\n  );\n};\n\nconst StarRating = ({ value }) =&#x26;gt; {\nconst [rating, setRating] = React.useState(parseInt(value) || 0);\nconst [selection, setSelection] = React.useState(0);\n\nconst hoverOver = (event) =&#x26;gt; {\nlet val = 0;\nif (event &#x26;amp;&#x26;amp; event.target &#x26;amp;&#x26;amp; event.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;))\nval = event.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;);\nsetSelection(val);\n};\nreturn (\n&#x26;lt;div\nonMouseOut={() =&#x26;gt; hoverOver(null)}\nonClick={(e) =&#x26;gt;\nsetRating(e.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;) || rating)\n}\nonMouseOver={hoverOver}\n&#x26;gt;\n{Array.from({ length: 5 }, (v, i) =&#x26;gt; (\n&#x26;lt;Star\nstarId={i + 1}\nkey={`star_${i + 1}`}\nmarked={selection ? selection &#x26;gt;= i + 1 : rating &#x26;gt;= i + 1}\n/&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;StarRating value={2} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a tabbed menu and view component.</p>\n<ul>\n<li>Define a <code>Tabs</code> component that uses the <code>useState()</code> hook to initialize the value of the <code>bindIndex</code> state variable to <code>defaultIndex</code>.</li>\n<li>Define a <code>TabItem</code> component and filter <code>children</code> passed to the <code>Tabs</code> component to remove unnecessary nodes except for <code>TabItem</code> by identifying the function's name.</li>\n<li>Define <code>changeTab</code>, which will be executed when clicking a <code>&lt;button&gt;</code> from the menu.</li>\n<li><code>changeTab</code> executes the passed callback, <code>onTabClick</code>, and updates <code>bindIndex</code> based on the clicked element.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the menu and view of the tabs, using the value of <code>binIndex</code> to determine the active tab and apply the correct <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb56-1\" title=\"1\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button {</a>\n<a class=\"sourceLine\" id=\"cb56-2\" title=\"2\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-3\" title=\"3\">  <span class=\"kw\">padding</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-4\" title=\"4\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-5\" title=\"5\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb56-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb56-9\" title=\"9\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"fu\">.focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-10\" title=\"10\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb56-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb56-13\" title=\"13\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"in\">:hover</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-14\" title=\"14\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb56-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb56-17\" title=\"17\"><span class=\"fu\">.tab-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-19\" title=\"19\">}</a>\n<a class=\"sourceLine\" id=\"cb56-20\" title=\"20\"></a>\n<a class=\"sourceLine\" id=\"cb56-21\" title=\"21\"><span class=\"fu\">.tab-content.selected</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-22\" title=\"22\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-23\" title=\"23\">}</a>\n</div>\n<pre><code class=\"language-js\">const TabItem = (props) =&#x26;gt; &#x26;lt;div {...props} /&#x26;gt;;\n\nconst Tabs = ({ defaultIndex = 0, onTabClick, children }) =&#x26;gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\nconst changeTab = (newIndex) =&#x26;gt; {\nif (typeof onItemClick === &#x26;quot;function&#x26;quot;) onItemClick(itemIndex);\nsetBindIndex(newIndex);\n};\nconst items = children.filter((item) =&#x26;gt; item.type.name === &#x26;quot;TabItem&#x26;quot;);\n\nreturn (\n&#x26;lt;div className=&#x26;quot;wrapper&#x26;quot;&#x26;gt;\n&#x26;lt;div className=&#x26;quot;tab-menu&#x26;quot;&#x26;gt;\n{items.map(({ props: { index, label } }) =&#x26;gt; (\n&#x26;lt;button\nkey={`tab-btn-${index}`}\nonClick={() =&#x26;gt; changeTab(index)}\nclassName={bindIndex === index ? &#x26;quot;focus&#x26;quot; : &#x26;quot;&#x26;quot;}\n&#x26;gt;\n{label}\n&#x26;lt;/button&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div className=&#x26;quot;tab-view&#x26;quot;&#x26;gt;\n{items.map(({ props }) =&#x26;gt; (\n&#x26;lt;div\n{...props}\nclassName={`tab-content ${ bindIndex === props.index ? &#x26;quot;selected&#x26;quot; : &#x26;quot;&#x26;quot; }`}\nkey={`tab-content-${props.index}`}\n/&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Tabs defaultIndex=&#x26;quot;1&#x26;quot; onTabClick={console.log}&#x26;gt;\n    &#x26;lt;TabItem label=&#x26;quot;A&#x26;quot; index=&#x26;quot;1&#x26;quot;&#x26;gt;\n      Lorem ipsum\n    &#x26;lt;/TabItem&#x26;gt;\n    &#x26;lt;TabItem label=&#x26;quot;B&#x26;quot; index=&#x26;quot;2&#x26;quot;&#x26;gt;\n      Dolor sit amet\n    &#x26;lt;/TabItem&#x26;gt;\n  &#x26;lt;/Tabs&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a tag input field.</p>\n<ul>\n<li>Define a <code>TagInput</code> component and use the <code>useState()</code> hook to initialize an array from <code>tags</code>.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the list of tags.</li>\n<li>Define the <code>addTagData</code> method, which will be executed when pressing the <code>Enter</code> key.</li>\n<li>The <code>addTagData</code> method calls <code>setTagData</code> to add the new tag using the spread (<code>...</code>) operator to prepend the existing tags and add the new tag at the end of the <code>tagData</code> array.</li>\n<li>Define the <code>removeTagData</code> method, which will be executed on clicking the delete icon in the tag.</li>\n<li>Use <code>Array.prototype.filter()</code> in the <code>removeTagData</code> method to remove the tag using its <code>index</code> to filter it out from the <code>tagData</code> array.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb59\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb59-1\" title=\"1\"><span class=\"fu\">.tag-input</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-2\" title=\"2\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-3\" title=\"3\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-4\" title=\"4\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-6\" title=\"6\">  <span class=\"kw\">border</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d6d8da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb59-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb59-10\" title=\"10\"><span class=\"fu\">.tag-input</span> input {</a>\n<a class=\"sourceLine\" id=\"cb59-11\" title=\"11\">  <span class=\"kw\">flex</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-12\" title=\"12\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-13\" title=\"13\">  <span class=\"kw\">height</span>: <span class=\"dv\">46</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-14\" title=\"14\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-15\" title=\"15\">  <span class=\"kw\">padding</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-16\" title=\"16\">}</a>\n<a class=\"sourceLine\" id=\"cb59-17\" title=\"17\"></a>\n<a class=\"sourceLine\" id=\"cb59-18\" title=\"18\"><span class=\"fu\">.tag-input</span> input<span class=\"in\">:focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-19\" title=\"19\">  <span class=\"kw\">outline</span>: <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-20\" title=\"20\">}</a>\n<a class=\"sourceLine\" id=\"cb59-21\" title=\"21\"></a>\n<a class=\"sourceLine\" id=\"cb59-22\" title=\"22\"><span class=\"fu\">.tags</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-23\" title=\"23\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-24\" title=\"24\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-25\" title=\"25\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-26\" title=\"26\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-27\" title=\"27\">}</a>\n<a class=\"sourceLine\" id=\"cb59-28\" title=\"28\"></a>\n<a class=\"sourceLine\" id=\"cb59-29\" title=\"29\"><span class=\"fu\">.tag</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-30\" title=\"30\">  <span class=\"kw\">width</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-31\" title=\"31\">  <span class=\"kw\">height</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-32\" title=\"32\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-33\" title=\"33\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-34\" title=\"34\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-35\" title=\"35\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-36\" title=\"36\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-37\" title=\"37\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-38\" title=\"38\">  <span class=\"kw\">list-style</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-39\" title=\"39\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-40\" title=\"40\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-41\" title=\"41\">  <span class=\"kw\">background</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-42\" title=\"42\">}</a>\n<a class=\"sourceLine\" id=\"cb59-43\" title=\"43\"></a>\n<a class=\"sourceLine\" id=\"cb59-44\" title=\"44\"><span class=\"fu\">.tag-title</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-45\" title=\"45\">  <span class=\"kw\">margin-top</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-46\" title=\"46\">}</a>\n<a class=\"sourceLine\" id=\"cb59-47\" title=\"47\"></a>\n<a class=\"sourceLine\" id=\"cb59-48\" title=\"48\"><span class=\"fu\">.tag-close-icon</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-49\" title=\"49\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-50\" title=\"50\">  <span class=\"kw\">width</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-51\" title=\"51\">  <span class=\"kw\">height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-52\" title=\"52\">  <span class=\"kw\">line-height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-53\" title=\"53\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-54\" title=\"54\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-55\" title=\"55\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-56\" title=\"56\">  <span class=\"kw\">color</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-57\" title=\"57\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-58\" title=\"58\">  <span class=\"kw\">background</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-59\" title=\"59\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-60\" title=\"60\">}</a>\n</div>\n<pre><code class=\"language-js\">const TagInput = ({ tags }) =&#x26;gt; {\n  const [tagData, setTagData] = React.useState(tags);\n  const removeTagData = (indexToRemove) =&#x26;gt; {\n    setTagData([...tagData.filter((_, index) =&#x26;gt; index !== indexToRemove)]);\n  };\n  const addTagData = (event) =&#x26;gt; {\n    if (event.target.value !== &#x26;quot;&#x26;quot;) {\n      setTagData([...tagData, event.target.value]);\n      event.target.value = &#x26;quot;&#x26;quot;;\n    }\n  };\n  return (\n    &#x26;lt;div className=&#x26;quot;tag-input&#x26;quot;&#x26;gt;\n      &#x26;lt;ul className=&#x26;quot;tags&#x26;quot;&#x26;gt;\n        {tagData.map((tag, index) =&#x26;gt; (\n          &#x26;lt;li key={index} className=&#x26;quot;tag&#x26;quot;&#x26;gt;\n            &#x26;lt;span className=&#x26;quot;tag-title&#x26;quot;&#x26;gt;{tag}&#x26;lt;/span&#x26;gt;\n            &#x26;lt;span\n              className=&#x26;quot;tag-close-icon&#x26;quot;\n              onClick={() =&#x26;gt; removeTagData(index)}\n            &#x26;gt;\n              x\n            &#x26;lt;/span&#x26;gt;\n          &#x26;lt;/li&#x26;gt;\n        ))}\n      &#x26;lt;/ul&#x26;gt;\n      &#x26;lt;input\n        type=&#x26;quot;text&#x26;quot;\n        onKeyUp={(event) =&#x26;gt; (event.key === &#x26;quot;Enter&#x26;quot; ? addTagData(event) : null)}\n        placeholder=&#x26;quot;Press enter to add a tag&#x26;quot;\n      /&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;TagInput tags={[&#x26;quot;Nodejs&#x26;quot;, &#x26;quot;MongoDB&#x26;quot;]} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;textarea&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const TextArea = ({\n  cols = 20,\n  rows = 2,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&#x26;gt; {\n  return (\n    &#x26;lt;textarea\n      cols={cols}\n      rows={rows}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;TextArea\n    placeholder=&#x26;quot;Insert some text here...&#x26;quot;\n    onValueChange={(val) =&#x26;gt; console.log(val)}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a toggle component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>isToggleOn</code> state variable to <code>defaultToggled</code>.</li>\n<li>Render an <code>&lt;input&gt;</code> and bind its <code>onClick</code> event to update the <code>isToggledOn</code> state variable, applying the appropriate <code>className</code> to the wrapping <code>&lt;label&gt;</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb64-1\" title=\"1\"><span class=\"fu\">.toggle</span> input<span class=\"ex\">[type</span><span class=\"op\">=</span><span class=\"st\">&quot;checkbox&quot;</span><span class=\"ex\">]</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb64-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb64-5\" title=\"5\"><span class=\"fu\">.toggle.on</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-6\" title=\"6\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">green</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb64-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb64-9\" title=\"9\"><span class=\"fu\">.toggle.off</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-10\" title=\"10\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">red</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-11\" title=\"11\">}</a>\n</div>\n<pre><code class=\"language-js\">const Toggle = ({ defaultToggled = false }) =&#x26;gt; {\n  const [isToggleOn, setIsToggleOn] = React.useState(defaultToggled);\n\nreturn (\n&#x26;lt;label className={isToggleOn ? &#x26;quot;toggle on&#x26;quot; : &#x26;quot;toggle off&#x26;quot;}&#x26;gt;\n&#x26;lt;input\ntype=&#x26;quot;checkbox&#x26;quot;\nchecked={isToggleOn}\nonChange={() =&#x26;gt; setIsToggleOn(!isToggleOn)}\n/&#x26;gt;\n{isToggleOn ? &#x26;quot;ON&#x26;quot; : &#x26;quot;OFF&#x26;quot;}\n&#x26;lt;/label&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;Toggle /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a tooltip component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>show</code> variable and initialize it to <code>false</code>.</li>\n<li>Render a container element that contains the tooltip element and the <code>children</code> passed to the component.</li>\n<li>Handle the <code>onMouseEnter</code> and <code>onMouseLeave</code> methods, by altering the value of the <code>show</code> variable, toggling the <code>className</code> of the tooltip.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb67\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb67-1\" title=\"1\"><span class=\"fu\">.tooltip-container</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb67-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb67-5\" title=\"5\"><span class=\"fu\">.tooltip-box</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-7\" title=\"7\">  <span class=\"kw\">background</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-8\" title=\"8\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-9\" title=\"9\">  <span class=\"kw\">padding</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-10\" title=\"10\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-11\" title=\"11\">  <span class=\"kw\">top</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">+</span> <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-12\" title=\"12\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb67-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb67-15\" title=\"15\"><span class=\"fu\">.tooltip-box.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-16\" title=\"16\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb67-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb67-19\" title=\"19\"><span class=\"fu\">.tooltip-arrow</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-20\" title=\"20\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-21\" title=\"21\">  <span class=\"kw\">top</span>: <span class=\"dv\">-10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-22\" title=\"22\">  <span class=\"kw\">left</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-23\" title=\"23\">  <span class=\"kw\">border-width</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-24\" title=\"24\">  <span class=\"kw\">border-style</span>: <span class=\"dv\">solid</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-25\" title=\"25\">  <span class=\"kw\">border-color</span>: <span class=\"dv\">transparent</span> <span class=\"dv\">transparent</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-26\" title=\"26\">}</a>\n</div>\n<pre><code class=\"language-js\">const Tooltip = ({ children, text, ...rest }) =&#x26;gt; {\n  const [show, setShow] = React.useState(false);\n\nreturn (\n&#x26;lt;div className=&#x26;quot;tooltip-container&#x26;quot;&#x26;gt;\n&#x26;lt;div className={show ? &#x26;quot;tooltip-box visible&#x26;quot; : &#x26;quot;tooltip-box&#x26;quot;}&#x26;gt;\n{text}\n&#x26;lt;span className=&#x26;quot;tooltip-arrow&#x26;quot; /&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div\nonMouseEnter={() =&#x26;gt; setShow(true)}\nonMouseLeave={() =&#x26;gt; setShow(false)}\n{...rest}\n&#x26;gt;\n{children}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Tooltip text=&#x26;quot;Simple tooltip&#x26;quot;&#x26;gt;\n    &#x26;lt;button&#x26;gt;Hover me!&#x26;lt;/button&#x26;gt;\n  &#x26;lt;/Tooltip&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a tree view of a JSON object or array with collapsible content.</p>\n<ul>\n<li>Use the value of the <code>toggled</code> prop to determine the initial state of the content (collapsed/expanded).</li>\n<li>Use the <code>useState()</code> hook to create the <code>isToggled</code> state variable and give it the value of the <code>toggled</code> prop initially.</li>\n<li>Render a <code>&lt;span&gt;</code> element and bind its <code>onClick</code> event to alter the component's <code>isToggled</code> state.</li>\n<li>Determine the appearance of the component, based on <code>isParentToggled</code>, <code>isToggled</code>, <code>name</code> and checking for <code>Array.isArray()</code> on <code>data</code>.</li>\n<li>For each child in <code>data</code>, determine if it is an object or array and recursively render a sub-tree or a text element with the appropriate style.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb70\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb70-1\" title=\"1\"><span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-2\" title=\"2\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-3\" title=\"3\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb70-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb70-6\" title=\"6\"><span class=\"fu\">.tree-element.is-child</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-7\" title=\"7\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb70-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb70-10\" title=\"10\">div<span class=\"fu\">.tree-element</span><span class=\"in\">:before</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-11\" title=\"11\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-12\" title=\"12\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-13\" title=\"13\">  <span class=\"kw\">top</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-14\" title=\"14\">  <span class=\"kw\">left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">-</span> <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-16\" title=\"16\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb70-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb70-19\" title=\"19\">p<span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-20\" title=\"20\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-21\" title=\"21\">}</a>\n<a class=\"sourceLine\" id=\"cb70-22\" title=\"22\"></a>\n<a class=\"sourceLine\" id=\"cb70-23\" title=\"23\"><span class=\"fu\">.toggler</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-24\" title=\"24\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-25\" title=\"25\">  <span class=\"kw\">top</span>: <span class=\"dv\">10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-26\" title=\"26\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-27\" title=\"27\">  <span class=\"kw\">width</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-28\" title=\"28\">  <span class=\"kw\">height</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-29\" title=\"29\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-30\" title=\"30\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-31\" title=\"31\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-32\" title=\"32\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb70-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb70-35\" title=\"35\"><span class=\"fu\">.toggler.closed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-36\" title=\"36\">  <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">90</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-37\" title=\"37\">}</a>\n<a class=\"sourceLine\" id=\"cb70-38\" title=\"38\"></a>\n<a class=\"sourceLine\" id=\"cb70-39\" title=\"39\"><span class=\"fu\">.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-40\" title=\"40\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-41\" title=\"41\">}</a>\n</div>\n<pre><code class=\"language-js\">const TreeView = ({\n  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true,\n}) =&#x26;gt; {\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n\nreturn (\n&#x26;lt;div\nclassName={`tree-element ${isParentToggled &#x26;amp;&#x26;amp; &#x26;quot;collapsed&#x26;quot;} ${ isChildElement &#x26;amp;&#x26;amp; &#x26;quot;is-child&#x26;quot; }`}\n&#x26;gt;\n&#x26;lt;span\nclassName={isToggled ? &#x26;quot;toggler&#x26;quot; : &#x26;quot;toggler closed&#x26;quot;}\nonClick={() =&#x26;gt; setIsToggled(!isToggled)}\n/&#x26;gt;\n{name ? &#x26;lt;strong&#x26;gt;&#x26;amp;nbsp;&#x26;amp;nbsp;{name}: &#x26;lt;/strong&#x26;gt; : &#x26;lt;span&#x26;gt;&#x26;amp;nbsp;&#x26;amp;nbsp;&#x26;lt;/span&#x26;gt;}\n{isDataArray ? &#x26;quot;[&#x26;quot; : &#x26;quot;{&#x26;quot;}\n{!isToggled &#x26;amp;&#x26;amp; &#x26;quot;...&#x26;quot;}\n{Object.keys(data).map((v, i, a) =&#x26;gt;\ntypeof data[v] === &#x26;quot;object&#x26;quot; ? (\n&#x26;lt;TreeView\nkey={`${name}-${v}-${i}`}\ndata={data[v]}\nisLast={i === a.length - 1}\nname={isDataArray ? null : v}\nisChildElement\nisParentToggled={isParentToggled &#x26;amp;&#x26;amp; isToggled}\n/&#x26;gt;\n) : (\n&#x26;lt;p\nkey={`${name}-${v}-${i}`}\nclassName={isToggled ? &#x26;quot;tree-element&#x26;quot; : &#x26;quot;tree-element collapsed&#x26;quot;}\n&#x26;gt;\n{isDataArray ? &#x26;quot;&#x26;quot; : &#x26;lt;strong&#x26;gt;{v}: &#x26;lt;/strong&#x26;gt;}\n{data[v]}\n{i === a.length - 1 ? &#x26;quot;&#x26;quot; : &#x26;quot;,&#x26;quot;}\n&#x26;lt;/p&#x26;gt;\n)\n)}\n{isDataArray ? &#x26;quot;]&#x26;quot; : &#x26;quot;}&#x26;quot;}\n{!isLast ? &#x26;quot;,&#x26;quot; : &#x26;quot;&#x26;quot;}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n&#x3C;hr />\n\n```js\n\nconst data = {\n  lorem: {\n    ipsum: &#x26;quot;dolor sit&#x26;quot;,\n    amet: {\n      consectetur: &#x26;quot;adipiscing&#x26;quot;,\n      elit: [\n        &#x26;quot;duis&#x26;quot;,\n        &#x26;quot;vitae&#x26;quot;,\n        {\n          semper: &#x26;quot;orci&#x26;quot;,\n        },\n        {\n          est: &#x26;quot;sed ornare&#x26;quot;,\n        },\n        &#x26;quot;etiam&#x26;quot;,\n        [&#x26;quot;laoreet&#x26;quot;, &#x26;quot;tincidunt&#x26;quot;],\n        [&#x26;quot;vestibulum&#x26;quot;, &#x26;quot;ante&#x26;quot;],\n      ],\n    },\n    ipsum: &#x26;quot;primis&#x26;quot;,\n  },\n};\nReactDOM.render(\n  &#x26;lt;TreeView data={data} name=&#x26;quot;data&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field's initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const UncontrolledInput = ({ defaultValue, onValueChange, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;UncontrolledInput\n    type=&#x26;quot;text&#x26;quot;\n    placeholder=&#x26;quot;Insert some text here...&#x26;quot;\n    onValueChange={console.log}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Handles asynchronous calls.</p>\n<ul>\n<li>Create a custom hook that takes a handler function, <code>fn</code>.</li>\n<li>Define a reducer function and an initial state for the custom hook's state.</li>\n<li>Use the <code>useReducer()</code> hook to initialize the <code>state</code> variable and the <code>dispatch</code> function.</li>\n<li>Define an asynchronous <code>run</code> function that will run the provided callback, <code>fn</code>, while using <code>dispatch</code> to update <code>state</code> as necessary.</li>\n<li>Return an object containing the properties of <code>state</code> (<code>value</code>, <code>error</code> and <code>loading</code>) and the <code>run</code> function.</li>\n</ul>\n<pre><code class=\"language-js\">const useAsync = (fn) =&#x26;gt; {\n  const initialState = { loading: false, error: null, value: null };\n  const stateReducer = (_, action) =&#x26;gt; {\n    switch (action.type) {\n      case &#x26;quot;start&#x26;quot;:\n        return { loading: true, error: null, value: null };\n      case &#x26;quot;finish&#x26;quot;:\n        return { loading: false, error: null, value: action.value };\n      case &#x26;quot;error&#x26;quot;:\n        return { loading: false, error: action.error, value: null };\n    }\n  };\n\nconst [state, dispatch] = React.useReducer(stateReducer, initialState);\n\nconst run = async (args = null) =&#x26;gt; {\ntry {\ndispatch({ type: &#x26;quot;start&#x26;quot; });\nconst value = await fn(args);\ndispatch({ type: &#x26;quot;finish&#x26;quot;, value });\n} catch (error) {\ndispatch({ type: &#x26;quot;error&#x26;quot;, error });\n}\n};\n\nreturn { ...state, run };\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const RandomImage = (props) =&#x26;gt; {\n  const imgFetch = useAsync((url) =&#x26;gt;\n    fetch(url).then((response) =&#x26;gt; response.json())\n  );\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;button\nonClick={() =&#x26;gt; imgFetch.run(&#x26;quot;https://dog.ceo/api/breeds/image/random&#x26;quot;)}\ndisabled={imgFetch.isLoading}\n&#x26;gt;\nLoad image\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;br /&#x26;gt;\n{imgFetch.loading &#x26;amp;&#x26;amp; &#x26;lt;div&#x26;gt;Loading...&#x26;lt;/div&#x26;gt;}\n{imgFetch.error &#x26;amp;&#x26;amp; &#x26;lt;div&#x26;gt;Error {imgFetch.error}&#x26;lt;/div&#x26;gt;}\n{imgFetch.value &#x26;amp;&#x26;amp; (\n&#x26;lt;img\nsrc={imgFetch.value.message}\nalt=&#x26;quot;avatar&#x26;quot;\nwidth={400}\nheight=&#x26;quot;auto&#x26;quot;\n/&#x26;gt;\n)}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;RandomImage /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Handles the event of clicking inside the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>'click'</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickInside</code> hook.</li>\n</ul>\n<pre><code class=\"language-js\">const useClickInside = (ref, callback) =&#x26;gt; {\n  const handleClick = (e) =&#x26;gt; {\n    if (ref.current &#x26;amp;&#x26;amp; ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&#x26;gt; {\n    document.addEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    return () =&#x26;gt; {\n      document.removeEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    };\n  });\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ClickBox = ({ onClickInside }) =&#x26;gt; {\n  const clickRef = React.useRef();\n  useClickInside(clickRef, onClickInside);\n  return (\n    &#x26;lt;div\n      className=&#x26;quot;click-box&#x26;quot;\n      ref={clickRef}\n      style={{\n        border: &#x26;quot;2px dashed orangered&#x26;quot;,\n        height: 200,\n        width: 400,\n        display: &#x26;quot;flex&#x26;quot;,\n        justifyContent: &#x26;quot;center&#x26;quot;,\n        alignItems: &#x26;quot;center&#x26;quot;,\n      }}\n    &#x26;gt;\n      &#x26;lt;p&#x26;gt;Click inside this element&#x26;lt;/p&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(\n&#x26;lt;ClickBox onClickInside={() =&#x26;gt; alert(&#x26;quot;click inside&#x26;quot;)} /&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Handles the event of clicking outside of the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>click</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickOutside</code> hook.</li>\n</ul>\n<pre><code class=\"language-js\">const useClickOutside = (ref, callback) =&#x26;gt; {\n  const handleClick = (e) =&#x26;gt; {\n    if (ref.current &#x26;amp;&#x26;amp; !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&#x26;gt; {\n    document.addEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    return () =&#x26;gt; {\n      document.removeEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    };\n  });\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ClickBox = ({ onClickOutside }) =&#x26;gt; {\n  const clickRef = React.useRef();\n  useClickOutside(clickRef, onClickOutside);\n  return (\n    &#x26;lt;div\n      className=&#x26;quot;click-box&#x26;quot;\n      ref={clickRef}\n      style={{\n        border: &#x26;quot;2px dashed orangered&#x26;quot;,\n        height: 200,\n        width: 400,\n        display: &#x26;quot;flex&#x26;quot;,\n        justifyContent: &#x26;quot;center&#x26;quot;,\n        alignItems: &#x26;quot;center&#x26;quot;,\n      }}\n    &#x26;gt;\n      &#x26;lt;p&#x26;gt;Click out of this element&#x26;lt;/p&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(\n&#x26;lt;ClickBox onClickOutside={() =&#x26;gt; alert(&#x26;quot;click outside&#x26;quot;)} /&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Executes a callback immediately after a component is mounted.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument to execute the provided callback only once when the component is mounted.</li>\n<li>Behaves like the <code>componentDidMount()</code> lifecycle method of class components.</li>\n</ul>\n<pre><code class=\"language-js\">const useComponentDidMount = (onMountHandler) =&#x26;gt; {\n  React.useEffect(() =&#x26;gt; {\n    onMountHandler();\n  }, []);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Mounter = () =&#x26;gt; {\n  useComponentDidMount(() =&#x26;gt; console.log(&#x26;quot;Component did mount&#x26;quot;));\n\nreturn &#x26;lt;div&#x26;gt;Check the console!&#x26;lt;/div&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Mounter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Executes a callback immediately before a component is unmounted and destroyed.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument and return the provided callback to be executed only once before cleanup.</li>\n<li>Behaves like the <code>componentWillUnmount()</code> lifecycle method of class components.</li>\n</ul>\n<pre><code class=\"language-js\">const useComponentWillUnmount = (onUnmountHandler) =&#x26;gt; {\n  React.useEffect(\n    () =&#x26;gt; () =&#x26;gt; {\n      onUnmountHandler();\n    },\n    []\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Unmounter = () =&#x26;gt; {\n  useComponentWillUnmount(() =&#x26;gt; console.log(&#x26;quot;Component will unmount&#x26;quot;));\n\nreturn &#x26;lt;div&#x26;gt;Check the console!&#x26;lt;/div&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Unmounter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Copies the given text to the clipboard.</p>\n<ul>\n<li>Use the <a href=\"/js/s/copy-to-clipboard/\">copyToClipboard</a> snippet to copy the text to clipboard.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>copied</code> variable.</li>\n<li>Use the <code>useCallback()</code> hook to create a callback for the <code>copyToClipboard</code> method.</li>\n<li>Use the <code>useEffect()</code> hook to reset the <code>copied</code> state variable if the <code>text</code> changes.</li>\n<li>Return the <code>copied</code> state variable and the <code>copy</code> callback.</li>\n</ul>\n<pre><code class=\"language-js\">const useCopyToClipboard = (text) =&#x26;gt; {\n  const copyToClipboard = (str) =&#x26;gt; {\n    const el = document.createElement(&#x26;quot;textarea&#x26;quot;);\n    el.value = str;\n    el.setAttribute(&#x26;quot;readonly&#x26;quot;, &#x26;quot;&#x26;quot;);\n    el.style.position = &#x26;quot;absolute&#x26;quot;;\n    el.style.left = &#x26;quot;-9999px&#x26;quot;;\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount &#x26;gt; 0\n        ? document.getSelection().getRangeAt(0)\n        : false;\n    el.select();\n    const success = document.execCommand(&#x26;quot;copy&#x26;quot;);\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    return success;\n  };\n\nconst [copied, setCopied] = React.useState(false);\n\nconst copy = React.useCallback(() =&#x26;gt; {\nif (!copied) setCopied(copyToClipboard(text));\n}, [text]);\nReact.useEffect(() =&#x26;gt; () =&#x26;gt; setCopied(false), [text]);\n\nreturn [copied, copy];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const TextCopy = (props) =&#x26;gt; {\n  const [copied, copy] = useCopyToClipboard(&#x26;quot;Lorem ipsum&#x26;quot;);\n  return (\n    &#x26;lt;div&#x26;gt;\n      &#x26;lt;button onClick={copy}&#x26;gt;Click to copy&#x26;lt;/button&#x26;gt;\n      &#x26;lt;span&#x26;gt;{copied &#x26;amp;&#x26;amp; &#x26;quot;Copied!&#x26;quot;}&#x26;lt;/span&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;TextCopy /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Debounces the given value.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code> and a <code>delay</code>.</li>\n<li>Use the <code>useState()</code> hook to store the debounced value.</li>\n<li>Use the <code>useEffect()</code> hook to update the debounced value every time <code>value</code> is updated.</li>\n<li>Use <code>setTimeout()</code> to create a timeout that delays invoking the setter of the previous state variable by <code>delay</code> ms.</li>\n<li>Use <code>clearTimeout()</code> to clean up when dismounting the component.</li>\n<li>This is particularly useful when dealing with user input.</li>\n</ul>\n<pre><code class=\"language-js\">const useDebounce = (value, delay) =&#x26;gt; {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\nReact.useEffect(() =&#x26;gt; {\nconst handler = setTimeout(() =&#x26;gt; {\nsetDebouncedValue(value);\n}, delay);\n\n    return () =&#x26;gt; {\n      clearTimeout(handler);\n    };\n\n}, [value]);\n\nreturn debouncedValue;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Counter = () =&#x26;gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = useDebounce(value, 500);\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;\nCurrent: {value} - Debounced: {lastValue}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setValue(value + 1)}&#x26;gt;Increment&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Counter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>fetch</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>url</code> and <code>options</code>.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>response</code> and <code>error</code> state variables.</li>\n<li>Use the <code>useEffect()</code> hook to asynchronously call <code>fetch()</code> and update the state variables accordingly.</li>\n<li>Return an object containing the <code>response</code> and <code>error</code> state variables.</li>\n</ul>\n<pre><code class=\"language-js\">const useFetch = (url, options) =&#x26;gt; {\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n\nReact.useEffect(() =&#x26;gt; {\nconst fetchData = async () =&#x26;gt; {\ntry {\nconst res = await fetch(url, options);\nconst json = await res.json();\nsetResponse(json);\n} catch (error) {\nsetError(error);\n}\n};\nfetchData();\n}, []);\n\nreturn { response, error };\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ImageFetch = (props) =&#x26;gt; {\n  const res = useFetch(&#x26;quot;https://dog.ceo/api/breeds/image/random&#x26;quot;, {});\n  if (!res.response) {\n    return &#x26;lt;div&#x26;gt;Loading...&#x26;lt;/div&#x26;gt;;\n  }\n  const imageUrl = res.response.message;\n  return (\n    &#x26;lt;div&#x26;gt;\n      &#x26;lt;img src={imageUrl} alt=&#x26;quot;avatar&#x26;quot; width={400} height=&#x26;quot;auto&#x26;quot; /&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;ImageFetch /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>setInterval</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use a <code>useEffect()</code> hook to remember the latest <code>callback</code> whenever it changes.</li>\n<li>Use a <code>useEffect()</code> hook dependent on <code>delay</code> to set up the interval and clean up.</li>\n</ul>\n<pre><code class=\"language-js\">const useInterval = (callback, delay) =&#x26;gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&#x26;gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&#x26;gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setInterval(tick, delay);\nreturn () =&#x26;gt; clearInterval(id);\n}\n}, [delay]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Timer = (props) =&#x26;gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useInterval(() =&#x26;gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &#x26;lt;p&#x26;gt;{seconds}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Timer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the current environment matches a given media query and returns the appropriate value.</p>\n<ul>\n<li>Check if <code>window</code> and <code>window.matchMedia</code> exist, return <code>whenFalse</code> if not (e.g. SSR environment or unsupported browser).</li>\n<li>Use <code>window.matchMedia()</code> to match the given <code>query</code>, cast its <code>matches</code> property to a boolean and store in a state variable, <code>match</code>, using the <code>useState()</code> hook.</li>\n<li>Use the <code>useEffect()</code> hook to add a listener for changes and to clean up the listeners after the hook is destroyed.</li>\n<li>Return either <code>whenTrue</code> or <code>whenFalse</code> based on the value of <code>match</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const useMediaQuery = (query, whenTrue, whenFalse) =&#x26;gt; {\n  if (typeof window === &#x26;quot;undefined&#x26;quot; || typeof window.matchMedia === &#x26;quot;undefined&#x26;quot;)\n    return whenFalse;\n\nconst mediaQuery = window.matchMedia(query);\nconst [match, setMatch] = React.useState(!!mediaQuery.matches);\n\nReact.useEffect(() =&#x26;gt; {\nconst handler = () =&#x26;gt; setMatch(!!mediaQuery.matches);\nmediaQuery.addListener(handler);\nreturn () =&#x26;gt; mediaQuery.removeListener(handler);\n}, []);\n\nreturn match ? whenTrue : whenFalse;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ResponsiveText = () =&#x26;gt; {\n  const text = useMediaQuery(\n    &#x26;quot;(max-width: 400px)&#x26;quot;,\n    &#x26;quot;Less than 400px wide&#x26;quot;,\n    &#x26;quot;More than 400px wide&#x26;quot;\n  );\n\nreturn &#x26;lt;span&#x26;gt;{text}&#x26;lt;/span&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;ResponsiveText /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the client is online or offline.</p>\n<ul>\n<li>Create a function, <code>getOnLineStatus</code>, that uses the <code>NavigatorOnLine</code> web API to get the online status of the client.</li>\n<li>Use the <code>useState()</code> hook to create an appropriate state variable, <code>status</code>, and setter.</li>\n<li>Use the <code>useEffect()</code> hook to add listeners for appropriate events, updating state, and cleanup those listeners when unmounting.</li>\n<li>Finally return the <code>status</code> state variable.</li>\n</ul>\n<pre><code class=\"language-js\">const getOnLineStatus = () =&#x26;gt;\n  typeof navigator !== &#x26;quot;undefined&#x26;quot; &#x26;amp;&#x26;amp; typeof navigator.onLine === &#x26;quot;boolean&#x26;quot;\n    ? navigator.onLine\n    : true;\n\nconst useNavigatorOnLine = () =&#x26;gt; {\nconst [status, setStatus] = React.useState(getOnLineStatus());\n\nconst setOnline = () =&#x26;gt; setStatus(true);\nconst setOffline = () =&#x26;gt; setStatus(false);\n\nReact.useEffect(() =&#x26;gt; {\nwindow.addEventListener(&#x26;quot;online&#x26;quot;, setOnline);\nwindow.addEventListener(&#x26;quot;offline&#x26;quot;, setOffline);\n\n    return () =&#x26;gt; {\n      window.removeEventListener(&#x26;quot;online&#x26;quot;, setOnline);\n      window.removeEventListener(&#x26;quot;offline&#x26;quot;, setOffline);\n    };\n\n}, []);\n\nreturn status;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const StatusIndicator = () =&#x26;gt; {\n  const isOnline = useNavigatorOnLine();\n\nreturn &#x26;lt;span&#x26;gt;You are {isOnline ? &#x26;quot;online&#x26;quot; : &#x26;quot;offline&#x26;quot;}.&#x26;lt;/span&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;StatusIndicator /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Returns a stateful value, persisted in <code>localStorage</code>, and a function to update it.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>value</code> to <code>defaultValue</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a ref that will hold the <code>name</code> of the value in <code>localStorage</code>.</li>\n<li>Use 3 instances of the <code>useEffect()</code> hook for initialization, <code>value</code> change and <code>name</code> change respectively.</li>\n<li>When the component is first mounted, use <code>Storage.getItem()</code> to update <code>value</code> if there's a stored value or <code>Storage.setItem()</code> to persist the current value.</li>\n<li>When <code>value</code> is updated, use <code>Storage.setItem()</code> to store the new value.</li>\n<li>When <code>name</code> is updated, use <code>Storage.setItem()</code> to create the new key, update the <code>nameRef</code> and use <code>Storage.removeItem()</code> to remove the previous key from <code>localStorage</code>.</li>\n<li><strong>NOTE:</strong> The hook is meant for use with primitive values (i.e. not objects) and doesn't account for changes to <code>localStorage</code> due to other code. Both of these issues can be easily handled (e.g. JSON serialization and handling the <code>'storage'</code> event).</li>\n</ul>\n<pre><code class=\"language-js\">const usePersistedState = (name, defaultValue) =&#x26;gt; {\n  const [value, setValue] = React.useState(defaultValue);\n  const nameRef = React.useRef(name);\n\nReact.useEffect(() =&#x26;gt; {\ntry {\nconst storedValue = localStorage.getItem(name);\nif (storedValue !== null) setValue(storedValue);\nelse localStorage.setItem(name, defaultValue);\n} catch {\nsetValue(defaultValue);\n}\n}, []);\n\nReact.useEffect(() =&#x26;gt; {\ntry {\nlocalStorage.setItem(nameRef.current, value);\n} catch {}\n}, [value]);\n\nReact.useEffect(() =&#x26;gt; {\nconst lastName = nameRef.current;\nif (name !== lastName) {\ntry {\nlocalStorage.setItem(name, value);\nnameRef.current = name;\nlocalStorage.removeItem(lastName);\n} catch {}\n}\n}, [name]);\n\nreturn [value, setValue];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const MyComponent = ({ name }) =&#x26;gt; {\n  const [val, setVal] = usePersistedState(name, 10);\n  return (\n    &#x26;lt;input\n      value={val}\n      onChange={(e) =&#x26;gt; {\n        setVal(e.target.value);\n      }}\n    /&#x26;gt;\n  );\n};\n\nconst MyApp = () =&#x26;gt; {\nconst [name, setName] = React.useState(&#x26;quot;my-value&#x26;quot;);\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;MyComponent name={name} /&#x26;gt;\n&#x26;lt;input\nvalue={name}\nonChange={(e) =&#x26;gt; {\nsetName(e.target.value);\n}}\n/&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;MyApp /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Stores the previous state or props.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the <code>value</code>.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest <code>value</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const usePrevious = (value) =&#x26;gt; {\n  const ref = React.useRef();\n  React.useEffect(() =&#x26;gt; {\n    ref.current = value;\n  });\n  return ref.current;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Counter = () =&#x26;gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = usePrevious(value);\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;\nCurrent: {value} - Previous: {lastValue}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setValue(value + 1)}&#x26;gt;Increment&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Counter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the code is running on the browser or the server.</p>\n<ul>\n<li>Create a custom hook that returns an appropriate object.</li>\n<li>Use <code>typeof window</code>, <code>window.document</code> and <code>Document.createElement()</code> to check if the code is running on the browser.</li>\n<li>Use the <code>useState()</code> hook to define the <code>inBrowser</code> state variable.</li>\n<li>Use the <code>useEffect()</code> hook to update the <code>inBrowser</code> state variable and clean up at the end.</li>\n<li>Use the <code>useMemo()</code> hook to memoize the return values of the custom hook.</li>\n</ul>\n<pre><code class=\"language-js\">const isDOMavailable = !!(\n  typeof window !== &#x26;quot;undefined&#x26;quot; &#x26;amp;&#x26;amp;\n  window.document &#x26;amp;&#x26;amp;\n  window.document.createElement\n);\n\nconst useSSR = () =&#x26;gt; {\nconst [inBrowser, setInBrowser] = React.useState(isDOMavailable);\n\nReact.useEffect(() =&#x26;gt; {\nsetInBrowser(isDOMavailable);\nreturn () =&#x26;gt; {\nsetInBrowser(false);\n};\n}, []);\n\nconst useSSRObject = React.useMemo(\n() =&#x26;gt; ({\nisBrowser: inBrowser,\nisServer: !inBrowser,\ncanUseWorkers: typeof Worker !== &#x26;quot;undefined&#x26;quot;,\ncanUseEventListeners: inBrowser &#x26;amp;&#x26;amp; !!window.addEventListener,\ncanUseViewport: inBrowser &#x26;amp;&#x26;amp; !!window.screen,\n}),\n[inBrowser]\n);\n\nreturn React.useMemo(\n() =&#x26;gt; Object.assign(Object.values(useSSRObject), useSSRObject),\n[inBrowser]\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const SSRChecker = (props) =&#x26;gt; {\n  let { isBrowser, isServer } = useSSR();\n\nreturn &#x26;lt;p&#x26;gt;{isBrowser ? &#x26;quot;Running on browser&#x26;quot; : &#x26;quot;Running on server&#x26;quot;}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;SSRChecker /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>setTimeout</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest callback.</li>\n<li>Use the <code>useEffect()</code> hook to set up the timeout and clean up.</li>\n</ul>\n<pre><code class=\"language-js\">const useTimeout = (callback, delay) =&#x26;gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&#x26;gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&#x26;gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setTimeout(tick, delay);\nreturn () =&#x26;gt; clearTimeout(id);\n}\n}, [delay]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const OneSecondTimer = (props) =&#x26;gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useTimeout(() =&#x26;gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &#x26;lt;p&#x26;gt;{seconds}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;OneSecondTimer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Provides a boolean state variable that can be toggled between its two states.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>value</code> state variable and its setter.</li>\n<li>Create a function that toggles the value of the <code>value</code> state variable and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Return the <code>value</code> state variable and the memoized toggler function.</li>\n</ul>\n<pre><code class=\"language-js\">const useToggler = (initialState) =&#x26;gt; {\n  const [value, setValue] = React.useState(initialState);\n\nconst toggleValue = React.useCallback(() =&#x26;gt; setValue((prev) =&#x26;gt; !prev), []);\n\nreturn [value, toggleValue];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Switch = () =&#x26;gt; {\n  const [val, toggleVal] = useToggler(false);\n  return &#x26;lt;button onClick={toggleVal}&#x26;gt;{val ? &#x26;quot;ON&#x26;quot; : &#x26;quot;OFF&#x26;quot;}&#x26;lt;/button&#x26;gt;;\n};\nReactDOM.render(&#x26;lt;Switch /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Handles the <code>beforeunload</code> window event.</p>\n<ul>\n<li>Use the <code>useRef()</code> hook to create a ref for the callback function, <code>fn</code>.</li>\n<li>Use the <code>useEffect()</code> hook and <code>EventTarget.addEventListener()</code> to handle the <code>'beforeunload'</code> (when the user is about to close the window).</li>\n<li>Use <code>EventTarget.removeEventListener()</code> to perform cleanup after the component is unmounted.</li>\n</ul>\n<pre><code class=\"language-js\">const useUnload = (fn) =&#x26;gt; {\n  const cb = React.useRef(fn);\n\nReact.useEffect(() =&#x26;gt; {\nconst onUnload = cb.current;\nwindow.addEventListener(&#x26;quot;beforeunload&#x26;quot;, onUnload);\nreturn () =&#x26;gt; {\nwindow.removeEventListener(&#x26;quot;beforeunload&#x26;quot;, onUnload);\n};\n}, [cb]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const App = () =&#x26;gt; {\n  useUnload((e) =&#x26;gt; {\n    e.preventDefault();\n    const exit = confirm(&#x26;quot;Are you sure you want to leave?&#x26;quot;);\n    if (exit) window.close();\n  });\n  return &#x26;lt;div&#x26;gt;Try closing the window.&#x26;lt;/div&#x26;gt;;\n};\nReactDOM.render(&#x26;lt;App /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n</details>"}