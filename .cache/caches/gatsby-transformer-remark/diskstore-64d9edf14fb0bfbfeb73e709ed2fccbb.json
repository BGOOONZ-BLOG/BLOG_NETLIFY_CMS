{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-f7f9eef745a50aaa52c9f8880a6d82d0--","val":"<h3>Question: How to get the file extension?</h3>\n<pre><code class=\"language-js\">var file1 = '50.xsl';\nvar file2 = '30.doc';\ngetFileExtension(file1); //returs xsl\ngetFileExtension(file2); //returs doc\n\nfunction getFileExtension(filename) {\n    /*TODO*/\n}\n</code></pre>\n<h3>Solution 1: Regular Expression</h3>\n<hr>\n<pre><code class=\"language-js\">function getFileExtension1(filename) {\n    return /[.]/.exec(filename) ? /[^.]+$/.exec(filename)[0] : undefined;\n}\n</code></pre>\n<h3>Solution 2: String <code>split</code> method</h3>\n<hr>\n<pre><code class=\"language-js\">function getFileExtension2(filename) {\n    return filename.split('.').pop();\n}\n</code></pre>\n<p>Those two solutions couldnot handle some edge cases, here is another more robust solution.</p>\n<h3>Solution3: String <code>slice</code>, <code>lastIndexOf</code> methods</h3>\n<hr>\n<pre><code class=\"language-js\">function getFileExtension3(filename) {\n    return filename.slice(((filename.lastIndexOf('.') - 1) >>> 0) + 2);\n}\n\nconsole.log(getFileExtension3('')); // ''\nconsole.log(getFileExtension3('filename')); // ''\nconsole.log(getFileExtension3('filename.txt')); // 'txt'\nconsole.log(getFileExtension3('.hiddenfile')); // ''\nconsole.log(getFileExtension3('filename.with.many.dots.ext')); // 'ext'\n</code></pre>\n<p><em>How does it works?</em></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\">String.lastIndexOf()</a> method returns the last occurrence of the specified value (<code>'.'</code> in this case). Returns <code>-1</code> if the value is not found.</li>\n<li>The return values of <code>lastIndexOf</code> for parameter <code>'filename'</code> and <code>'.hiddenfile'</code> are <code>-1</code> and <code>0</code> respectively. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29\">Zero-fill right shift operator (>>>)</a> will transform <code>-1</code> to <code>4294967295</code> and <code>-2</code> to <code>4294967294</code>, here is one trick to insure the filename unchanged in those edge cases.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">String.prototype.slice()</a> extracts file extension from the index that was calculated above. If the index is more than the length of the filename, the result is <code>\"\"</code>.</li>\n</ul>\n<h3>Comparison</h3>\n<table>\n<thead>\n<tr>\n<th>Solution</th>\n<th align=\"center\">Paramters</th>\n<th align=\"center\">Results</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Solution 1: Regular Expression</td>\n<td align=\"center\">''<br> 'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'</td>\n<td align=\"center\">undefined <br> undefined <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br></td>\n</tr>\n<tr>\n<td>Solution 2: String <code>split</code></td>\n<td align=\"center\">''<br> 'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'</td>\n<td align=\"center\">'' <br> 'filename' <br> 'txt' <br> 'hiddenfile' <br> 'ext' <br></td>\n</tr>\n<tr>\n<td>Solution 3: String <code>slice</code>, <code>lastIndexOf</code></td>\n<td align=\"center\">''<br> 'filename' <br> 'filename.txt' <br> '.hiddenfile' <br> 'filename.with.many.dots.ext'</td>\n<td align=\"center\">'' <br> '' <br> 'txt' <br> '' <br> 'ext' <br></td>\n</tr>\n</tbody>\n</table>\n<h3>Live Demo and Performance</h3>\n<p><a href=\"https://jsbin.com/tipofu/edit?js,console\">Here</a> is the live demo of the above codes.</p>\n<p><a href=\"http://jsperf.com/extract-file-extension\">Here</a> is the performance test of those 3 solutions.</p>"}