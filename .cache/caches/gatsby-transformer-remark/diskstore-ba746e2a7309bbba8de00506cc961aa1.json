{"expireTime":9007200904342769000,"key":"transformer-remark-markdown-ast-cca5692c72e22df4096e9a09f62c032f--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Arrow function expressions","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":29,"offset":29},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":29,"offset":29},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":4,"column":1,"offset":31},"end":{"line":4,"column":4,"offset":34},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"arrow function expression","position":{"start":{"line":4,"column":6,"offset":36},"end":{"line":4,"column":31,"offset":61},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":34},"end":{"line":4,"column":33,"offset":63},"indent":[]}},{"type":"text","value":" is a compact alternative to a traditional ","position":{"start":{"line":4,"column":33,"offset":63},"end":{"line":4,"column":76,"offset":106},"indent":[]}},{"type":"link","title":null,"url":"../operators/function","children":[{"type":"text","value":"function expression","position":{"start":{"line":4,"column":77,"offset":107},"end":{"line":4,"column":96,"offset":126},"indent":[]}}],"position":{"start":{"line":4,"column":76,"offset":106},"end":{"line":4,"column":120,"offset":150},"indent":[]}},{"type":"text","value":", but is limited and can't be used in all situations.","position":{"start":{"line":4,"column":120,"offset":150},"end":{"line":4,"column":173,"offset":203},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":31},"end":{"line":4,"column":173,"offset":203},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Differences & Limitations:","position":{"start":{"line":6,"column":3,"offset":207},"end":{"line":6,"column":29,"offset":233},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":205},"end":{"line":6,"column":31,"offset":235},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":205},"end":{"line":6,"column":31,"offset":235},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Does not have its own bindings to ","position":{"start":{"line":8,"column":3,"offset":239},"end":{"line":8,"column":37,"offset":273},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":8,"column":37,"offset":273},"end":{"line":8,"column":43,"offset":279},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":8,"column":43,"offset":279},"end":{"line":8,"column":47,"offset":283},"indent":[]}},{"type":"inlineCode","value":"super","position":{"start":{"line":8,"column":47,"offset":283},"end":{"line":8,"column":54,"offset":290},"indent":[]}},{"type":"text","value":", and should not be used as ","position":{"start":{"line":8,"column":54,"offset":290},"end":{"line":8,"column":82,"offset":318},"indent":[]}},{"type":"inlineCode","value":"methods","position":{"start":{"line":8,"column":82,"offset":318},"end":{"line":8,"column":91,"offset":327},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":8,"column":91,"offset":327},"end":{"line":8,"column":92,"offset":328},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":239},"end":{"line":8,"column":92,"offset":328},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":237},"end":{"line":8,"column":92,"offset":328},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Does not have ","position":{"start":{"line":9,"column":3,"offset":331},"end":{"line":9,"column":17,"offset":345},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":9,"column":17,"offset":345},"end":{"line":9,"column":28,"offset":356},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":9,"column":28,"offset":356},"end":{"line":9,"column":33,"offset":361},"indent":[]}},{"type":"inlineCode","value":"new.target","position":{"start":{"line":9,"column":33,"offset":361},"end":{"line":9,"column":45,"offset":373},"indent":[]}},{"type":"text","value":" keywords.","position":{"start":{"line":9,"column":45,"offset":373},"end":{"line":9,"column":55,"offset":383},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":331},"end":{"line":9,"column":55,"offset":383},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":329},"end":{"line":9,"column":55,"offset":383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Not suitable for ","position":{"start":{"line":10,"column":3,"offset":386},"end":{"line":10,"column":20,"offset":403},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":10,"column":20,"offset":403},"end":{"line":10,"column":26,"offset":409},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":10,"column":26,"offset":409},"end":{"line":10,"column":28,"offset":411},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":10,"column":28,"offset":411},"end":{"line":10,"column":35,"offset":418},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":10,"column":35,"offset":418},"end":{"line":10,"column":40,"offset":423},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":10,"column":41,"offset":424},"end":{"line":10,"column":47,"offset":430},"indent":[]}}],"position":{"start":{"line":10,"column":40,"offset":423},"end":{"line":10,"column":81,"offset":464},"indent":[]}},{"type":"text","value":" methods, which generally rely on establishing a ","position":{"start":{"line":10,"column":81,"offset":464},"end":{"line":10,"column":130,"offset":513},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Scope","children":[{"type":"text","value":"scope","position":{"start":{"line":10,"column":131,"offset":514},"end":{"line":10,"column":136,"offset":519},"indent":[]}}],"position":{"start":{"line":10,"column":130,"offset":513},"end":{"line":10,"column":194,"offset":577},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":194,"offset":577},"end":{"line":10,"column":195,"offset":578},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":386},"end":{"line":10,"column":195,"offset":578},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":384},"end":{"line":10,"column":195,"offset":578},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can not be used as ","position":{"start":{"line":11,"column":3,"offset":581},"end":{"line":11,"column":22,"offset":600},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Constructor","children":[{"type":"text","value":"constructors","position":{"start":{"line":11,"column":23,"offset":601},"end":{"line":11,"column":35,"offset":613},"indent":[]}}],"position":{"start":{"line":11,"column":22,"offset":600},"end":{"line":11,"column":99,"offset":677},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":99,"offset":677},"end":{"line":11,"column":100,"offset":678},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":581},"end":{"line":11,"column":100,"offset":678},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":579},"end":{"line":11,"column":100,"offset":678},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can not use ","position":{"start":{"line":12,"column":3,"offset":681},"end":{"line":12,"column":15,"offset":693},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":12,"column":15,"offset":693},"end":{"line":12,"column":22,"offset":700},"indent":[]}},{"type":"text","value":", within its body.","position":{"start":{"line":12,"column":22,"offset":700},"end":{"line":12,"column":40,"offset":718},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":681},"end":{"line":12,"column":40,"offset":718},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":679},"end":{"line":12,"column":40,"offset":718},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":237},"end":{"line":12,"column":40,"offset":718},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Comparing traditional functions to arrow functions","position":{"start":{"line":14,"column":5,"offset":724},"end":{"line":14,"column":55,"offset":774},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":720},"end":{"line":14,"column":55,"offset":774},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's decompose a \"traditional function\" down to the simplest \"arrow function\" step-by-step:\nNOTE: Each step along the way is a valid \"arrow function\"","position":{"start":{"line":16,"column":1,"offset":776},"end":{"line":17,"column":58,"offset":926},"indent":[1]}}],"position":{"start":{"line":16,"column":1,"offset":776},"end":{"line":17,"column":58,"offset":926},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a){\n  return a + 100;\n}\n\n// Arrow Function Break Down\n\n// 1. Remove the word \"function\" and place arrow between the argument and opening body bracket\n(a) => {\n  return a + 100;\n}\n\n// 2. Remove the body brackets and word \"return\" -- the return is implied.\n(a) => a + 100;\n\n// 3. Remove the argument parentheses\na => a + 100;","position":{"start":{"line":19,"column":1,"offset":928},"end":{"line":35,"column":18,"offset":1337},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":37,"column":3,"offset":1341},"end":{"line":37,"column":8,"offset":1346},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1339},"end":{"line":37,"column":10,"offset":1348},"indent":[]}},{"type":"text","value":" As shown above, the { brackets } and ( parentheses ) and \"return\" are optional, but may be required.","position":{"start":{"line":37,"column":10,"offset":1348},"end":{"line":37,"column":111,"offset":1449},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1339},"end":{"line":37,"column":111,"offset":1449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, if you have ","position":{"start":{"line":39,"column":1,"offset":1451},"end":{"line":39,"column":26,"offset":1476},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"multiple arguments","position":{"start":{"line":39,"column":28,"offset":1478},"end":{"line":39,"column":46,"offset":1496},"indent":[]}}],"position":{"start":{"line":39,"column":26,"offset":1476},"end":{"line":39,"column":48,"offset":1498},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":39,"column":48,"offset":1498},"end":{"line":39,"column":52,"offset":1502},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"no arguments","position":{"start":{"line":39,"column":54,"offset":1504},"end":{"line":39,"column":66,"offset":1516},"indent":[]}}],"position":{"start":{"line":39,"column":52,"offset":1502},"end":{"line":39,"column":68,"offset":1518},"indent":[]}},{"type":"text","value":", you'll need to re-introduce parentheses around the arguments:","position":{"start":{"line":39,"column":68,"offset":1518},"end":{"line":39,"column":131,"offset":1581},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1451},"end":{"line":39,"column":131,"offset":1581},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a, b){\n  return a + b + 100;\n}\n\n// Arrow Function\n(a, b) => a + b + 100;\n\n// Traditional Function (no arguments)\nlet a = 4;\nlet b = 2;\nfunction (){\n  return a + b + 100;\n}\n\n// Arrow Function (no arguments)\nlet a = 4;\nlet b = 2;\n() => a + b + 100;","position":{"start":{"line":41,"column":1,"offset":1583},"end":{"line":59,"column":23,"offset":1927},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Likewise, if the body requires ","position":{"start":{"line":61,"column":1,"offset":1929},"end":{"line":61,"column":32,"offset":1960},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"additional lines","position":{"start":{"line":61,"column":34,"offset":1962},"end":{"line":61,"column":50,"offset":1978},"indent":[]}}],"position":{"start":{"line":61,"column":32,"offset":1960},"end":{"line":61,"column":52,"offset":1980},"indent":[]}},{"type":"text","value":" of processing, you'll need to re-introduce brackets ","position":{"start":{"line":61,"column":52,"offset":1980},"end":{"line":61,"column":105,"offset":2033},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"PLUS the \"return\"","position":{"start":{"line":61,"column":107,"offset":2035},"end":{"line":61,"column":124,"offset":2052},"indent":[]}}],"position":{"start":{"line":61,"column":105,"offset":2033},"end":{"line":61,"column":126,"offset":2054},"indent":[]}},{"type":"text","value":" (arrow functions do not magically guess what or when you want to \"return\"):","position":{"start":{"line":61,"column":126,"offset":2054},"end":{"line":61,"column":202,"offset":2130},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1929},"end":{"line":61,"column":202,"offset":2130},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a, b){\n  let chuck = 42;\n  return a + b + chuck;\n}\n\n// Arrow Function\n(a, b) => {\n  let chuck = 42;\n  return a + b + chuck;\n}","position":{"start":{"line":63,"column":1,"offset":2132},"end":{"line":73,"column":6,"offset":2331},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And finally, for ","position":{"start":{"line":75,"column":1,"offset":2333},"end":{"line":75,"column":18,"offset":2350},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"named functions","position":{"start":{"line":75,"column":20,"offset":2352},"end":{"line":75,"column":35,"offset":2367},"indent":[]}}],"position":{"start":{"line":75,"column":18,"offset":2350},"end":{"line":75,"column":37,"offset":2369},"indent":[]}},{"type":"text","value":" we treat arrow expressions like variables","position":{"start":{"line":75,"column":37,"offset":2369},"end":{"line":75,"column":79,"offset":2411},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2333},"end":{"line":75,"column":79,"offset":2411},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction bob (a){\n  return a + 100;\n}\n\n// Arrow Function\nlet bob = a => a + 100;","position":{"start":{"line":77,"column":1,"offset":2413},"end":{"line":83,"column":28,"offset":2541},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":85,"column":4,"offset":2546},"end":{"line":85,"column":10,"offset":2552},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2543},"end":{"line":85,"column":10,"offset":2552},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic syntax","position":{"start":{"line":87,"column":5,"offset":2558},"end":{"line":87,"column":17,"offset":2570},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2554},"end":{"line":87,"column":17,"offset":2570},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One param. With simple expression return is not needed:","position":{"start":{"line":89,"column":1,"offset":2572},"end":{"line":89,"column":56,"offset":2627},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2572},"end":{"line":89,"column":56,"offset":2627},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"param => expression","position":{"start":{"line":91,"column":1,"offset":2629},"end":{"line":91,"column":24,"offset":2652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Multiple params require parentheses. With simple expression return is not needed:","position":{"start":{"line":93,"column":1,"offset":2654},"end":{"line":93,"column":82,"offset":2735},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2654},"end":{"line":93,"column":82,"offset":2735},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(param1, paramN) => expression","position":{"start":{"line":95,"column":1,"offset":2737},"end":{"line":95,"column":35,"offset":2771},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Multiline statements require body brackets and return:","position":{"start":{"line":97,"column":1,"offset":2773},"end":{"line":97,"column":55,"offset":2827},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2773},"end":{"line":97,"column":55,"offset":2827},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"param => {\n  let a = 1;\n  return a + param;\n}","position":{"start":{"line":99,"column":1,"offset":2829},"end":{"line":102,"column":6,"offset":2890},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Multiple params require parentheses. Multiline statements require body brackets and return:","position":{"start":{"line":104,"column":1,"offset":2892},"end":{"line":104,"column":92,"offset":2983},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":2892},"end":{"line":104,"column":92,"offset":2983},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(param1, paramN) => {\n   let a = 1;\n   return a + param1 + paramN;\n}","position":{"start":{"line":106,"column":1,"offset":2985},"end":{"line":109,"column":6,"offset":3069},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Advanced syntax","position":{"start":{"line":111,"column":5,"offset":3075},"end":{"line":111,"column":20,"offset":3090},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3071},"end":{"line":111,"column":20,"offset":3090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To return an object literal expression requires parentheses around expression:","position":{"start":{"line":113,"column":1,"offset":3092},"end":{"line":113,"column":79,"offset":3170},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3092},"end":{"line":113,"column":79,"offset":3170},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"params => ({foo: \"a\"}) // returning the object {foo: \"a\"}","position":{"start":{"line":115,"column":1,"offset":3172},"end":{"line":115,"column":62,"offset":3233},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"rest_parameters","children":[{"type":"text","value":"Rest parameters","position":{"start":{"line":117,"column":2,"offset":3236},"end":{"line":117,"column":17,"offset":3251},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3235},"end":{"line":117,"column":35,"offset":3269},"indent":[]}},{"type":"text","value":" are supported:","position":{"start":{"line":117,"column":35,"offset":3269},"end":{"line":117,"column":50,"offset":3284},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3235},"end":{"line":117,"column":50,"offset":3284},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(a, b, ...r) => expression","position":{"start":{"line":119,"column":1,"offset":3286},"end":{"line":119,"column":31,"offset":3316},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"default_parameters","children":[{"type":"text","value":"Default parameters","position":{"start":{"line":121,"column":2,"offset":3319},"end":{"line":121,"column":20,"offset":3337},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3318},"end":{"line":121,"column":41,"offset":3358},"indent":[]}},{"type":"text","value":" are supported:","position":{"start":{"line":121,"column":41,"offset":3358},"end":{"line":121,"column":56,"offset":3373},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3318},"end":{"line":121,"column":56,"offset":3373},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(a=400, b=20, c) => expression","position":{"start":{"line":123,"column":1,"offset":3375},"end":{"line":123,"column":35,"offset":3409},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"../operators/destructuring_assignment","children":[{"type":"text","value":"Destructuring","position":{"start":{"line":125,"column":2,"offset":3412},"end":{"line":125,"column":15,"offset":3425},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3411},"end":{"line":125,"column":55,"offset":3465},"indent":[]}},{"type":"text","value":" within params supported:","position":{"start":{"line":125,"column":55,"offset":3465},"end":{"line":125,"column":80,"offset":3490},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3411},"end":{"line":125,"column":80,"offset":3490},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"([a, b] = [10, 20]) => a + b;  // result is 30\n({ a, b } = { a: 10, b: 20 }) => a + b; // result is 30","position":{"start":{"line":127,"column":1,"offset":3492},"end":{"line":128,"column":60,"offset":3602},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":130,"column":4,"offset":3607},"end":{"line":130,"column":15,"offset":3618},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3604},"end":{"line":130,"column":15,"offset":3618},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Arrow functions used as methods","position":{"start":{"line":132,"column":5,"offset":3624},"end":{"line":132,"column":36,"offset":3655},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3620},"end":{"line":132,"column":36,"offset":3655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:","position":{"start":{"line":134,"column":1,"offset":3657},"end":{"line":134,"column":150,"offset":3806},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3657},"end":{"line":134,"column":150,"offset":3806},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"'use strict';\n\nvar obj = { // does not create a new scope\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\n\nobj.b(); // prints undefined, Window {...} (or the global object)\nobj.c(); // prints 10, Object {...}","position":{"start":{"line":136,"column":1,"offset":3808},"end":{"line":147,"column":40,"offset":4110},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have their own ","position":{"start":{"line":149,"column":1,"offset":4112},"end":{"line":149,"column":39,"offset":4150},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":149,"column":39,"offset":4150},"end":{"line":149,"column":45,"offset":4156},"indent":[]}},{"type":"text","value":". Another example involving ","position":{"start":{"line":149,"column":45,"offset":4156},"end":{"line":149,"column":73,"offset":4184},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/object/defineproperty","children":[{"type":"inlineCode","value":"Object.defineProperty()","position":{"start":{"line":149,"column":74,"offset":4185},"end":{"line":149,"column":99,"offset":4210},"indent":[]}}],"position":{"start":{"line":149,"column":73,"offset":4184},"end":{"line":149,"column":141,"offset":4252},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":149,"column":141,"offset":4252},"end":{"line":149,"column":142,"offset":4253},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":4112},"end":{"line":149,"column":142,"offset":4253},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"'use strict';\n\nvar obj = {\n  a: 10\n};\n\nObject.defineProperty(obj, 'b', {\n  get: () => {\n    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window {...} (or the global object)\n    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'\n  }\n});","position":{"start":{"line":151,"column":1,"offset":4255},"end":{"line":162,"column":8,"offset":4598},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"call, apply and bind","position":{"start":{"line":164,"column":5,"offset":4604},"end":{"line":164,"column":25,"offset":4624},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4600},"end":{"line":164,"column":25,"offset":4624},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":166,"column":1,"offset":4626},"end":{"line":166,"column":5,"offset":4630},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":166,"column":5,"offset":4630},"end":{"line":166,"column":11,"offset":4636},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":166,"column":11,"offset":4636},"end":{"line":166,"column":13,"offset":4638},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":166,"column":13,"offset":4638},"end":{"line":166,"column":20,"offset":4645},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":166,"column":20,"offset":4645},"end":{"line":166,"column":25,"offset":4650},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":166,"column":26,"offset":4651},"end":{"line":166,"column":32,"offset":4657},"indent":[]}}],"position":{"start":{"line":166,"column":25,"offset":4650},"end":{"line":166,"column":66,"offset":4691},"indent":[]}},{"type":"text","value":" methods are ","position":{"start":{"line":166,"column":66,"offset":4691},"end":{"line":166,"column":79,"offset":4704},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"NOT suitable","position":{"start":{"line":166,"column":81,"offset":4706},"end":{"line":166,"column":93,"offset":4718},"indent":[]}}],"position":{"start":{"line":166,"column":79,"offset":4704},"end":{"line":166,"column":95,"offset":4720},"indent":[]}},{"type":"text","value":" for Arrow functions -- as they were designed to allow methods to execute within different scopes -- because ","position":{"start":{"line":166,"column":95,"offset":4720},"end":{"line":166,"column":204,"offset":4829},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Arrow functions establish \"this\" based on the scope the Arrow function is defined within.","position":{"start":{"line":166,"column":206,"offset":4831},"end":{"line":166,"column":295,"offset":4920},"indent":[]}}],"position":{"start":{"line":166,"column":204,"offset":4829},"end":{"line":166,"column":297,"offset":4922},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4626},"end":{"line":166,"column":297,"offset":4922},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example ","position":{"start":{"line":168,"column":1,"offset":4924},"end":{"line":168,"column":13,"offset":4936},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":168,"column":13,"offset":4936},"end":{"line":168,"column":19,"offset":4942},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":168,"column":19,"offset":4942},"end":{"line":168,"column":21,"offset":4944},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":168,"column":21,"offset":4944},"end":{"line":168,"column":28,"offset":4951},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":168,"column":28,"offset":4951},"end":{"line":168,"column":33,"offset":4956},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":168,"column":34,"offset":4957},"end":{"line":168,"column":40,"offset":4963},"indent":[]}}],"position":{"start":{"line":168,"column":33,"offset":4956},"end":{"line":168,"column":74,"offset":4997},"indent":[]}},{"type":"text","value":" work as expected with Traditional functions, because we establish the scope for each of the methods:","position":{"start":{"line":168,"column":74,"offset":4997},"end":{"line":168,"column":175,"offset":5098},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4924},"end":{"line":168,"column":175,"offset":5098},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// ----------------------\n// Traditional Example\n// ----------------------\n// A simplistic object with its very own \"this\".\nvar obj = {\n    num: 100\n}\n\n// Setting \"num\" on window to show how it is NOT used.\nwindow.num = 2020; // yikes!\n\n// A simple traditional function to operate on \"this\"\nvar add = function (a, b, c) {\n  return this.num + a + b + c;\n}\n\n// call\nvar result = add.call(obj, 1, 2, 3) // establishing the scope as \"obj\"\nconsole.log(result) // result 106\n\n// apply\nconst arr = [1, 2, 3]\nvar result = add.apply(obj, arr) // establishing the scope as \"obj\"\nconsole.log(result) // result 106\n\n// bind\nvar result = add.bind(obj) // establishing the scope as \"obj\"\nconsole.log(result(1, 2, 3)) // result 106","position":{"start":{"line":170,"column":1,"offset":5100},"end":{"line":197,"column":47,"offset":5908},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With Arrow functions, since our ","position":{"start":{"line":199,"column":1,"offset":5910},"end":{"line":199,"column":33,"offset":5942},"indent":[]}},{"type":"inlineCode","value":"add","position":{"start":{"line":199,"column":33,"offset":5942},"end":{"line":199,"column":38,"offset":5947},"indent":[]}},{"type":"text","value":" function is essentially created on the ","position":{"start":{"line":199,"column":38,"offset":5947},"end":{"line":199,"column":78,"offset":5987},"indent":[]}},{"type":"inlineCode","value":"window","position":{"start":{"line":199,"column":78,"offset":5987},"end":{"line":199,"column":86,"offset":5995},"indent":[]}},{"type":"text","value":" (global) scope, it will assume ","position":{"start":{"line":199,"column":86,"offset":5995},"end":{"line":199,"column":118,"offset":6027},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":199,"column":118,"offset":6027},"end":{"line":199,"column":124,"offset":6033},"indent":[]}},{"type":"text","value":" is the window.","position":{"start":{"line":199,"column":124,"offset":6033},"end":{"line":199,"column":139,"offset":6048},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":5910},"end":{"line":199,"column":139,"offset":6048},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// ----------------------\n// Arrow Example\n// ----------------------\n\n// A simplistic object with its very own \"this\".\nvar obj = {\n    num: 100\n}\n\n// Setting \"num\" on window to show how it gets picked up.\nwindow.num = 2020; // yikes!\n\n// Arrow Function\nvar add = (a, b, c) => this.num + a + b + c;\n\n// call\nconsole.log(add.call(obj, 1, 2, 3)) // result 2026\n\n// apply\nconst arr = [1, 2, 3]\nconsole.log(add.apply(obj, arr)) // result 2026\n\n// bind\nconst bound = add.bind(obj)\nconsole.log(bound(1, 2, 3)) // result 2026","position":{"start":{"line":201,"column":1,"offset":6050},"end":{"line":225,"column":47,"offset":6643},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Perhaps the greatest benefit of using Arrow functions is with DOM-level methods (setTimeout, setInterval, addEventListener) that usually required some kind of closure, call, apply or bind to ensure the function executed in the proper scope.","position":{"start":{"line":227,"column":1,"offset":6645},"end":{"line":227,"column":241,"offset":6885},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":6645},"end":{"line":227,"column":241,"offset":6885},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Traditional Example:","position":{"start":{"line":229,"column":3,"offset":6889},"end":{"line":229,"column":23,"offset":6909},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":6887},"end":{"line":229,"column":25,"offset":6911},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":6887},"end":{"line":229,"column":25,"offset":6911},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var obj = {\n    count : 10,\n    doSomethingLater : function (){\n        setTimeout(function(){ // the function executes on the window scope\n            this.count++;\n            console.log(this.count);\n        }, 300);\n    }\n}\n\nobj.doSomethingLater(); // console prints \"NaN\", because the property \"count\" is not in the window scope.","position":{"start":{"line":231,"column":1,"offset":6913},"end":{"line":241,"column":110,"offset":7287},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Arrow Example:","position":{"start":{"line":243,"column":3,"offset":7291},"end":{"line":243,"column":17,"offset":7305},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":7289},"end":{"line":243,"column":19,"offset":7307},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":7289},"end":{"line":243,"column":19,"offset":7307},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var obj = {\n    count : 10,\n    doSomethingLater : function(){ // of course, arrow functions are not suited for methods\n        setTimeout( () => { // since the arrow function was created within the \"obj\", it assumes the object's \"this\"\n            this.count++;\n            console.log(this.count);\n        }, 300);\n    }\n}\n\nobj.doSomethingLater();","position":{"start":{"line":245,"column":1,"offset":7309},"end":{"line":255,"column":28,"offset":7698},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"No binding of ","position":{"start":{"line":257,"column":5,"offset":7704},"end":{"line":257,"column":19,"offset":7718},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":257,"column":19,"offset":7718},"end":{"line":257,"column":30,"offset":7729},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":7700},"end":{"line":257,"column":30,"offset":7729},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have their own ","position":{"start":{"line":259,"column":1,"offset":7731},"end":{"line":259,"column":39,"offset":7769},"indent":[]}},{"type":"link","title":null,"url":"arguments","children":[{"type":"inlineCode","value":"arguments","position":{"start":{"line":259,"column":40,"offset":7770},"end":{"line":259,"column":51,"offset":7781},"indent":[]}},{"type":"text","value":" object","position":{"start":{"line":259,"column":51,"offset":7781},"end":{"line":259,"column":58,"offset":7788},"indent":[]}}],"position":{"start":{"line":259,"column":39,"offset":7769},"end":{"line":259,"column":70,"offset":7800},"indent":[]}},{"type":"text","value":". Thus, in this example, ","position":{"start":{"line":259,"column":70,"offset":7800},"end":{"line":259,"column":95,"offset":7825},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":259,"column":95,"offset":7825},"end":{"line":259,"column":106,"offset":7836},"indent":[]}},{"type":"text","value":" is a reference to the arguments of the enclosing scope:","position":{"start":{"line":259,"column":106,"offset":7836},"end":{"line":259,"column":162,"offset":7892},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":7731},"end":{"line":259,"column":162,"offset":7892},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var arguments = [1, 2, 3];\nvar arr = () => arguments[0];\n\narr(); // 1\n\nfunction foo(n) {\n  var f = () => arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n\n  return f();\n}\n\nfoo(3); // 3 + 3 = 6","position":{"start":{"line":261,"column":1,"offset":7894},"end":{"line":271,"column":25,"offset":8141},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In most cases, using ","position":{"start":{"line":273,"column":1,"offset":8143},"end":{"line":273,"column":22,"offset":8164},"indent":[]}},{"type":"link","title":null,"url":"rest_parameters","children":[{"type":"text","value":"rest parameters","position":{"start":{"line":273,"column":23,"offset":8165},"end":{"line":273,"column":38,"offset":8180},"indent":[]}}],"position":{"start":{"line":273,"column":22,"offset":8164},"end":{"line":273,"column":56,"offset":8198},"indent":[]}},{"type":"text","value":" is a good alternative to using an ","position":{"start":{"line":273,"column":56,"offset":8198},"end":{"line":273,"column":91,"offset":8233},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":273,"column":91,"offset":8233},"end":{"line":273,"column":102,"offset":8244},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":273,"column":102,"offset":8244},"end":{"line":273,"column":110,"offset":8252},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":8143},"end":{"line":273,"column":110,"offset":8252},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"function foo(n) {\n  var f = (...args) => args[0] + n;\n  return f(10);\n}\n\nfoo(1); // 11","position":{"start":{"line":275,"column":1,"offset":8254},"end":{"line":280,"column":18,"offset":8360},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of the ","position":{"start":{"line":282,"column":5,"offset":8366},"end":{"line":282,"column":16,"offset":8377},"indent":[]}},{"type":"inlineCode","value":"new","position":{"start":{"line":282,"column":16,"offset":8377},"end":{"line":282,"column":21,"offset":8382},"indent":[]}},{"type":"text","value":" operator","position":{"start":{"line":282,"column":21,"offset":8382},"end":{"line":282,"column":30,"offset":8391},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":8362},"end":{"line":282,"column":30,"offset":8391},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions cannot be used as constructors and will throw an error when used with ","position":{"start":{"line":284,"column":1,"offset":8393},"end":{"line":284,"column":87,"offset":8479},"indent":[]}},{"type":"inlineCode","value":"new","position":{"start":{"line":284,"column":87,"offset":8479},"end":{"line":284,"column":92,"offset":8484},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":284,"column":92,"offset":8484},"end":{"line":284,"column":93,"offset":8485},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":8393},"end":{"line":284,"column":93,"offset":8485},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor","position":{"start":{"line":286,"column":1,"offset":8487},"end":{"line":287,"column":64,"offset":8574},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of ","position":{"start":{"line":289,"column":5,"offset":8580},"end":{"line":289,"column":12,"offset":8587},"indent":[]}},{"type":"inlineCode","value":"prototype","position":{"start":{"line":289,"column":12,"offset":8587},"end":{"line":289,"column":23,"offset":8598},"indent":[]}},{"type":"text","value":" property","position":{"start":{"line":289,"column":23,"offset":8598},"end":{"line":289,"column":32,"offset":8607},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":8576},"end":{"line":289,"column":32,"offset":8607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have a ","position":{"start":{"line":291,"column":1,"offset":8609},"end":{"line":291,"column":31,"offset":8639},"indent":[]}},{"type":"inlineCode","value":"prototype","position":{"start":{"line":291,"column":31,"offset":8639},"end":{"line":291,"column":42,"offset":8650},"indent":[]}},{"type":"text","value":" property.","position":{"start":{"line":291,"column":42,"offset":8650},"end":{"line":291,"column":52,"offset":8660},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":8609},"end":{"line":291,"column":52,"offset":8660},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var Foo = () => {};\nconsole.log(Foo.prototype); // undefined","position":{"start":{"line":293,"column":1,"offset":8662},"end":{"line":294,"column":45,"offset":8730},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of the ","position":{"start":{"line":296,"column":5,"offset":8736},"end":{"line":296,"column":16,"offset":8747},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":296,"column":16,"offset":8747},"end":{"line":296,"column":23,"offset":8754},"indent":[]}},{"type":"text","value":" keyword","position":{"start":{"line":296,"column":23,"offset":8754},"end":{"line":296,"column":31,"offset":8762},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":8732},"end":{"line":296,"column":31,"offset":8762},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":298,"column":1,"offset":8764},"end":{"line":298,"column":5,"offset":8768},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":298,"column":5,"offset":8768},"end":{"line":298,"column":12,"offset":8775},"indent":[]}},{"type":"text","value":" keyword may not be used in an arrow function's body (except when permitted within functions further nested within it). As a consequence, arrow functions cannot be used as generators.","position":{"start":{"line":298,"column":12,"offset":8775},"end":{"line":298,"column":195,"offset":8958},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":8764},"end":{"line":298,"column":195,"offset":8958},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Function body","position":{"start":{"line":300,"column":5,"offset":8964},"end":{"line":300,"column":18,"offset":8977},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":8960},"end":{"line":300,"column":18,"offset":8977},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions can have either a \"concise body\" or the usual \"block body\".","position":{"start":{"line":302,"column":1,"offset":8979},"end":{"line":302,"column":76,"offset":9054},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":8979},"end":{"line":302,"column":76,"offset":9054},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit ","position":{"start":{"line":304,"column":1,"offset":9056},"end":{"line":304,"column":136,"offset":9191},"indent":[]}},{"type":"inlineCode","value":"return","position":{"start":{"line":304,"column":136,"offset":9191},"end":{"line":304,"column":144,"offset":9199},"indent":[]}},{"type":"text","value":" statement.","position":{"start":{"line":304,"column":144,"offset":9199},"end":{"line":304,"column":155,"offset":9210},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":9056},"end":{"line":304,"column":155,"offset":9210},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = x => x * x;\n// concise body syntax, implied \"return\"\n\nvar func = (x, y) => { return x + y; };\n// with block body, explicit \"return\" needed","position":{"start":{"line":306,"column":1,"offset":9212},"end":{"line":310,"column":49,"offset":9377},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Returning object literals","position":{"start":{"line":312,"column":5,"offset":9383},"end":{"line":312,"column":30,"offset":9408},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":9379},"end":{"line":312,"column":30,"offset":9408},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Keep in mind that returning object literals using the concise body syntax ","position":{"start":{"line":314,"column":1,"offset":9410},"end":{"line":314,"column":75,"offset":9484},"indent":[]}},{"type":"inlineCode","value":"params => {object:literal}","position":{"start":{"line":314,"column":75,"offset":9484},"end":{"line":314,"column":103,"offset":9512},"indent":[]}},{"type":"text","value":" will not work as expected.","position":{"start":{"line":314,"column":103,"offset":9512},"end":{"line":314,"column":130,"offset":9539},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":9410},"end":{"line":314,"column":130,"offset":9539},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = () => { foo: 1 };\n// Calling func() returns undefined!\n\nvar func = () => { foo: function() {} };\n// SyntaxError: function statement requires a name","position":{"start":{"line":316,"column":1,"offset":9541},"end":{"line":320,"column":55,"offset":9715},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. ","position":{"start":{"line":322,"column":1,"offset":9717},"end":{"line":322,"column":89,"offset":9805},"indent":[]}},{"type":"inlineCode","value":"foo","position":{"start":{"line":322,"column":89,"offset":9805},"end":{"line":322,"column":94,"offset":9810},"indent":[]}},{"type":"text","value":" is treated like a label, not a key in an object literal).","position":{"start":{"line":322,"column":94,"offset":9810},"end":{"line":322,"column":152,"offset":9868},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":9717},"end":{"line":322,"column":152,"offset":9868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You must wrap the object literal in parentheses:","position":{"start":{"line":324,"column":1,"offset":9870},"end":{"line":324,"column":49,"offset":9918},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":9870},"end":{"line":324,"column":49,"offset":9918},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = () => ({ foo: 1 });","position":{"start":{"line":326,"column":1,"offset":9920},"end":{"line":326,"column":35,"offset":9954},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Line breaks","position":{"start":{"line":328,"column":5,"offset":9960},"end":{"line":328,"column":16,"offset":9971},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":9956},"end":{"line":328,"column":16,"offset":9971},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An arrow function cannot contain a line break between its parameters and its arrow.","position":{"start":{"line":330,"column":1,"offset":9973},"end":{"line":330,"column":84,"offset":10056},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":9973},"end":{"line":330,"column":84,"offset":10056},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = (a, b, c)\n  => 1;\n// SyntaxError: expected expression, got '=>'","position":{"start":{"line":332,"column":1,"offset":10058},"end":{"line":334,"column":50,"offset":10144},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.","position":{"start":{"line":336,"column":1,"offset":10146},"end":{"line":336,"column":210,"offset":10355},"indent":[]}}],"position":{"start":{"line":336,"column":1,"offset":10146},"end":{"line":336,"column":210,"offset":10355},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = (a, b, c) =>\n  1;\n\nvar func = (a, b, c) => (\n  1\n);\n\nvar func = (a, b, c) => {\n  return 1\n};\n\nvar func = (\n  a,\n  b,\n  c\n) => 1;\n\n// no SyntaxError thrown","position":{"start":{"line":338,"column":1,"offset":10357},"end":{"line":355,"column":29,"offset":10578},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parsing order","position":{"start":{"line":357,"column":5,"offset":10584},"end":{"line":357,"column":18,"offset":10597},"indent":[]}}],"position":{"start":{"line":357,"column":1,"offset":10580},"end":{"line":357,"column":18,"offset":10597},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Although the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with ","position":{"start":{"line":359,"column":1,"offset":10599},"end":{"line":359,"column":135,"offset":10733},"indent":[]}},{"type":"link","title":null,"url":"../operators/operator_precedence","children":[{"type":"text","value":"operator precedence","position":{"start":{"line":359,"column":136,"offset":10734},"end":{"line":359,"column":155,"offset":10753},"indent":[]}}],"position":{"start":{"line":359,"column":135,"offset":10733},"end":{"line":359,"column":190,"offset":10788},"indent":[]}},{"type":"text","value":" compared to regular functions.","position":{"start":{"line":359,"column":190,"offset":10788},"end":{"line":359,"column":221,"offset":10819},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":10599},"end":{"line":359,"column":221,"offset":10819},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"    let callback;\n\n    callback = callback || function() {}; // ok\n\n    callback = callback || () => {};\n    // SyntaxError: invalid arrow-function arguments\n\n    callback = callback || (() => {});    // ok","position":{"start":{"line":360,"column":1,"offset":10820},"end":{"line":369,"column":4,"offset":11036},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":370,"column":4,"offset":11040},"end":{"line":370,"column":12,"offset":11048},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":11037},"end":{"line":370,"column":12,"offset":11048},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic usage","position":{"start":{"line":372,"column":5,"offset":11054},"end":{"line":372,"column":16,"offset":11065},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":11050},"end":{"line":372,"column":16,"offset":11065},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"    // An empty arrow function returns undefined\n    let empty = () => {};\n\n    (() => 'foobar')();\n    // Returns \"foobar\"\n    // (this is an Immediately Invoked Function Expression)\n\n    var simple = a => a > 15 ? 15 : a;\n    simple(16); // 15\n    simple(10); // 10\n\n    let max = (a, b) => a > b ? a : b;\n\n    // Easy array filtering, mapping, ...\n\n    var arr = [5, 6, 13, 0, 1, 18, 23];\n\n    var sum = arr.reduce((a, b) => a + b);\n    // 66\n\n    var even = arr.filter(v => v % 2 == 0);\n    // [6, 0, 18]\n\n    var double = arr.map(v => v * 2);\n    // [10, 12, 26, 0, 2, 36, 46]\n\n    // More concise promise chains\n    promise.then(a => {\n      // ...\n    }).then(b => {\n      // ...\n    });\n\n    // Parameterless arrow functions that are visually easier to parse\n    setTimeout( () => {\n      console.log('I happen sooner');\n      setTimeout( () => {\n        // deeper code\n        console.log('I happen later');\n      }, 1);\n    }, 1);","position":{"start":{"line":373,"column":1,"offset":11066},"end":{"line":415,"column":4,"offset":12016},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":416,"column":1,"offset":12017}}}}