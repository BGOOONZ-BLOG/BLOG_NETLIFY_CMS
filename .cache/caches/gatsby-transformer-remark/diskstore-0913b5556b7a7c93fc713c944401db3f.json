{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-99cb6d78fa33b87e506ac7bb877a8f39--","val":"<h2><a href=\"https://leetcode.com/problems/next-permutation/description/\">31. Next Permutation</a></h2>\n<h3>Problem:</h3>\n<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\n<p>The replacement must be <strong>in-place</strong> and use only constant extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>\n<p><code>1,2,3</code> → <code>1,3,2</code><br>\n<code>3,2,1</code> → <code>1,2,3</code><br>\n<code>1,1,5</code> → <code>1,5,1</code></p>\n<h3>Solution:</h3>\n<p>Observe a few longer examples and the pattern is self-evident.</p>\n<p>Divide the list into two parts. The first half must be incremental and the second half must be decremental.</p>\n<p>Reverse the second half and find the smallest number in it that is greater the last number of the first half.</p>\n<p>Swap the two.</p>\n<pre><code class=\"language-js\">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nlet nextPermutation = function (nums) {\n    const len = nums.length;\n    if (len &#x3C;= 1) {\n        return;\n    }\n\n    for (let i = len - 1; i > 0; i--) {\n        if (nums[i] > nums[i - 1]) {\n            let t;\n            for (let s = i, e = len - 1; s &#x3C; e; s++, e--) {\n                t = nums[s];\n                nums[s] = nums[e];\n                nums[e] = t;\n            }\n\n            let j = len - 1;\n            while (nums[j] &#x3C;= nums[i - 1]) {\n                j--;\n            }\n\n            t = nums[j];\n            nums[j] = nums[i - 1];\n            nums[i - 1] = t;\n\n            break;\n        }\n    }\n\n    if (i === 0) {\n        nums.reverse();\n    }\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}