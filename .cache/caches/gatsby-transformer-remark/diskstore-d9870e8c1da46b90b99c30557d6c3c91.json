{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-ee43c8a5e27652a1e03211ff37168a28--","val":"<p>Variables are declared with the <code>var</code> keyword. JavaScript is\n<em>dynamically typed</em> so every variable can hold a value of any data type.</p>\n<p>Variables can be declared without an initial value.</p>\n<p>Some example declarations:</p>\n<pre><code class=\"language-js\">var foo;\nvar bar = 42;\nvar foo, bar, baz;\nvar foo = 42,\n    bar = 'baz',\n    z;\n</code></pre>\n<p>Variables that don't explicitly get assigned an initial value have the value\n<code>undefined</code>.</p>\n<div class=\"callout secondary\">\n<p><i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i> <strong>ES2015</strong></p>\n<p>Since ES2015, <code>let</code> and <code>const</code> can be used in addition to <code>var</code>. We will learn\nhow they differ from <code>var</code> later. For now, lets have a look how <code>const</code> differs\nfrom <code>var</code> or <code>let</code>: <code>const</code> can be assigned a value only <em>once</em> (<em>const</em>ant).<br>\nReassigning a value will either throw an error (in strict mode, see below) or\nis silently ignored:</p>\n<pre><code class=\"language-js\">const foo = 42;\nfoo = 21; // error or ignored\n</code></pre>\n<p><code>const</code>s <em>must</em> be initialized with a value:</p>\n<pre><code class=\"language-js\">const foo; // error\nfoo = 42;\n</code></pre>\n</div>\n<hr>\n<h2>Variable names</h2>\n<p>Valid characters for variable names include <a href=\"http://mathiasbynens.be/notes/javascript-identifiers\">a wide range of <em>unicode\ncharacters</em></a>.\nHowever, the name <em>must</em> start with a letter, <code>_</code> or <code>$</code>. Not doing so will\nresult in a syntax error.</p>\n<p>Examples:</p>\n<pre><code class=\"language-js\">var π = 3.141;\nvar _foo = π;\nvar 0_bar = '...'; // Syntax error\n</code></pre>\n<hr>\n<h2>Variable access</h2>\n<p>Trying to <em>read</em> an <em>undeclared variable</em> results in a runtime error:</p>\n<pre><code class=\"language-js\">var foo;\nconsole.log(bar); // ReferenceError: bar is not defined.\n</code></pre>\n<p>However, <em>writing</em> to an undeclared variable is valid by default. It will\ncreate an <em>implicit global variable</em> and should thus be avoided:</p>\n<hr>\n<pre><code class=\"language-js\">function foo() {\n    bar = 42;\n}\nfoo();\nconsole.log(bar); // no error\n</code></pre>\n<div class=\"callout primary\">\n<p>If code runs in <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">strict mode</a></em>, assigning to an undeclared variable throws\nan <em>error</em>.</p>\n</div>\n<div class=\"callout primary\">\n<h3>Strict mode</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict mode</a> is a mode of evaluating JavaScript that enforces stricter\nrules. It was introduced to \"deprecate\" certain patterns/behaviors that are\nconsidered bad or confusing.</p>\n<p>Strict mode can be enabled for a JavaScript or a function by putting</p>\n<pre><code class=\"language-js\">'use strict';\n</code></pre>\n<p>at the beginning of it.</p>\n</div>\n<p>JavaScript has <em>6</em> data types. Five of those are so called <em>primitive</em> data\ntypes:</p>\n<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Null</li>\n<li>Undefined</li>\n</ul>\n<p>Everything else that is not a value of one of the above types is an</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>As we will see in the following slides, objects belong to different kinds of\n\"classes\" of objects.</p>\n<div class=\"callout secondary\">\n<p><i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i> <strong>ES2015</strong></p>\n<p>ES2015 introduces a 6th primitive data type: <em>[Symbol][]</em>. Symbols are <em>unique</em>\nand <em>immutable</em> values.</p>\n</div>"}