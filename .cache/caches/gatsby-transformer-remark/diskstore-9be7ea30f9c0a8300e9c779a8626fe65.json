{"expireTime":9007200904342769000,"key":"transformer-remark-markdown-ast-b6560a22f2028ca40cd9dc25477e9c73--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"const","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":8,"offset":8},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":8,"offset":8},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constants are block-scoped, much like variables declared using the ","position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":68,"offset":77},"indent":[]}},{"type":"inlineCode","value":"let","position":{"start":{"line":4,"column":68,"offset":77},"end":{"line":4,"column":73,"offset":82},"indent":[]}},{"type":"text","value":" keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.","position":{"start":{"line":4,"column":73,"offset":82},"end":{"line":4,"column":173,"offset":182},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":173,"offset":182},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":6,"column":4,"offset":187},"end":{"line":6,"column":10,"offset":193},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":184},"end":{"line":6,"column":10,"offset":193},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];","position":{"start":{"line":8,"column":1,"offset":195},"end":{"line":8,"column":72,"offset":266},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"nameN","position":{"start":{"line":10,"column":1,"offset":268},"end":{"line":10,"column":8,"offset":275},"indent":[]}},{"type":"text","value":"\nThe constant's name, which can be any legal ","position":{"start":{"line":10,"column":8,"offset":275},"end":{"line":11,"column":45,"offset":320},"indent":[1]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Identifier","children":[{"type":"text","value":"identifier","position":{"start":{"line":11,"column":46,"offset":321},"end":{"line":11,"column":56,"offset":331},"indent":[]}}],"position":{"start":{"line":11,"column":45,"offset":320},"end":{"line":11,"column":119,"offset":394},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":119,"offset":394},"end":{"line":11,"column":120,"offset":395},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":268},"end":{"line":11,"column":120,"offset":395},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"valueN","position":{"start":{"line":13,"column":1,"offset":397},"end":{"line":13,"column":9,"offset":405},"indent":[]}},{"type":"text","value":"\nThe constant's value. This can be any legal ","position":{"start":{"line":13,"column":9,"offset":405},"end":{"line":14,"column":45,"offset":450},"indent":[1]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#expressions","children":[{"type":"text","value":"expression","position":{"start":{"line":14,"column":46,"offset":451},"end":{"line":14,"column":56,"offset":461},"indent":[]}}],"position":{"start":{"line":14,"column":45,"offset":450},"end":{"line":14,"column":158,"offset":563},"indent":[]}},{"type":"text","value":", including a function expression.","position":{"start":{"line":14,"column":158,"offset":563},"end":{"line":14,"column":192,"offset":597},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":397},"end":{"line":14,"column":192,"offset":597},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":16,"column":1,"offset":599},"end":{"line":16,"column":5,"offset":603},"indent":[]}},{"type":"link","title":null,"url":"../operators/destructuring_assignment","children":[{"type":"text","value":"Destructuring Assignment","position":{"start":{"line":16,"column":6,"offset":604},"end":{"line":16,"column":30,"offset":628},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":603},"end":{"line":16,"column":70,"offset":668},"indent":[]}},{"type":"text","value":" syntax can also be used to declare variables.","position":{"start":{"line":16,"column":70,"offset":668},"end":{"line":16,"column":116,"offset":714},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":599},"end":{"line":16,"column":116,"offset":714},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const { bar } = foo; // where foo = { bar:10, baz:12 };\n/* This creates a constant with the name 'bar', which has a value of 10 */","position":{"start":{"line":18,"column":1,"offset":716},"end":{"line":19,"column":79,"offset":854},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":21,"column":4,"offset":859},"end":{"line":21,"column":15,"offset":870},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":856},"end":{"line":21,"column":15,"offset":870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do ","position":{"start":{"line":23,"column":1,"offset":872},"end":{"line":23,"column":137,"offset":1008},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":23,"column":139,"offset":1010},"end":{"line":23,"column":142,"offset":1013},"indent":[]}}],"position":{"start":{"line":23,"column":137,"offset":1008},"end":{"line":23,"column":144,"offset":1015},"indent":[]}},{"type":"text","value":" become properties of the ","position":{"start":{"line":23,"column":144,"offset":1015},"end":{"line":23,"column":170,"offset":1041},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Window","children":[{"type":"inlineCode","value":"window","position":{"start":{"line":23,"column":171,"offset":1042},"end":{"line":23,"column":179,"offset":1050},"indent":[]}}],"position":{"start":{"line":23,"column":170,"offset":1041},"end":{"line":23,"column":237,"offset":1108},"indent":[]}},{"type":"text","value":" object, unlike ","position":{"start":{"line":23,"column":237,"offset":1108},"end":{"line":23,"column":253,"offset":1124},"indent":[]}},{"type":"link","title":null,"url":"var","children":[{"type":"inlineCode","value":"var","position":{"start":{"line":23,"column":254,"offset":1125},"end":{"line":23,"column":259,"offset":1130},"indent":[]}}],"position":{"start":{"line":23,"column":253,"offset":1124},"end":{"line":23,"column":265,"offset":1136},"indent":[]}},{"type":"text","value":" variables.","position":{"start":{"line":23,"column":265,"offset":1136},"end":{"line":23,"column":276,"offset":1147},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":872},"end":{"line":23,"column":276,"offset":1147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An initializer for a constant is required. You must specify its value in the same statement in which it's declared. (This makes sense, given that it can't be changed later.)","position":{"start":{"line":25,"column":1,"offset":1149},"end":{"line":25,"column":174,"offset":1322},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1149},"end":{"line":25,"column":174,"offset":1322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":27,"column":1,"offset":1324},"end":{"line":27,"column":5,"offset":1328},"indent":[]}},{"type":"inlineCode","value":"const","position":{"start":{"line":27,"column":5,"offset":1328},"end":{"line":27,"column":12,"offset":1335},"indent":[]}},{"type":"text","value":" creates a read-only reference to a value. It does ","position":{"start":{"line":27,"column":12,"offset":1335},"end":{"line":27,"column":63,"offset":1386},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":27,"column":65,"offset":1388},"end":{"line":27,"column":68,"offset":1391},"indent":[]}}],"position":{"start":{"line":27,"column":63,"offset":1386},"end":{"line":27,"column":70,"offset":1393},"indent":[]}},{"type":"text","value":" mean the value it holds is immutableâ€”just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.","position":{"start":{"line":27,"column":70,"offset":1393},"end":{"line":27,"column":293,"offset":1616},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1324},"end":{"line":27,"column":293,"offset":1616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All the considerations about the \"","position":{"start":{"line":29,"column":1,"offset":1618},"end":{"line":29,"column":35,"offset":1652},"indent":[]}},{"type":"link","title":null,"url":"let#temporal_dead_zone_tdz","children":[{"type":"text","value":"temporal dead zone","position":{"start":{"line":29,"column":36,"offset":1653},"end":{"line":29,"column":54,"offset":1671},"indent":[]}}],"position":{"start":{"line":29,"column":35,"offset":1652},"end":{"line":29,"column":83,"offset":1700},"indent":[]}},{"type":"text","value":"\" apply to both ","position":{"start":{"line":29,"column":83,"offset":1700},"end":{"line":29,"column":99,"offset":1716},"indent":[]}},{"type":"link","title":null,"url":"let","children":[{"type":"inlineCode","value":"let","position":{"start":{"line":29,"column":100,"offset":1717},"end":{"line":29,"column":105,"offset":1722},"indent":[]}}],"position":{"start":{"line":29,"column":99,"offset":1716},"end":{"line":29,"column":111,"offset":1728},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":29,"column":111,"offset":1728},"end":{"line":29,"column":116,"offset":1733},"indent":[]}},{"type":"inlineCode","value":"const","position":{"start":{"line":29,"column":116,"offset":1733},"end":{"line":29,"column":123,"offset":1740},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":123,"offset":1740},"end":{"line":29,"column":124,"offset":1741},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1618},"end":{"line":29,"column":124,"offset":1741},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A constant cannot share its name with a function or a variable in the same scope.","position":{"start":{"line":31,"column":1,"offset":1743},"end":{"line":31,"column":82,"offset":1824},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1743},"end":{"line":31,"column":82,"offset":1824},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":33,"column":4,"offset":1829},"end":{"line":33,"column":12,"offset":1837},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1826},"end":{"line":33,"column":12,"offset":1837},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic const usage","position":{"start":{"line":35,"column":5,"offset":1843},"end":{"line":35,"column":22,"offset":1860},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1839},"end":{"line":35,"column":22,"offset":1860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.","position":{"start":{"line":37,"column":1,"offset":1862},"end":{"line":37,"column":112,"offset":1973},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1862},"end":{"line":37,"column":112,"offset":1973},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// trying to redeclare a constant throws an error\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will fail too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;","position":{"start":{"line":39,"column":1,"offset":1975},"end":{"line":56,"column":21,"offset":2539},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Block scoping","position":{"start":{"line":58,"column":5,"offset":2545},"end":{"line":58,"column":18,"offset":2558},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2541},"end":{"line":58,"column":18,"offset":2558},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's important to note the nature of block scoping.","position":{"start":{"line":60,"column":1,"offset":2560},"end":{"line":60,"column":52,"offset":2611},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2560},"end":{"line":60,"column":52,"offset":2611},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"if (MY_FAV === 7) {\n  // this is fine and creates a block scoped MY_FAV variable\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n\n  // MY_FAV is now 20\n  console.log('my favorite number is ' + MY_FAV);\n\n  // this gets hoisted into the global context and throws an error\n  var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log('my favorite number is ' + MY_FAV);","position":{"start":{"line":62,"column":1,"offset":2613},"end":{"line":75,"column":52,"offset":3068},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"const needs to be initialized","position":{"start":{"line":77,"column":5,"offset":3074},"end":{"line":77,"column":34,"offset":3103},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3070},"end":{"line":77,"column":34,"offset":3103},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// throws an error\n// Uncaught SyntaxError: Missing initializer in const declaration\n\nconst FOO;","position":{"start":{"line":79,"column":1,"offset":3105},"end":{"line":82,"column":15,"offset":3213},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"const in objects and arrays","position":{"start":{"line":84,"column":5,"offset":3219},"end":{"line":84,"column":32,"offset":3246},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3215},"end":{"line":84,"column":32,"offset":3246},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"const also works on objects and arrays.","position":{"start":{"line":86,"column":1,"offset":3248},"end":{"line":86,"column":40,"offset":3287},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3248},"end":{"line":86,"column":40,"offset":3287},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const MY_OBJECT = {'key': 'value'};\n\n// Attempting to overwrite the object throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_OBJECT = {'OTHER_KEY': 'value'};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = 'otherValue'; // Use Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push('A'); // [\"A\"]\n// However, assigning a new array to the variable throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_ARRAY = ['B'];","position":{"start":{"line":88,"column":1,"offset":3289},"end":{"line":104,"column":22,"offset":3974},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":105,"column":1,"offset":3975}}}}