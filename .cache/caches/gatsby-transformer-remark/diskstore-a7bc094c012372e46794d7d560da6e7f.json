{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-2678684dee7db9ab5ee5823b4f4e2d2e--","val":"<h1>Map</h1>\n<p>The <code>Map</code> object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value.</p>\n<h2>Description</h2>\n<p>A <code>Map</code> object iterates its elements in insertion order — a <a href=\"../statements/for...of\"><code>for...of</code></a> loop returns an array of <code>[key, value]</code> for each iteration.</p>\n<h3>Key equality</h3>\n<ul>\n<li>Key equality is based on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality\"><code>sameValueZero</code></a> algorithm.</li>\n<li><a href=\"nan\"><code>NaN</code></a> is considered the same as <code>NaN</code> (even though <code>NaN !== NaN</code>) and all other values are considered equal according to the semantics of the <code>===</code> operator.</li>\n<li>In the current ECMAScript specification, <code>-0</code> and <code>+0</code> are considered equal, although this was not so in earlier drafts. See <em>\"Value equality for -0 and 0\"</em> in the <a href=\"#browser_compatibility\">Browser compatibility</a> table for details.</li>\n</ul>\n<h3>Objects vs. Maps</h3>\n<p><a href=\"object\"><code>Object</code></a> is similar to <code>Map</code>—both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), <code>Object</code> has been used as <code>Map</code> historically.</p>\n<p>However, there are important differences that make <code>Map</code> preferable in certain cases:</p>\n<table><colgroup><col style=\"width: 33%\" /><col style=\"width: 33%\" /><col style=\"width: 33%\" /></colgroup><thead><tr class=\"header\"><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr class=\"odd\"><td>Accidental Keys</td><td>A <code>Map</code> does not contain any keys by default. It only contains what is explicitly put into it.</td><td><p>An <code>Object</code> has a prototype, so it contains default keys that could collide with your own keys if you're not careful.</p><div class=\"notecard note\"><p><strong>Note:</strong> As of ES5, this can be bypassed by using <a href=\"object/create\"><code>Object.create(null)</code></a>, but this is seldom done.</p></div></td></tr><tr class=\"even\"><td>Key Types</td><td>A <code>Map</code>'s keys can be any value (including functions, objects, or any primitive).</td><td>The keys of an <code>Object</code> must be either a <a href=\"string\"><code>String</code></a> or a <a href=\"symbol\"><code>Symbol</code></a>.</td></tr><tr class=\"odd\"><td>Key Order</td><td><p>The keys in <code>Map</code> are ordered in a simple, straightforward way: A <code>Map</code> object iterates entries, keys, and values in the order of entry insertion.</p></td><td><p>Although the keys of an ordinary <code>Object</code> are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.</p><p>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a> and <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\">EnumerateObjectProperties</a> abstract specification operations. But note that no single mechanism iterates <strong>all</strong> of an object's properties; the various mechanisms each include different subsets of properties. (<a href=\"../statements/for...in\"><code>for-in</code></a> includes only enumerable string-keyed properties; <a href=\"object/keys\"><code>Object.keys</code></a> includes only own, enumerable, string-keyed properties; <a href=\"object/getownpropertynames\"><code>Object.getOwnPropertyNames</code></a> includes own, string-keyed properties even if non-enumerable; <a href=\"object/getownpropertysymbols\"><code>Object.getOwnPropertySymbols</code></a> does the same for just <code>Symbol</code>-keyed properties, etc.)</p></td></tr><tr class=\"even\"><td><p>Size</p></td><td>The number of items in a <code>Map</code> is easily retrieved from its <a href=\"map/size\"><code>size</code></a> property.</td><td>The number of items in an <code>Object</code> must be determined manually.</td></tr><tr class=\"odd\"><td>Iteration</td><td>A <code>Map</code> is an <a href=\"../iteration_protocols\">iterable</a>, so it can be directly iterated.</td><td><p><code>Object</code> does not implement an <a href=\"../iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript <a href=\"../statements/for...of\">for...of</a> statement (by default).</p><div class=\"notecard note\"><p><strong>Note:</strong></p><ul><li>An object can implement the iteration protocol, or you can get an iterable for an object using <a href=\"object/keys\"><code>Object.keys</code></a> or <a href=\"object/entries\"><code>Object.entries</code></a>.</li><li>The <a href=\"../statements/for...in\">for...in</a> statement allows you to iterate over the <em>enumerable</em> properties of an object.</li></ul></div></td></tr><tr class=\"even\"><td>Performance</td><td><p>Performs better in scenarios involving frequent additions and removals of key-value pairs.</p></td><td><p>Not optimized for frequent additions and removals of key-value pairs.</p></td></tr></tbody></table>\n<h3>Setting object properties</h3>\n<p>Setting Object properties works for Map objects as well, and can cause considerable confusion.</p>\n<p>Therefore, this appears to work in a way:</p>\n<pre><code>let wrongMap = new Map()\nwrongMap['bla'] = 'blaa'\nwrongMap['bla2'] = 'blaaa2'\n\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n</code></pre>\n<p>But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:</p>\n<pre><code>wrongMap.has('bla')    // false\nwrongMap.delete('bla') // false\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n</code></pre>\n<p>The correct usage for storing data in the Map is through the <code>set(key, value)</code> method.</p>\n<pre><code>let contacts = new Map()\ncontacts.set('Jessie', {phone: \"213-555-1234\", address: \"123 N 1st Ave\"})\ncontacts.has('Jessie') // true\ncontacts.get('Hilary') // undefined\ncontacts.set('Hilary', {phone: \"617-555-4321\", address: \"321 S 2nd St\"})\ncontacts.get('Jessie') // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete('Raymond') // false\ncontacts.delete('Jessie') // true\nconsole.log(contacts.size) // 1\n</code></pre>\n<h2>Constructor</h2>\n<p><a href=\"map/map\"><code>Map()</code></a>\nCreates a new <code>Map</code> object.</p>\n<h2>Static properties</h2>\n<p><a href=\"map/@@species\"><code>get Map[@@species]</code></a>\nThe constructor function that is used to create derived objects.</p>\n<h2>Instance properties</h2>\n<p><a href=\"map/size\"><code>Map.prototype.size</code></a>\nReturns the number of key/value pairs in the <code>Map</code> object.</p>\n<h2>Instance methods</h2>\n<p><a href=\"map/clear\"><code>Map.prototype.clear()</code></a>\nRemoves all key-value pairs from the <code>Map</code> object.</p>\n<p><a href=\"map/delete\"><code>Map.prototype.delete(key)</code></a>\nReturns <code>true</code> if an element in the <code>Map</code> object existed and has been removed, or <code>false</code> if the element does not exist. <code>Map.prototype.has(key)</code> will return <code>false</code> afterwards.</p>\n<p><a href=\"map/get\"><code>Map.prototype.get(key)</code></a>\nReturns the value associated to the <code>key</code>, or <code>undefined</code> if there is none.</p>\n<p><a href=\"map/has\"><code>Map.prototype.has(key)</code></a>\nReturns a boolean asserting whether a value has been associated to the <code>key</code> in the <code>Map</code> object or not.</p>\n<p><a href=\"map/set\"><code>Map.prototype.set(key, value)</code></a>\nSets the <code>value</code> for the <code>key</code> in the <code>Map</code> object. Returns the <code>Map</code> object.</p>\n<h3>Iteration methods</h3>\n<p><a href=\"map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a>\nReturns a new Iterator object that contains <code>[key, value]</code> for each element in the <code>Map</code> object in insertion order.</p>\n<p><a href=\"map/keys\"><code>Map.prototype.keys()</code></a>\nReturns a new Iterator object that contains the <strong>keys</strong> for each element in the <code>Map</code> object in insertion order.</p>\n<p><a href=\"map/values\"><code>Map.prototype.values()</code></a>\nReturns a new Iterator object that contains the <strong>values</strong> for each element in the <code>Map</code> object in insertion order.</p>\n<p><a href=\"map/entries\"><code>Map.prototype.entries()</code></a>\nReturns a new Iterator object that contains <code>[key, value]</code> for each element in the <code>Map</code> object in insertion order.</p>\n<p><a href=\"map/foreach\"><code>Map.prototype.forEach(callbackFn[, thisArg])</code></a>\nCalls <code>callbackFn</code> once for each key-value pair present in the <code>Map</code> object, in insertion order. If a <code>thisArg</code> parameter is provided to <code>forEach</code>, it will be used as the <code>this</code> value for each callback.</p>\n<h2>Examples</h2>\n<h3>Using the Map object</h3>\n<pre><code>let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n</code></pre>\n<h3>Using NaN as Map keys</h3>\n<p><a href=\"nan\"><code>NaN</code></a> can also be used as a key. Even though every <code>NaN</code> is not equal to itself (<code>NaN !== NaN</code> is true), the following example works because <code>NaN</code>s are indistinguishable from each other:</p>\n<pre><code>let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN)\n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN)\n// \"not a number\"\n</code></pre>\n<h3>Iterating Map with for..of</h3>\n<p>Maps can be iterated using a <code>for..of</code> loop:</p>\n<pre><code>let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n</code></pre>\n<h3>Iterating Map with forEach()</h3>\n<p>Maps can be iterated using the <a href=\"map/foreach\"><code>forEach()</code></a> method:</p>\n<pre><code>myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one\n</code></pre>\n<h3>Relation with Array objects</h3>\n<pre><code>let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]\n</code></pre>\n<h3>Cloning and merging Maps</h3>\n<p>Just like <code>Array</code>s, <code>Map</code>s can be cloned:</p>\n<pre><code>let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)\n</code></pre>\n<p><strong>Note:</strong> Keep in mind that <em>the data itself</em> is not cloned.</p>\n<p>Maps can be merged, maintaining key uniqueness:</p>\n<pre><code>let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n</code></pre>\n<p>Maps can be merged with Arrays, too:</p>\n<pre><code>let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n</code></pre>"}