{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-0204dda143ef07ec264a60805881c1fd--","val":"<h2><a href=\"https://leetcode.com/problems/zigzag-conversion/description/\">6. ZigZag Conversion</a></h2>\n<h3>Problem:</h3>\n<p>The string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre>\n<p>And then read line by line: <code>\"PAHNAPLSIIGYIR\"</code></p>\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n<pre><code>string convert(string s, int numRows);\n</code></pre>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</code></pre>\n<h3>Solution:</h3>\n<p>Squeeze the zigzag pattern horizontally to form a matrix. Now deal with the odd and even columns respectively.</p>\n<p>For example let numRows be 5, if we list out the indecies:</p>\n<pre><code>row\n 1    00    08    16\n 2    01 07 09 15 17\n 3    02 06 10 14 18\n 4    03 05 11 13 19\n 5    04    12    20\n</code></pre>\n<p>First calculate the matrix width:</p>\n<pre><code>pairs = floor( len(s) / (numRows + numRows - 2) )\nwidth = pairs * 2 + ceil( (len(s) - pairs * (numRows + numRows - 2)) / numRows )\n</code></pre>\n<p>We can easily make a observation that the direction of odd and even columns and different.</p>\n<p>Let the first column be index 0 and let i be the current position at column col.</p>\n<p>We need to count the items between matrix[row][col] and matrix[row][col+1], exclusive.</p>\n<pre><code>next_i = i + (numRows - row) + (numRows - row), if col is even &#x26;&#x26; 1 &#x3C; row &#x3C; numRows\nnext_i = i + row - 2 + row, if col is odd &#x26;&#x26; 1 &#x3C; row &#x3C; numRows\n</code></pre>\n<p>If row == 1 or row == numRows, skip the odd columns.</p>\n<pre><code>next_i = i + numRows + (numRows - 2), if col is even &#x26;&#x26; (row == 1 || row == numRows)\n</code></pre>\n<pre><code class=\"language-js\">/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nlet convert = function (s, numRows) {\n    if (numRows &#x3C;= 1) {\n        return s;\n    }\n\n    const pairs = Math.floor(s.length / (numRows + numRows - 2));\n    const width = pairs * 2 + Math.ceil((s.length - pairs * (numRows + numRows - 2)) / numRows);\n\n    let result = '';\n\n    for (let row = 1; row &#x3C;= numRows; row++) {\n        let i = row - 1;\n        result += s[i] || '';\n        for (let col = 0; col &#x3C; width; col++) {\n            if (row === 1 || row === numRows) {\n                if (col % 2 === 0) {\n                    i += numRows + (numRows - 2);\n                } else {\n                    continue;\n                }\n            } else {\n                if (col % 2 === 0) {\n                    i += numRows - row + (numRows - row);\n                } else {\n                    i += row - 2 + row;\n                }\n            }\n            result += s[i] || '';\n        }\n    }\n\n    return result;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}