{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-233d8cc5aab51193ce8d0ef8e28704a0--","val":"<h2><a href=\"https://leetcode.com/problems/container-with-most-water/description/\">11. Container With Most Water</a></h2>\n<h3>Problem:</h3>\n<p>Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n<h3>Solution:</h3>\n<p>Greedy Algorithm.</p>\n<p>If we look at the simple brute force approach, where we choose one point at a time and calculate all the possible areas with other points on the right, it is easy to make a observation that we are narrowing down the horizontal distance.</p>\n<p>Greedy Algorithm can help us skip some of the conditions. It is base on a fact that the area between two columns are determined by the shorter one.</p>\n<p>Let's say we have pointer <code>l</code> and <code>r</code> at the begin and end of a distance, and the area is <code>area(l, r)</code>, how should we narrow down the distance?</p>\n<p>If <code>height[l] &#x3C; height[r]</code>, we know that the height of the area will never be greater than <code>height[l]</code> if we keep <code>l</code>. Now if we get rid of <code>r</code>, the area can only get smaller since the distance is shorter, and the height is at most <code>height[l]</code>.</p>\n<p>Here we conclude rule NO.1: Get rid of the smaller one.</p>\n<p>What if <code>height[l] == height[r]</code>? It is safe to get rid of both. We do not need any of them to constrain the max height of the rest points.</p>\n<pre><code class=\"language-js\">/**\n * @param {number[]} height\n * @return {number}\n */\nlet maxArea = function (height) {\n    let max = 0;\n    for (let l = 0, r = height.length - 1; l &#x3C; r; l++, r--) {\n        max = Math.max(max, (r - l) * Math.min(height[l], height[r]));\n        if (height[l] &#x3C; height[r]) {\n            r++;\n        } else {\n            l--;\n        }\n    }\n    return max;\n};\n</code></pre>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>\n<hr>\n<p>☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆☆<em>: .｡. o(≧▽≦)o .｡.:</em>☆</p>\n<hr>"}