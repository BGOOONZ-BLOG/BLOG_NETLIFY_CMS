{"expireTime":9007200904342772000,"key":"transformer-remark-markdown-html-b75d1959851561342eae06eb7ece3c1d--","val":"<h3>zQ1. What is an abstract class?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> An abstract class is the name for any class from which you can instantiate an object.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstract classes must be redefined any time an object is instantiated from them.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstract classes must inherit from concrete classes.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] An abstract class exists only so that other \"concrete\" classes can inherit from the abstract class.</li>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/abstract-classes-in-python/\">reference</a></p>\n<h3>Q2. What happens when you use the build-in function <code>any()</code> on a list?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>any()</code> function will randomly return any item from the list.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The <code>any()</code> function returns True if any item in the list evaluates to True. Otherwise, it returns False.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>any()</code> function takes as arguments the list to check inside, and the item to check for. If \"any\" of the items in the list match the item to check for, the function returns True.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>any()</code> function returns a Boolean value that answers the question \"Are there any items in this list?\"</li>\n</ul>\n<p><strong>example</strong></p>\n<pre><code class=\"language-python\">if any([True, False, False, False]) == True:\n    print('Yes, there is True')\n>>> Yes, there is True\n</code></pre>\n<h3>Q3. What data structure does a binary tree degenerate to if it isn't balanced properly?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] linked list</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> queue</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> set</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> OrderedDict</li>\n</ul>\n<h3>Q4. What statement about static methods is true?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods are called static because they always return <code>None</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods can be bound to either a class or an instance of a class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Static methods serve mostly as utility methods or helper methods, since they can't access or modify a class's state.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods can access and modify the state of a class or an instance of a class.</li>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/class-method-vs-static-method-python\">reference</a></p>\n<h3>Q5. What are attributes?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Attributes are long-form version of an <code>if/else</code> statement, used when testing for equality between objects.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Attributes are a way to hold data or describe a state for a class or an instance of a class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Attributes are strings that describe characteristics of a class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Function arguments are called \"attributes\" in the context of class methods and instance methods.</li>\n</ul>\n<p><strong>Explanation</strong> Attributes defined under the class, arguments goes under the functions. arguments usually refer as parameter, whereas attributes are the constructor of the class or an instance of a class.</p>\n<h3>Q6. What is the term to describe this code?</h3>\n<p><code>count, fruit, price = (2, 'apple', 3.5)</code></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>tuple assignment</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>tuple unpacking</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>tuple matching</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>tuple duplication</code></li>\n</ul>\n<h3>Q7. What built-in list method would you use to remove items from a list?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>.delete()</code> method</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>pop(my_list)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>del(my_list)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>.pop()</code> method</li>\n</ul>\n<p><strong>example</strong></p>\n<pre><code class=\"language-python\">my_list = [1,2,3]\nmy_list.pop(0)\nmy_list\n>>>[2,3]\n</code></pre>\n<h3>Q8. What is one of the most common use of Python's sys library?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] to capture command-line arguments given at a file's runtime</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to connect various systems, such as connecting a web front end, an API service, a database, and a mobile app</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to take a snapshot of all the packages and libraries in your virtual environment</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> to scan the health of your Python ecosystem while inside a virtual environment</li>\n</ul>\n<h3>Q9. What is the runtime of accessing a value in a dictionary by using its key?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(n), also called linear time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(log n), also called logarithmic time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(n^2), also called quadratic time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] O(1), also called constant time.</li>\n</ul>\n<h3>Q10. What is the correct syntax for defining a class called Game, if it inherits from a parent class called LogicGame?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>class Game(LogicGame): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>def Game(LogicGame): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>def Game.LogicGame(): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>class Game.LogicGame(): pass</code></li>\n</ul>\n<p><strong>Explanation:</strong> <code>The parent class which is inherited is passed as an argument to the child class. Therefore, here the first option is the right answer.</code></p>\n<h3>Q11. What is the correct way to write a doctest?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    \"\"\"\n    sum(4, 3)\n    7\n\n    sum(-4, 5)\n    1\n    \"\"\"\n    return a + b\n</code></pre>\n<ul>\n<li>[✅] B</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    \"\"\"\n    >>> sum(4, 3)\n    7\n\n    >>> sum(-4, 5)\n    1\n    \"\"\"\n    return a + b\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> C</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    \"\"\"\n    # >>> sum(4, 3)\n    # 7\n\n    # >>> sum(-4, 5)\n    # 1\n    \"\"\"\n    return a + b\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> D</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    ###\n    >>> sum(4, 3)\n    7\n\n    >>> sum(-4, 5)\n    1\n    ###\n    return a + b\n</code></pre>\n<p><strong>explanation</strong> - use ''' to start the doc and add output of the cell after >>></p>\n<h3>Q12. What built-in Python data type is commonly used to represent a stack?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>set</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>list</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>None</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>dictionary</code></li>\n</ul>\n<p><code>. You can only build a stack from scratch.</code></p>\n<h3>Q13. What would this expression return?</h3>\n<pre><code class=\"language-python\">college_years = ['Freshman', 'Sophomore', 'Junior', 'Senior']\nreturn list(enumerate(college_years, 2019))\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>[('Freshman', 2019), ('Sophomore', 2020), ('Junior', 2021), ('Senior', 2022)]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>[(2019, 2020, 2021, 2022), ('Freshman', 'Sophomore', 'Junior', 'Senior')]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>[('Freshman', 'Sophomore', 'Junior', 'Senior'), (2019, 2020, 2021, 2022)]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>[(2019, 'Freshman'), (2020, 'Sophomore'), (2021, 'Junior'), (2022, 'Senior')]</code></li>\n</ul>\n<h3>Q14. How does <code>defaultdict</code> work?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> will automatically create a dictionary for you that has keys which are the integers 0-10.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> forces a dictionary to only accept keys that are of the data type specified when you created the <code>defaultdict</code> (such as strings or integers).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] If you try to read from a <code>defaultdict</code> with a nonexistent key, a new default key-value pair will be created for you instead of throwing a <code>KeyError</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> stores a copy of a dictionary in memory that you can default to if the original gets unintentionally modified.</li>\n</ul>\n<h3>Q15. What is the correct syntax for defining a class called \"Game\", if it inherits from a parent class called \"LogicGame\"?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>class Game.LogicGame(): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>def Game(LogicGame): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>class Game(LogicGame): pass</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>def Game.LogicGame(): pass</code></li>\n</ul>\n<p><code>repeated but labels will be different</code></p>\n<h3>Q16. What is the purpose of the \"self\" keyword when defining or calling instance methods?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>self</code> means that no other arguments are required to be passed into the method.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> There is no real purpose for the <code>self</code> method; it's just historic computer science jargon that Python keeps to stay consistent with other programming languages.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>self</code> refers to the instance whose method was called.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>self</code> refers to the class that was inherited from to create the object using <code>self</code>.</li>\n</ul>\n<p><strong>Simple example</strong></p>\n<pre><code class=\"language-python\">class my_secrets:\n    def __init__(self, password):\n        self.password = password\n        pass\ninstance = my_secrets('1234')\ninstance.password\n>>>'1234'\n</code></pre>\n<h3>Q17. Which of these is NOT a characteristic of namedtuples?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You can assign a name to each of the <code>namedtuple</code> members and refer to them that way, similarly to how you would access keys in <code>dictionary</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Each member of a namedtuple object can be indexed to directly, just like in a regular <code>tuple</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>namedtuples</code> are just as memory efficient as regular <code>tuples</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] No import is needed to use <code>namedtuples</code> because they are available in the standard library.</li>\n</ul>\n<p>**We need to import it using <code>from collections import namedtuple</code> **</p>\n<h3>Q18. What is an instance method?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Instance methods can modify the state of an instance or the state of its parent class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Instance methods hold data related to the instance.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> An instance method is any class method that doesn't take any arguments.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> An instance method is a regular function that belongs to a class, but it must return <code>None</code>.</li>\n</ul>\n<h3>Q19. Which choice is the most syntactically correct example of the conditional branching?</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10:\n    print(\"There is a lot of people in the pool.\")\nelif num_people > 4;\n    print(\"There are some people in the pool.\")\nelif num_people > 0;\n    print(\"There are a few people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10:\n    print(\"There is a lot of people in the pool.\")\nif num_people > 4:\n    print(\"There are some people in the pool.\")\nif num_people > 0:\n    print(\"There are a few people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10:\n    print(\"There is a lot of people in the pool.\")\nelif num_people > 4:\n    print(\"There are some people in the pool.\")\nelif num_people > 0:\n    print(\"There are a few people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">if num_people > 10;\n    print(\"There is a lot of people in the pool.\")\nif num_people > 4:\n    print(\"There are some people in the pool.\")\nif num_people > 0:\n    print(\"There are a few people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<p>Also see Question 85 for the same question with different answers.</p>\n<h3>Q20. Which statement does NOT describe the object-oriented programming concept of encapsulation?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It protects the data from outside interference.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A parent class is encapsulated and no data from the parent class passes on to the child class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It keeps data and the methods that can manipulate that data in one place.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It only allows the data to be changed by methods.</li>\n</ul>\n<h3>Q21. What is the purpose of an if/else statement?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It tells the computer which chunk of code to run if the instructions you coded are incorrect.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It runs one chunk of code if all the imports were successful, and another chunk of code if the imports were not successful.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It executes one chunk of code if a condition is true, but a different chunk of code if the condition is false.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It tells the computer which chunk of code to run if the is enough memory to handle it, and which chunk of code to run if there is not enough memory to handle it.</li>\n</ul>\n<h3>Q22. What built-in Python data type is best suited for implementing a queue?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> dictionary</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> set</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> None. You can only build a queue from scratch.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] list</li>\n</ul>\n<h3>Q23. What is the correct syntax for instantiating a new object of the type Game?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_game = class.Game()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_game = class(Game)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>my_game = Game()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_game = Game.create()</code></li>\n</ul>\n<h3>Q24. What does the built-in <code>map()</code> function do?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It creates a path from multiple values in an iterable to a single value.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It applies a function to each item in an iterable and returns the value of that function.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It converts a complex value type into simpler value types.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It creates a mapping between two different elements of different iterables.</li>\n</ul>\n<p><strong>Explanation:</strong> - The synax for <code>map()</code> function is <code>list(map(function,iterable)</code>. the simple area finder using map would be like this</p>\n<pre><code class=\"language-python\">import math\nradius = [1,2,3]\narea = list(map(lambda x: round(math.pi*(x**2), 2), radius))\narea\n>>> [3.14, 12.57, 28.27]\n</code></pre>\n<h3>Q25. If you don't explicitly return a value from a function, what happens?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The function will return a RuntimeError if you don't return a value.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] If the return keyword is absent, the function will return <code>None</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> If the return keyword is absent, the function will return <code>True</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The function will enter an infinite loop because it won't know when to stop executing its code.</li>\n</ul>\n<h3>Q26. What is the purpose of the <code>pass</code> statement in Python?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is used to skip the <code>yield</code> statement of a generator and return a value of None.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It is a null operation used mainly as a placeholder in functions, classes, etc.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is used to pass control from one statement block to another.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It is used to skip the rest of a <code>while</code> or <code>for loop</code> and return to the start of the loop.</li>\n</ul>\n<h3>Q27. What is the term used to describe items that may be passed into a function?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] arguments</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> paradigms</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> attributes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> decorators</li>\n</ul>\n<h3>Q28. Which collection type is used to associate values with unique keys?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>slot</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>dictionary</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>queue</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>sorted list</code></li>\n</ul>\n<h3>Q29. When does a for loop stop iterating?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when it encounters an infinite loop</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when it encounters an if/else statement that contains a break keyword</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when it has assessed each item in the iterable it is working on or a break keyword is encountered</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when the runtime for the loop exceeds O(n^2)</li>\n</ul>\n<h3>Q30. Assuming the node is in a singly linked list, what is the runtime complexity of searching for a specific node within a singly linked list?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The runtime is O(n) because in the worst case, the node you are searching for is the last node, and every node in the linked list must be visited.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime is O(nk), with n representing the number of nodes and k representing the amount of time it takes to access each node in memory.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime cannot be determined unless you know how many nodes are in the singly linked list.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime is O(1) because you can index directly to a node in a singly linked list.</li>\n</ul>\n<h3>Q31. Given the following three list, how would you create a new list that matches the desired output printed below?</h3>\n<pre><code class=\"language-python\">fruits = ['Apples', 'Oranges', 'Bananas']\nquantities = [5, 3, 4]\nprices = [1.50, 2.25, 0.89]\n\n#Desired output\n[('Apples', 5, 1.50),\n('Oranges', 3, 2.25),\n('Bananas', 4, 0.89)]\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">output = []\n\nfruit_tuple_0 = (first[0], quantities[0], price[0])\noutput.append(fruit_tuple)\n\nfruit_tuple_1 = (first[1], quantities[1], price[1])\noutput.append(fruit_tuple)\n\nfruit_tuple_2 = (first[2], quantities[2], price[2])\noutput.append(fruit_tuple)\n\nreturn output\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">i = 0\noutput = []\nfor fruit in fruits:\n    temp_qty = quantities[i]\n    temp_price = prices[i]\n    output.append((fruit, temp_qty, temp_price))\n    i += 1\nreturn output\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">groceries = zip(fruits, quantities, prices)\nreturn groceries\n\n>>> [\n('Apples', 5, 1.50),\n('Oranges', 3, 2.25),\n('Bananas', 4, 0.89)\n]\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">i = 0\noutput = []\nfor fruit in fruits:\n    for qty in quantities:\n        for price in prices:\n            output.append((fruit, qty, price))\n    i += 1\nreturn output\n</code></pre>\n<h3>Q32. What happens when you use the built-in function all() on a list?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>all()</code> function returns a Boolean value that answers the question \"Are all the items in this list the same?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>all()</code> function returns True if all the items in the list can be converted to strings. Otherwise, it returns False.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>all()</code> function will return all the values in the list.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The <code>all()</code> function returns True if all items in the list evaluate to True. Otherwise, it returns False.</li>\n</ul>\n<p><strong>Explaination</strong> - <code>all()</code> returns true if all in the list are True, see example below</p>\n<pre><code class=\"language-python\">test = [True,False,False,False]\nif all(test) is True:\n    print('Yeah all are True')\nelse:\n    print('There is an imposter')\n>>> There is an imposter\n</code></pre>\n<h3>Q33. What is the correct syntax for calling an instance method on a class named Game?</h3>\n<p><em>(Answer format may vary. Game and roll (or dice</em>roll) should each be called with no parameters.)_</p>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">>>> dice = Game()\n>>> dice.roll()\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">>>> dice = Game(self)\n>>> dice.roll(self)\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">>>> dice = Game()\n>>> dice.roll(self)\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">>>> dice = Game(self)\n>>> dice.roll()\n</code></pre>\n<h3>Q34. What is the algorithmic paradigm of quick sort?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> backtracking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> dynamic programming</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> decrease and conquer</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] divide and conquer</li>\n</ul>\n<h3>Q35. What is runtime complexity of the list's built-in <code>.append()</code> method?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] O(1), also called constant time</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(log n), also called logarithmic time</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(n^2), also called quadratic time</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> O(n), also called linear time</li>\n</ul>\n<h3>Q36. What is key difference between a <code>set</code> and a <code>list</code>?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A set is an ordered collection unique items. A list is an unordered collection of non-unique items.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Elements can be retrieved from a list but they cannot be retrieved from a set.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A set is an ordered collection of non-unique items. A list is an unordered collection of unique items.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A set is an unordered collection unique items. A list is an ordered collection of non-unique items.</li>\n</ul>\n<h3>Q37. What is the definition of abstraction as applied to object-oriented Python?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstraction means that a different style of code can be used, since many details are already known to the program behind the scenes.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Abstraction means the implementation is hidden from the user, and only the relevant data or information is shown.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstraction means that the data and the functionality of a class are combined into one entity.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Abstraction means that a class can inherit from more than one parent class.</li>\n</ul>\n<h3>Q38. What does this function print?</h3>\n<pre><code class=\"language-python\">def print_alpha_nums(abc_list, num_list):\n    for char in abc_list:\n        for num in num_list:\n            print(char, num)\n    return\n\nprint_alpha_nums(['a', 'b', 'c'], [1, 2, 3])\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">a 1\na 2\na 3\nb 1\nb 2\nb 3\nc 1\nc 2\nc 3\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">['a', 'b', 'c'], [1, 2, 3]\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">aaa\nbbb\nccc\n111\n222\n333\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">a 1 2 3\nb 1 2 3\nc 1 2 3\n</code></pre>\n<h3>Q39. Correct representation of doctest for function in Python</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    # a = 1\n    # b = 2\n    # sum(a, b) = 3\n\n    return a + b\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    \"\"\"\n    a = 1\n    b = 2\n    sum(a, b) = 3\n    \"\"\"\n\n    return a + b\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    \"\"\"\n    >>> a = 1\n    >>> b = 2\n    >>> sum(a, b)\n    3\n    \"\"\"\n\n    return a + b\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def sum(a, b):\n    '''\n    a = 1\n    b = 2\n    sum(a, b) = 3\n    '''\n    return a + b\n</code></pre>\n<p><strong>Explanation:</strong> Use \"\"\" to start and end the docstring and use >>> to represent the output. If you write this correctly you can also run the doctest using build-in doctest module</p>\n<h3>Q40. Suppose a Game class inherits from two parent classes: BoardGame and LogicGame. Which statement is true about the methods of an object instantiated from the Game class?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> When instantiating an object, the object doesn't inherit any of the parent class's methods.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> When instantiating an object, the object will inherit the methods of whichever parent class has more methods.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> When instantiating an object, the programmer must specify which parent class to inherit methods from.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] An instance of the Game class will inherit whatever methods the BoardGame and LogicGame classes have.</li>\n</ul>\n<h3>Q41. What does calling namedtuple on a collection type return?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a generic object class with iterable parameter fields</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a generic object class with non-iterable named fields</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a tuple subclass with non-iterable parameter fields</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a tuple subclass with iterable named fields</li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-python\">import math\nradius = [1,2,3]\narea = list(map(lambda x: round(math.pi*(x**2), 2), radius))\narea\n>>> [3.14, 12.57, 28.27]\n</code></pre>\n<h3>Q42. What symbol(s) do you use to assess equality between two elements?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>&#x26;&#x26;</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>=</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>==</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>||</code></li>\n</ul>\n<h3>Q43. Review the code below. What is the correct syntax for changing the price to 1.5?</h3>\n<pre><code class=\"language-python\">fruit_info = {\n  'fruit': 'apple',\n  'count': 2,\n  'price': 3.5\n}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>fruit_info ['price'] = 1.5</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_list [3.5] = 1.5</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>1.5 = fruit_info ['price]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_list['price'] == 1.5</code></li>\n</ul>\n<h3>Q44. What value would be returned by this check for equality?</h3>\n<p><code>5 != 6</code></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>yes</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>False</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>True</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>None</code></li>\n</ul>\n<p><strong>Explanation</strong> - <code>!=</code> is equivalent to <strong>not equal to</strong> in python</p>\n<h3>Q45. What does a class's <code>init()</code> method do?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>__init__</code> method makes classes aware of each other if more than one class is defined in a single code file.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The<code>__init__</code> method is included to preserve backwards compatibility from Python 3 to Python 2, but no longer needs to be used in Python 3.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The <code>__init__</code> method is a constructor method that is called automatically whenever a new object is created from a class. It sets the initial state of a new object.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>__init__</code> method initializes any imports you may have included at the top of your file.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-python\">class test:\n    def __init__(self):\n        print('I came here without your permission lol')\n        pass\nt1 = test()\n>>> 'I came here without your permission lol'\n</code></pre>\n<h3>Q46. What is meant by the phrase \"space complexity\"?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>How many microprocessors it would take to run your code in less than one second</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>How many lines of code are in your code file</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>The amount of space taken up in memory as a function of the input size</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>How many copies of the code file could fit in 1 GB of memory</code></li>\n</ul>\n<h3>Q47. What is the correct syntax for creating a variable that is bound to a dictionary?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>fruit_info = {'fruit': 'apple', 'count': 2, 'price': 3.5}</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_info =('fruit': 'apple', 'count': 2,'price': 3.5 ).dict()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_info = ['fruit': 'apple', 'count': 2,'price': 3.5 ].dict()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_info = to_dict('fruit': 'apple', 'count': 2, 'price': 3.5)</code></li>\n</ul>\n<h3>Q48. What is the proper way to write a list comprehension that represents all the keys in this dictionary?</h3>\n<p><code>fruits = {'Apples': 5, 'Oranges': 3, 'Bananas': 4}</code></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_names = [x in fruits.keys() for x]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_names = for x in fruits.keys() *</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>fruit_names = [x for x in fruits.keys()]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_names = x for x in fruits.keys()</code></li>\n</ul>\n<h3>Q49. What is the purpose of the <code>self</code> keyword when defining or calling methods on an instance of an object?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>self</code> refers to the class that was inherited from to create the object using <code>self</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> There is no real purpose for the <code>self</code> method. It's just legacy computer science jargon that Python keeps to stay consistent with other programming languages.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>self</code> means that no other arguments are required to be passed into the method.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>self</code> refers to the instance whose method was called.</li>\n</ul>\n<p><strong>Explanation:</strong> - Try running the example of the Q45 without passing <code>self</code> argument inside the <code>__init__</code>, you'll understand the reason. You'll get the error like this <code>__init__() takes 0 positional arguments but 1 was given</code>, this means that something is going inside even if haven't specified, which is instance itself.</p>\n<h3>Q50. What statement about the class methods is true?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method is a regular function that belongs to a class, but it must return None.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A class method can modify the state of the class, but they can't directly modify the state of an instance that inherits from that class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method is similar to a regular function, but a class method doesn't take any arguments.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method hold all of the data for a particular class.</li>\n</ul>\n<h3>Q51. What does it mean for a function to have linear runtime?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You did not use very many advanced computer programming concepts in your code.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The difficulty level your code is written at is not that high.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It will take your program less than half a second to run.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The amount of time it takes the function to complete grows linearly as the input size increases.</li>\n</ul>\n<h3>Q52. What is the proper way to define a function?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>def getMaxNum(list_of_nums): # body of function goes here</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>func get_max_num(list_of_nums): # body of function goes here</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>func getMaxNum(list_of_nums): # body of function goes here</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>def get_max_num(list_of_nums): # body of function goes here</code></li>\n</ul>\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/\">explanation for 52 &#x26; 53</a></p>\n<h3>Q53. According to the PEP 8 coding style guidelines, how should constant values be named in Python?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> in camel case without using underscores to separate words -- e.g. <code>maxValue = 255</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> in lowercase with underscores to separate words -- e.g. <code>max_value = 255</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] in all caps with underscores separating words -- e.g. <code>MAX_VALUE = 255</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> in mixed case without using underscores to separate words -- e.g. <code>MaxValue = 255</code></li>\n</ul>\n<h3>Q54. Describe the functionality of a deque.</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A deque adds items to one side and remove items from the other side.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A deque adds items to either or both sides, but only removes items from the top.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A deque adds items at either or both ends, and remove items at either or both ends.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A deque adds items only to the top, but remove from either or both sides.</li>\n</ul>\n<p><strong>Explanation</strong> - <code>deque</code> is used to create block chanin and in that there is <em>first in first out</em> approch, which means the last element to enter will be the first to leave.</p>\n<h3>Q55. What is the correct syntax for creating a variable that is bound to a set?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>my_set = {0, 'apple', 3.5}</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_set = to_set(0, 'apple', 3.5)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_set = (0, 'apple', 3.5).to_set()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>my_set = (0, 'apple', 3.5).set()</code></li>\n</ul>\n<h3>Q56. What is the correct syntax for defining an <code>__init__()</code> method that takes no parameters?</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">class __init__(self):\n    pass\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__():\n    pass\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">class __init__():\n    pass\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__(self):\n    pass\n</code></pre>\n<h3>Q57. Which of the following is TRUE About how numeric data would be organised in a binary Search tree?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] For any given Node in a binary Search Tree, the child node to the left is less than the value of the given node and the child node to its right is greater than the given node.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Binary Search Tree cannot be used to organize and search through numeric data, given the complication that arise with very deep trees.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The top node of the binary search tree would be an arbitrary number. All the nodes to the left of the top node need to be less than the top node's number, but they don't need to ordered in any particular way.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The smallest numeric value would go in the top most node. The next highest number would go in its left child node, the the next highest number after that would go in its right child node. This pattern would continue until all numeric values were in their own node.</li>\n</ul>\n<h3>Q58. Why would you use a decorator?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A decorator is similar to a class and should be used if you are doing functional programming instead of object oriented programming.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A decorator is a visual indicator to someone reading your code that a portion of your code is critical and should not be changed.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] You use the decorator to alter the functionality of a function without having to modify the functions code.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> An import statement is preceded by a decorator, python knows to import the most recent version of whatever package or library is being imported.</li>\n</ul>\n<h3>Q59. When would you use a for loop?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Only in some situations, as loops are used only for certain type of programming.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] When you need to check every element in an iterable of known length.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> When you want to minimize the use of strings in your code.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> When you want to run code in one file for a function in another file.</li>\n</ul>\n<h3>Q60. What is the most self-descriptive way to define a function that calculates sales tax on a purchase?</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def tax(my_float):\n    '''Calculates the sales tax of a purchase. Takes in a float representing the subtotal as an argument and returns a float representing the sales tax.'''\n    pass\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def tx(amt):\n    '''Gets the tax on an amount.'''\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def sales_tax(amount):\n    '''Calculates the sales tax of a purchase. Takes in a float representing the subtotal as an argument and returns a float representing the sales tax.'''\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">def calculate_sales_tax(subtotal):\n    pass\n</code></pre>\n<h3>Q61. What would happen if you did not alter the state of the element that an algorithm is operating on recursively?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You do not have to alter the state of the element the algorithm is recursing on.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You would eventually get a KeyError when the recursive portion of the code ran out of items to recurse on.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] You would get a RuntimeError: maximum recursion depth exceeded.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The function using recursion would return None.</li>\n</ul>\n<p><a href=\"https://www.python-course.eu/python3_recursive_functions.php#Definition-of-Recursion\">explanation</a></p>\n<h3>Q62. What is the runtime complexity of searching for an item in a binary search tree?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime for searching in a binary search tree is O(1) because each node acts as a key, similar to a dictionary.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime for searching in a binary search tree is O(n!) because every node must be compared to every other node.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The runtime for searching in a binary search tree is generally O(h), where h is the height of the tree.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The runtime for searching in a binary search tree is O(n) because every node in the tree must be visited.</li>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/binary-search-tree-data-structure/\">explanation</a></p>\n<h3>Q63. Why would you use <code>mixin</code>?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You use a <code>mixin</code> to force a function to accept an argument at runtime even if the argument wasn't included in the function's definition.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You use a <code>mixin</code> to allow a decorator to accept keyword arguments.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You use a <code>mixin</code> to make sure that a class's attributes and methods don't interfere with global variables and functions.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] If you have many classes that all need to have the same functionality, you'd use a <code>mixin</code> to define that functionality.</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=zVFLBfqV-q0\">explanation</a></p>\n<h3>Q64. What is the runtime complexity of adding an item to a stack and removing an item from a stack?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add items to a stack in O(1) time and remove items from a stack on O(n) time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Add items to a stack in O(1) time and remove items from a stack in O(1) time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add items to a stack in O(n) time and remove items from a stack on O(1) time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add items to a stack in O(n) time and remove items from a stack on O(n) time.</li>\n</ul>\n<h3>Q65. Which statement accurately describes how items are added to and removed from a stack?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a stacks adds items to one side and removes items from the other side.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a stacks adds items to the top and removes items from the top.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a stacks adds items to the top and removes items from anywhere in the stack.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a stacks adds items to either end and removes items from either end.</li>\n</ul>\n<p><strong>Explanation</strong> Stack uses the <em>first in first out</em> approach</p>\n<h3>Q66. What is a base case in a recursive function?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A base case is the condition that allows the algorithm to stop recursing. It is usually a problem that is small enough to solve directly.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The base case is summary of the overall problem that needs to be solved.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The base case is passed in as an argument to a function whose body makes use of recursion.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The base case is similar to a base class, in that it can be inherited by another object.</li>\n</ul>\n<h3>Q67. Why is it considered good practice to open a file from within a Python script by using the <code>with</code> keyword?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>with</code> keyword lets you choose which application to open the file in.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <code>with</code> keyword acts like a <code>for</code> loop, and lets you access each line in the file one by one.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> There is no benefit to using the <code>with</code> keyword for opening a file in Python.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] When you open a file using the <code>with</code> keyword in Python, Python will make sure the file gets closed, even if an exception or error is thrown.</li>\n</ul>\n<p><a href=\"https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files\">explanation</a></p>\n<h3>Q68. Why would you use a virtual environment?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Virtual environments create a \"bubble\" around your project so that any libraries or packages you install within it don't affect your entire machine.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Teams with remote employees use virtual environments so they can share code, do code reviews, and collaborate remotely.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Virtual environments were common in Python 2 because they augmented missing features in the language. Virtual environments are not necessary in Python 3 due to advancements in the language.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Virtual environments are tied to your GitHub or Bitbucket account, allowing you to access any of your repos virtually from any machine.</li>\n</ul>\n<h3>Q69. What is the correct way to run all the doctests in a given file from the command line?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] python3 -m doctest &#x3C;<em>filename</em>></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> python3 &#x3C;<em>filename</em>></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> python3 &#x3C;<em>filename</em>> rundoctests</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> python3 doctest</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=P8qm0VAbbww&#x26;t=180s\">tutorial video</a></p>\n<h3>Q70. What is a lambda function ?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> any function that makes use of scientific or mathematical constants, often represented by Greek letters in academic writing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a function that get executed when decorators are used</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> any function whose definition is contained within five lines of code or fewer</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a small, anonymous function that can take any number of arguments but has only expression to evaluate</li>\n</ul>\n<p><a href=\"https://www.guru99.com/python-lambda-function.html\">Reference</a></p>\n<p><strong>Explanation:</strong> <code>the lambda notation is basically an anonymous function that can take any number of arguments with only single expression (i.e, cannot be overloaded). It has been introducted in other programming languages, such as C++ and Java. The lambda notation allows programmers to \"bypass\" function declaration.</code></p>\n<h3>Q71. What is the primary difference between lists and tuples?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You can access a specifc element in a list by indexing to its position, but you cannot access a specific element in a tuple unless you iterate through the tuple</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Lists are mutable, meaning you can change the data that is inside them at any time. Tuples are immutable, meaning you cannot change the data that is inside them once you have created the tuple.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Lists are immutable, meaning you cannot change the data that is inside them once you have created the list. Tuples are mutable, meaning you can change the data that is inside them at any time.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Lists can hold several data types inside them at once, but tuples can only hold the same data type if multiple elements are present.</li>\n</ul>\n<h3>Q72. Which statement about static method is true?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods can be bound to either a class or an instance of a class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods can access and modify the state of a class or an instance of a class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Static methods serve mostly as utility or helper methods, since they cannot access or modify a class's state.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Static methods are called static because they always return None.</li>\n</ul>\n<h3>Q73. What does a generator return?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> None</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] An iterable object</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A linked list data structure from a non-empty list</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> All the keys of the given dictionary</li>\n</ul>\n<h3>Q74. What is the difference between class attributes and instance attributes?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Instance attributes can be changed, but class attributes cannot be changed</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Class attributes are shared by all instances of the class. Instance attributes may be unique to just that instance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> There is no difference between class attributes and instance attributes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Class attributes belong just to the class, not to instance of that class. Instance attributes are shared among all instances of a class</li>\n</ul>\n<h3>Q75. What is the correct syntax of creating an instance method?</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def get_next_card():\n  # method body goes here\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">def get_next_card(self):\n  # method body goes here\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def self.get_next_card():\n  # method body goes here\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def self.get_next_card(self):\n  # method body goes here\n</code></pre>\n<h3>Q76. What is the correct way to call a function?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] get<em>max</em>num([57, 99, 31, 18])</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> call.(get<em>max</em>num)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def get<em>max</em>num([57, 99, 31, 18])</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> call.get<em>max</em>num([57, 99, 31, 18])</li>\n</ul>\n<h3>Q77. How is comment created?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>-- This is a comment</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code># This is a comment</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>/_ This is a comment _\\</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>// This is a comment</code></li>\n</ul>\n<h3>Q78. What is the correct syntax for replacing the string apple in the list with the string orange?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> orange = my_list[1]</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] my_list[1] = 'orange'</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> my_list['orange'] = 1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> my_list[1] == orange</li>\n</ul>\n<h3>Q79. What will happen if you use a while loop and forget to include logic that eventually causes the while loop to stop?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Nothing will happen; your computer knows when to stop running the code in the while loop.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You will get a KeyError.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Your code will get stuck in an infinite loop.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> You will get a WhileLoopError.</li>\n</ul>\n<h3>Q80. Describe the functionality of a queue?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A queue adds items to either end and removes items from either end.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A queue adds items to the top and removes items from the top.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A queue adds items to the top, and removes items from anywhere in, a list.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A queue adds items to the top and removes items from anywhere in the queue.</li>\n</ul>\n<h3>Q81. Which choice is the most syntactically correct example of the conditional branching?</h3>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10:\n    print(\"There is a lot of people in the pool.\")\nelif num_people > 4:\n    print(\"There are some people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10:\n    print(\"There is a lot of people in the pool.\")\nif num_people > 4:\n    print(\"There are some people in the pool.\")\nelse:\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">num_people = 5\n\nif num_people > 10;\n    print(\"There is a lot of people in the pool.\")\nelif num_people > 4;\n    print(\"There are some people in the pool.\")\nelse;\n    print(\"There is no one in the pool.\")\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">if num_people > 10;\n    print(\"There is a lot of people in the pool.\")\nif num_people > 4;\n    print(\"There are some people in the pool.\")\nelse;\n    print(\"There is no one in the pool.\")\n</code></pre>\n<p>This question seems to be an updated version of Question 19.</p>\n<h3>Q82. How does <code>defaultdict</code> work?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> will automatically create a dictionary for you that has keys which are the integers 0-10.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> forces a dictionary to only accept keys that are of the types specified when you created the <code>defaultdict</code> (such as strings or integers).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] If you try to read from a <code>defaultdict</code> with a nonexistent key, a new default key-value pair will be created for you instead of throwing a <code>KeyError</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>defaultdict</code> stores a copy of a dictionary in memory that you can default to if the original gets unintentionally modified.</li>\n</ul>\n<p>Updated version of Question 14.</p>\n<h3>Q83. What is the correct syntax for adding a key called <code>variety</code> to the <code>fruit_info</code> dictionary that has a value of <code>Red Delicious</code>?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>fruit_info['variety'] == 'Red Delicious'</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] <code>fruit_info['variety'] = 'Red Delicious'</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>red_delicious = fruit_info['variety']</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>red_delicious == fruit_info['variety']</code></li>\n</ul>\n<h3>Q84. When would you use a <code>while</code> loop?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you want to minimize the use of strings in your code</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you want to run code in one file while code in another file is also running</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] when you want some code to continue running as long as some condition is true</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> when you need to run two or more chunks of code at once within the same file</li>\n</ul>\n<p><strong>Simple Example</strong></p>\n<pre><code class=\"language-python\">i = 1\nwhile i&#x3C;6:\n    print('Countdown:',i)\n    i = i + 1\n</code></pre>\n<h3>Q85. What is the correct syntax for defining an <code>__init__()</code> method that sets instance-specific attributes upon creation of a new class instance?</h3>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__(self, attr1, attr2):\n    attr1 = attr1\n    attr2 = attr2\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__(attr1, attr2):\n    attr1 = attr1\n    attr2 = attr2\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__(self, attr1, attr2):\n    self.attr1 = attr1\n    self.attr2 = attr2\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">def __init__(attr1, attr2):\n    self.attr1 = attr1\n    self.attr2 = attr2\n</code></pre>\n<p><strong>Explanation</strong>: When instantiating a new object from a given class, the <code>__init__()</code> method will take both <code>attr1</code> and <code>attr2</code>, and set its values to their corresponding object attribute, that's why the need of using <code>self.attr1 = attr1</code> instead of <code>attr1 = attr1</code>.</p>\n<h3>Q86. What would this recursive function print if it is called with no parameters?</h3>\n<pre><code class=\"language-python\">def count_recursive(n=1):\n    if n > 3:\n        return\n    print(n)\n\ncount_recursive(n + 1)\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">1\n1\n2\n2\n3\n3\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">3\n2\n1\n</code></pre>\n<ul>\n<li>[ ]</li>\n</ul>\n<pre><code class=\"language-python\">3\n3\n2\n2\n1\n1\n</code></pre>\n<ul>\n<li>[✅]</li>\n</ul>\n<pre><code class=\"language-python\">1\n2\n3\n</code></pre>\n<h3>Q87. In Python, when using sets, you use <strong>_ to calculate the intersection between two sets and _</strong> to calculate the union.</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>Intersect;union</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> |; &#x26;</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] &#x26;; |</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> &#x26;&#x26;; ||</li>\n</ul>\n<h3>Q88. What will this code fragment return?</h3>\n<pre><code class=\"language-python\">import numpy as np\nnp.ones([1,2,3,4,5])\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It returns a 5x5 matric; each row will have the values 1,2,3,4,5.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It returns an array with the values 1,2,3,4,5</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> It returns five different square matrices filled with ones. The first is 1x1, the second 2x2, and so on to 5x5</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] It returns a 5-dimensional array of size 1x2x3x4x5 filled with 1s.</li>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/numpy-ones-python/\">Reference</a></p>\n<h3>Q89. You encounter a FileNotFoundException while using just the filename in the <code>open</code> function. What might be the easiest solution?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Make sure the file is on the system PATH</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Create a symbolic link to allow better access to the file</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Copy the file to the same directory as where the script is running from</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add the path to the file to the PYTHONPATH environment variable</li>\n</ul>\n<h3>Q90. what will this command return?</h3>\n<pre><code class=\"language-python\">{x for x in range(100) if x%3 == 0}\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] a set of all the multiples of 3 less then 100</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a set of all the number from 0 to 100 multiplied by 3</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a list of all the multiples of 3 less then 100</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> a set of all the multiples of 3 less then 100 excluding 0</li>\n</ul>\n<h3>Q91. What does the // operator in Python 3 allow you to do?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] Perform integer division</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Perform operations on exponents</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Find the remainder of a division operation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Perform floating point division</li>\n</ul>\n<h3>Q92. This code provides the _ of the list of numbers</h3>\n<pre><code class=\"language-python\">num_list = [21,13,19,3,11,5,18]\nnum_list.sort()\nnum_list[len(num_list)//2]\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> mean</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> mode</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] median</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> average</li>\n</ul>\n<h3>Q93. Which statement about the class methods is true?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method holds all of the data for a particular class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] A class method can modify the state of the class, but it cannot directly modify the state of an instance that inherits from that class.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method is a regular function that belongs to a class, but it must return None</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> A class method is similar to a regular function, but a class method does not take any arguments.</li>\n</ul>\n<h3>Q94. What file is imported to use dates in python?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] datetime</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> dateday</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> daytime</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> timedate</li>\n</ul>\n<h3>Q95. What is the correct syntax for defining a class called Game?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def Game(): pass</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def Game: pass</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] class Game: pass</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> class Game(): pass</li>\n</ul>\n<p><a href=\"https://docs.python.org/3/tutorial/classes.html\">reference here</a></p>\n<h3>Q96. What does a class's init() method do?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <strong>init</strong> method makes classes aware of each other if more than one class is defined in a single code file.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <strong>init</strong> method is included to preserve backward compatibility from Python 3 to Python 2, but no longer needs to be used in Python 3.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] The <strong>init</strong> method is a constructor method that is called automatically whenever a new object is created from a class. It sets the initial state of a new object.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> The <strong>init</strong> method initializes any imports you may have included at the top of your file.</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/625083/what-init-and-self-do-in-python\">reference here</a></p>\n<h3>Q97. What is the correct syntax for calling an instance method on a class named Game?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> my<em>game = Game(self) self.my</em>game.roll_dice()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] my<em>game = Game() self.my</em>game.roll_dice()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> my<em>game = Game() my</em>game.roll_dice()</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> my<em>game = Game(self) my</em>game.roll_dice(self)</li>\n</ul>\n<h3>Q98. What is the output of this code? (NumPy has been imported as np.)?</h3>\n<pre><code>a = np.array([1,2,3,4])\nprint(a[[False, True, False, False]])\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> {0,2}</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] [2]</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> {2}</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [0,2,0,0]</li>\n</ul>\n<h3>Q99. Suppose you have a string variable defined as y=\"stuff;thing;junk;\". What would be the output from this code?</h3>\n<pre><code>Z = y.split(‘;')\nlen(z)\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 17</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] 4</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 0</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 3</li>\n</ul>\n<p>explanation:</p>\n<pre><code>y=\"stuff;thing;junk\"\n    len(z) ==> 3\n\ny=\"stuff;thing;junk;\"\n    len(z) ==> 4\n</code></pre>\n<h3>Q100. What is the output of this code?</h3>\n<pre><code>num_list = [1,2,3,4,5]\nnum_list.remove(2)\nprint(num_list)\n</code></pre>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [1,2,4,5]</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] [1,3,4,5]</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [3,4,5]</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [1,2,3]</li>\n</ul>\n<p>explanation:</p>\n<pre><code>num_list = [1,2,3,4,5]\n\nnum_list.pop(2)\n    [1,2,4,5]\n\nnum_list.remove(2)\n    [1,3,4,5]\n</code></pre>\n<h3>Q101. What is the correct syntax for creating an instance method?</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def get<em>next</em>card(): # method body goes here</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def self.get<em>next</em>card(): # method body goes here</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [✅] def get<em>next</em>card(self): # method body goes here</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> def self.get<em>next</em>card(self): # method body goes here</li>\n</ul>"}