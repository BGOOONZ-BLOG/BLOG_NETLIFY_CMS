{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-5f6545b6001af689980fa082253e8413--","val":"<h1>Array.prototype.filter()</h1>\n<p>The <code>filter()</code> method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p>\n<h2>Syntax</h2>\n<pre><code>// Arrow function\nfilter((element) => { ... } )\nfilter((element, index) => { ... } )\nfilter((element, index, array) => { ... } )\n\n// Callback function\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n\n// Inline callback function\nfilter(function callbackFn(element) { ... })\nfilter(function callbackFn(element, index) { ... })\nfilter(function callbackFn(element, index, array){ ... })\nfilter(function callbackFn(element, index, array) { ... }, thisArg)\n</code></pre>\n<h3>Parameters</h3>\n<p><code>callbackFn</code>\nFunction is a predicate, to test each element of the array. Return a value that coerces to <code>true</code> to keep the element, or to <code>false</code> otherwise.</p>\n<p>It accepts three arguments:</p>\n<p><code>element</code>\nThe current element being processed in the array.</p>\n<p><code>index</code><span class=\"badge inline optional\">Optional</span>\nThe index of the current element being processed in the array.</p>\n<p><code>array</code><span class=\"badge inline optional\">Optional</span>\nThe array <code>filter</code> was called upon.</p>\n<p><code>thisArg</code><span class=\"badge inline optional\">Optional</span>\nValue to use as <code>this</code> when executing <code>callbackFn</code>.</p>\n<h3>Return value</h3>\n<p>A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned.</p>\n<h2>Description</h2>\n<p><code>filter()</code> calls a provided <code>callbackFn</code> function once for each element in an array, and constructs a new array of all the values for which <code>callbackFn</code> returns <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">a value that coerces to <code>true</code></a>. <code>callbackFn</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the <code>callbackFn</code> test are skipped, and are not included in the new array.</p>\n<p><code>callbackFn</code> is invoked with three arguments:</p>\n<ol>\n<li>the value of the element</li>\n<li>the index of the element</li>\n<li>the Array object being traversed</li>\n</ol>\n<p>If a <code>thisArg</code> parameter is provided to <code>filter</code>, it will be used as the callback's <code>this</code> value. Otherwise, the value <code>undefined</code> will be used as its <code>this</code> value. The <code>this</code> value ultimately observable by <code>callback</code> is determined according to <a href=\"../../operators/this\">the usual rules for determining the <code>this</code> seen by a function</a>.</p>\n<p><code>filter()</code> does not mutate the array on which it is called.</p>\n<p>The range of elements processed by <code>filter()</code> is set before the first invocation of <code>callbackFn</code>. Elements which are appended to the array (from <code>callbackFn</code>) after the call to <code>filter()</code> begins will not be visited by <code>callbackFn</code>. If existing elements of the array are deleted in the same way they will not be visited.</p>\n<h2>Polyfill</h2>\n<p><code>filter()</code> was added to the ECMA-262 standard in the 5th edition. Therefore, it may not be present in all implementations of the standard.</p>\n<p>You can work around this by inserting the following code at the beginning of your scripts, allowing use of <code>filter()</code> in ECMA-262 implementations which do not natively support it. This algorithm is exactly equivalent to the one specified in ECMA-262, 5th edition, assuming that <code>fn.call</code> evaluates to the original value of <a href=\"../function/bind\"><code>Function.prototype.bind()</code></a>, and that <a href=\"push\"><code>Array.prototype.push()</code></a> has its original value.</p>\n<pre><code>if (!Array.prototype.filter){\n  Array.prototype.filter = function(func, thisArg) {\n    'use strict';\n    if ( ! ((typeof func === 'Function' || typeof func === 'function') &#x26;&#x26; this) )\n        throw new TypeError();\n\n    var len = this.length >>> 0,\n        res = new Array(len), // preallocate array\n        t = this, c = 0, i = -1;\n\n    var kValue;\n    if (thisArg === undefined){\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          kValue = t[i]; // in case t is changed in callback\n          if (func(t[i], i, t)){\n            res[c++] = kValue;\n          }\n        }\n      }\n    }\n    else{\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          kValue = t[i];\n          if (func.call(thisArg, t[i], i, t)){\n            res[c++] = kValue;\n          }\n        }\n      }\n    }\n\n    res.length = c; // shrink down array to proper size\n    return res;\n  };\n}\n</code></pre>\n<h2>Examples</h2>\n<h3>Filtering out all small values</h3>\n<p>The following example uses <code>filter()</code> to create a filtered array that has all elements with values less than <code>10</code> removed.</p>\n<pre><code>function isBigEnough(value) {\n  return value >= 10\n}\n\nlet filtered = [12, 5, 8, 130, 44].filter(isBigEnough)\n// filtered is [12, 130, 44]\n</code></pre>\n<h3>Find all prime numbers in an array</h3>\n<p>The following example returns all prime numbers in the array:</p>\n<pre><code>const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n\nfunction isPrime(num) {\n  for (let i = 2; num > i; i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\nconsole.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\n</code></pre>\n<h3>Filtering invalid entries from JSON</h3>\n<p>The following example uses <code>filter()</code> to create a filtered json of all elements with non-zero, numeric <code>id</code>.</p>\n<pre><code>let arr = [\n  { id: 15 },\n  { id: -1 },\n  { id: 0 },\n  { id: 3 },\n  { id: 12.2 },\n  { },\n  { id: null },\n  { id: NaN },\n  { id: 'undefined' }\n]\n\nlet invalidEntries = 0\n\nfunction filterByID(item) {\n  if (Number.isFinite(item.id) &#x26;&#x26; item.id !== 0) {\n    return true\n  }\n  invalidEntries++\n  return false;\n}\n\nlet arrByID = arr.filter(filterByID)\n\nconsole.log('Filtered Array\\n', arrByID)\n// Filtered Array\n// [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n\nconsole.log('Number of Invalid Entries = ', invalidEntries)\n// Number of Invalid Entries = 5\n</code></pre>\n<h3>Searching in array</h3>\n<p>Following example uses <code>filter()</code> to filter array content based on search criteria.</p>\n<pre><code>let fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']\n\n/**\n * Filter array items based on search criteria (query)\n */\nfunction filterItems(arr, query) {\n  return arr.filter(function(el) {\n      return el.toLowerCase().indexOf(query.toLowerCase()) !== -1\n  })\n}\n\nconsole.log(filterItems(fruits, 'ap'))  // ['apple', 'grapes']\nconsole.log(filterItems(fruits, 'an'))  // ['banana', 'mango', 'orange']\n</code></pre>\n<h4>ES2015 Implementation</h4>\n<pre><code>const fruits = ['apple', 'banana', 'grapes', 'mango', 'orange']\n\n/**\n * Filter array items based on search criteria (query)\n */\nconst filterItems = (arr, query) => {\n  return arr.filter(el => el.toLowerCase().indexOf(query.toLowerCase()) !== -1)\n}\n\nconsole.log(filterItems(fruits, 'ap'))  // ['apple', 'grapes']\nconsole.log(filterItems(fruits, 'an'))  // ['banana', 'mango', 'orange']\n</code></pre>\n<h3>Affecting Initial Array (modifying, appending and deleting)</h3>\n<p>The following examples tests the behavior of the <code>filter</code> method when the array is modified.</p>\n<pre><code>// Modifying each words\nlet words = ['spray', 'limit', 'exuberant', 'destruction','elite', 'present']\n\nconst modifiedWords = words.filter( (word, index, arr) => {\n  arr[index+1] +=' extra'\n  return word.length &#x3C; 6\n})\n\nconsole.log(modifiedWords)\n// Notice there are three words below length 6, but since they've been modified one is returned\n// [\"spray\"]\n\n// Appending new words\nwords = ['spray', 'limit', 'exuberant', 'destruction','elite', 'present']\nconst appendedWords = words.filter( (word, index, arr) => {\n  arr.push('new')\n  return word.length &#x3C; 6\n})\n\nconsole.log(appendedWords)\n// Only three fits the condition even though the `words` itself now has a lot more words with character length less than 6\n// [\"spray\" ,\"limit\" ,\"elite\"]\n\n// Deleting words\nwords = ['spray', 'limit', 'exuberant', 'destruction', 'elite', 'present']\nconst deleteWords = words.filter( (word, index, arr) => {\n  arr.pop()\n  return word.length &#x3C; 6\n})\n\nconsole.log(deleteWords)\n// Notice 'elite' is not even obtained as its been popped off `words` before filter can even get there\n// [\"spray\" ,\"limit\"]\n</code></pre>"}