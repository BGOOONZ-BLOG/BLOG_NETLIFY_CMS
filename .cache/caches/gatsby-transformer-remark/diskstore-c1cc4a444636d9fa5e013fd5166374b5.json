{"expireTime":9007200904342770000,"key":"transformer-remark-markdown-html-ast-0f173beb055bb1ec26705ff4459c6cba--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Array.prototype.reduce()","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":27,"offset":27}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":27,"offset":27}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":5,"offset":33}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":4,"column":5,"offset":33},"end":{"line":4,"column":15,"offset":43}}},{"type":"text","value":" method executes a ","position":{"start":{"line":4,"column":15,"offset":43},"end":{"line":4,"column":34,"offset":62}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":4,"column":36,"offset":64},"end":{"line":4,"column":43,"offset":71}}}],"position":{"start":{"line":4,"column":34,"offset":62},"end":{"line":4,"column":45,"offset":73}}},{"type":"text","value":" function (that you provide) on each element of the array, resulting in a single output value.","position":{"start":{"line":4,"column":45,"offset":73},"end":{"line":4,"column":139,"offset":167}}}],"position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":139,"offset":167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":6,"column":1,"offset":169},"end":{"line":6,"column":5,"offset":173}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":6,"column":7,"offset":175},"end":{"line":6,"column":14,"offset":182}}}],"position":{"start":{"line":6,"column":5,"offset":173},"end":{"line":6,"column":16,"offset":184}}},{"type":"text","value":" function takes four arguments:","position":{"start":{"line":6,"column":16,"offset":184},"end":{"line":6,"column":47,"offset":215}}}],"position":{"start":{"line":6,"column":1,"offset":169},"end":{"line":6,"column":47,"offset":215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Accumulator","position":{"start":{"line":8,"column":5,"offset":221},"end":{"line":8,"column":16,"offset":232}}}],"position":{"start":{"line":8,"column":1,"offset":217},"end":{"line":8,"column":16,"offset":232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Current Value","position":{"start":{"line":9,"column":5,"offset":237},"end":{"line":9,"column":18,"offset":250}}}],"position":{"start":{"line":9,"column":1,"offset":233},"end":{"line":9,"column":18,"offset":250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Current Index","position":{"start":{"line":10,"column":5,"offset":255},"end":{"line":10,"column":18,"offset":268}}}],"position":{"start":{"line":10,"column":1,"offset":251},"end":{"line":10,"column":18,"offset":268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Source Array","position":{"start":{"line":11,"column":5,"offset":273},"end":{"line":11,"column":17,"offset":285}}}],"position":{"start":{"line":11,"column":1,"offset":269},"end":{"line":11,"column":17,"offset":285}}},{"type":"text","value":"\n"}],"position":{"start":{"line":8,"column":1,"offset":217},"end":{"line":11,"column":17,"offset":285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your ","position":{"start":{"line":13,"column":1,"offset":287},"end":{"line":13,"column":6,"offset":292}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":13,"column":8,"offset":294},"end":{"line":13,"column":15,"offset":301}}}],"position":{"start":{"line":13,"column":6,"offset":292},"end":{"line":13,"column":17,"offset":303}}},{"type":"text","value":" function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.","position":{"start":{"line":13,"column":17,"offset":303},"end":{"line":13,"column":203,"offset":489}}}],"position":{"start":{"line":13,"column":1,"offset":287},"end":{"line":13,"column":203,"offset":489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":15,"column":4,"offset":494},"end":{"line":15,"column":10,"offset":500}}}],"position":{"start":{"line":15,"column":1,"offset":491},"end":{"line":15,"column":10,"offset":500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Arrow function\nreduce((accumulator, currentValue) => { ... } )\nreduce((accumulator, currentValue, index) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... }, initialValue)\n\n// Reducer function\nreduce(reducerFn)\nreduce(reducerFn, initialValue)\n\n// Inline reducer function\nreduce(function reducerFn(accumulator, currentValue) { ... })\nreduce(function reducerFn(accumulator, currentValue, index) { ... })\nreduce(function reducerFn(accumulator, currentValue, index, array){ ... })\nreduce(function reducerFn(accumulator, currentValue, index, array) { ... }, initialValue)\n"}],"position":{"start":{"line":17,"column":1,"offset":502},"end":{"line":31,"column":94,"offset":1206}}}],"position":{"start":{"line":17,"column":1,"offset":502},"end":{"line":31,"column":94,"offset":1206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Parameters","position":{"start":{"line":33,"column":5,"offset":1212},"end":{"line":33,"column":15,"offset":1222}}}],"position":{"start":{"line":33,"column":1,"offset":1208},"end":{"line":33,"column":15,"offset":1222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":35,"column":1,"offset":1224},"end":{"line":35,"column":11,"offset":1234}}},{"type":"text","value":"\nA function to execute on each element in the array (except for the first, if no ","position":{"start":{"line":35,"column":11,"offset":1234},"end":{"line":36,"column":81,"offset":1315}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":36,"column":81,"offset":1315},"end":{"line":36,"column":95,"offset":1329}}},{"type":"text","value":" is supplied).","position":{"start":{"line":36,"column":95,"offset":1329},"end":{"line":36,"column":109,"offset":1343}}}],"position":{"start":{"line":35,"column":1,"offset":1224},"end":{"line":36,"column":109,"offset":1343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It takes four arguments:","position":{"start":{"line":38,"column":1,"offset":1345},"end":{"line":38,"column":25,"offset":1369}}}],"position":{"start":{"line":38,"column":1,"offset":1345},"end":{"line":38,"column":25,"offset":1369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":40,"column":1,"offset":1371},"end":{"line":40,"column":14,"offset":1384}}},{"type":"text","value":"\nThe accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation of the callbackâ€”or ","position":{"start":{"line":40,"column":14,"offset":1384},"end":{"line":41,"column":145,"offset":1529}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":41,"column":145,"offset":1529},"end":{"line":41,"column":159,"offset":1543}}},{"type":"text","value":", if it was supplied (see below).","position":{"start":{"line":41,"column":159,"offset":1543},"end":{"line":41,"column":192,"offset":1576}}}],"position":{"start":{"line":40,"column":1,"offset":1371},"end":{"line":41,"column":192,"offset":1576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":43,"column":1,"offset":1578},"end":{"line":43,"column":15,"offset":1592}}},{"type":"text","value":"\nThe current element being processed in the array.","position":{"start":{"line":43,"column":15,"offset":1592},"end":{"line":44,"column":50,"offset":1642}}}],"position":{"start":{"line":43,"column":1,"offset":1578},"end":{"line":44,"column":50,"offset":1642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index"}],"position":{"start":{"line":46,"column":1,"offset":1644},"end":{"line":46,"column":8,"offset":1651}}},{"type":"text","value":" ","position":{"start":{"line":46,"column":8,"offset":1651},"end":{"line":46,"column":9,"offset":1652}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":46,"column":9,"offset":1652},"end":{"line":46,"column":45,"offset":1688}}},{"type":"text","value":"Optional","position":{"start":{"line":46,"column":45,"offset":1688},"end":{"line":46,"column":53,"offset":1696}}},{"type":"raw","value":"</span>","position":{"start":{"line":46,"column":53,"offset":1696},"end":{"line":46,"column":60,"offset":1703}}},{"type":"text","value":"\nThe index of the current element being processed in the array. Starts from index ","position":{"start":{"line":46,"column":60,"offset":1703},"end":{"line":47,"column":82,"offset":1785}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":47,"column":82,"offset":1785},"end":{"line":47,"column":85,"offset":1788}}},{"type":"text","value":" if an ","position":{"start":{"line":47,"column":85,"offset":1788},"end":{"line":47,"column":92,"offset":1795}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":47,"column":92,"offset":1795},"end":{"line":47,"column":106,"offset":1809}}},{"type":"text","value":" is provided. Otherwise, it starts from index ","position":{"start":{"line":47,"column":106,"offset":1809},"end":{"line":47,"column":152,"offset":1855}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":47,"column":152,"offset":1855},"end":{"line":47,"column":155,"offset":1858}}},{"type":"text","value":".","position":{"start":{"line":47,"column":155,"offset":1858},"end":{"line":47,"column":156,"offset":1859}}}],"position":{"start":{"line":46,"column":1,"offset":1644},"end":{"line":47,"column":156,"offset":1859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}],"position":{"start":{"line":49,"column":1,"offset":1861},"end":{"line":49,"column":8,"offset":1868}}},{"type":"text","value":" ","position":{"start":{"line":49,"column":8,"offset":1868},"end":{"line":49,"column":9,"offset":1869}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":49,"column":9,"offset":1869},"end":{"line":49,"column":45,"offset":1905}}},{"type":"text","value":"Optional","position":{"start":{"line":49,"column":45,"offset":1905},"end":{"line":49,"column":53,"offset":1913}}},{"type":"raw","value":"</span>","position":{"start":{"line":49,"column":53,"offset":1913},"end":{"line":49,"column":60,"offset":1920}}},{"type":"text","value":"\nThe array ","position":{"start":{"line":49,"column":60,"offset":1920},"end":{"line":50,"column":11,"offset":1931}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":50,"column":11,"offset":1931},"end":{"line":50,"column":21,"offset":1941}}},{"type":"text","value":" was called upon.","position":{"start":{"line":50,"column":21,"offset":1941},"end":{"line":50,"column":38,"offset":1958}}}],"position":{"start":{"line":49,"column":1,"offset":1861},"end":{"line":50,"column":38,"offset":1958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":52,"column":1,"offset":1960},"end":{"line":52,"column":15,"offset":1974}}},{"type":"text","value":" ","position":{"start":{"line":52,"column":15,"offset":1974},"end":{"line":52,"column":16,"offset":1975}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":52,"column":16,"offset":1975},"end":{"line":52,"column":52,"offset":2011}}},{"type":"text","value":"Optional","position":{"start":{"line":52,"column":52,"offset":2011},"end":{"line":52,"column":60,"offset":2019}}},{"type":"raw","value":"</span>","position":{"start":{"line":52,"column":60,"offset":2019},"end":{"line":52,"column":67,"offset":2026}}},{"type":"text","value":"\nA value to use as the first argument to the first call of the ","position":{"start":{"line":52,"column":67,"offset":2026},"end":{"line":53,"column":63,"offset":2089}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":53,"column":63,"offset":2089},"end":{"line":53,"column":73,"offset":2099}}},{"type":"text","value":". If no ","position":{"start":{"line":53,"column":73,"offset":2099},"end":{"line":53,"column":81,"offset":2107}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":53,"column":81,"offset":2107},"end":{"line":53,"column":95,"offset":2121}}},{"type":"text","value":" is supplied, the first element in the array will be used as the initial ","position":{"start":{"line":53,"column":95,"offset":2121},"end":{"line":53,"column":168,"offset":2194}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":53,"column":168,"offset":2194},"end":{"line":53,"column":181,"offset":2207}}},{"type":"text","value":" value and skipped as ","position":{"start":{"line":53,"column":181,"offset":2207},"end":{"line":53,"column":203,"offset":2229}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":53,"column":203,"offset":2229},"end":{"line":53,"column":217,"offset":2243}}},{"type":"text","value":". Calling ","position":{"start":{"line":53,"column":217,"offset":2243},"end":{"line":53,"column":227,"offset":2253}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":53,"column":227,"offset":2253},"end":{"line":53,"column":237,"offset":2263}}},{"type":"text","value":" on an empty array without an ","position":{"start":{"line":53,"column":237,"offset":2263},"end":{"line":53,"column":267,"offset":2293}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":53,"column":267,"offset":2293},"end":{"line":53,"column":281,"offset":2307}}},{"type":"text","value":" will throw a ","position":{"start":{"line":53,"column":281,"offset":2307},"end":{"line":53,"column":295,"offset":2321}}},{"type":"element","tagName":"a","properties":{"href":"../typeerror"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TypeError"}],"position":{"start":{"line":53,"column":296,"offset":2322},"end":{"line":53,"column":307,"offset":2333}}}],"position":{"start":{"line":53,"column":295,"offset":2321},"end":{"line":53,"column":322,"offset":2348}}},{"type":"text","value":".","position":{"start":{"line":53,"column":322,"offset":2348},"end":{"line":53,"column":323,"offset":2349}}}],"position":{"start":{"line":52,"column":1,"offset":1960},"end":{"line":53,"column":323,"offset":2349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Return value","position":{"start":{"line":55,"column":5,"offset":2355},"end":{"line":55,"column":17,"offset":2367}}}],"position":{"start":{"line":55,"column":1,"offset":2351},"end":{"line":55,"column":17,"offset":2367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The single value that results from the reduction.","position":{"start":{"line":57,"column":1,"offset":2369},"end":{"line":57,"column":50,"offset":2418}}}],"position":{"start":{"line":57,"column":1,"offset":2369},"end":{"line":57,"column":50,"offset":2418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":59,"column":4,"offset":2423},"end":{"line":59,"column":15,"offset":2434}}}],"position":{"start":{"line":59,"column":1,"offset":2420},"end":{"line":59,"column":15,"offset":2434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":61,"column":1,"offset":2436},"end":{"line":61,"column":5,"offset":2440}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":61,"column":5,"offset":2440},"end":{"line":61,"column":15,"offset":2450}}},{"type":"text","value":" method executes the ","position":{"start":{"line":61,"column":15,"offset":2450},"end":{"line":61,"column":36,"offset":2471}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":61,"column":36,"offset":2471},"end":{"line":61,"column":46,"offset":2481}}},{"type":"text","value":" once for each assigned value present in the array, taking four arguments:","position":{"start":{"line":61,"column":46,"offset":2481},"end":{"line":61,"column":120,"offset":2555}}}],"position":{"start":{"line":61,"column":1,"offset":2436},"end":{"line":61,"column":120,"offset":2555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":63,"column":5,"offset":2561},"end":{"line":63,"column":18,"offset":2574}}}],"position":{"start":{"line":63,"column":1,"offset":2557},"end":{"line":63,"column":18,"offset":2574}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":64,"column":5,"offset":2579},"end":{"line":64,"column":19,"offset":2593}}}],"position":{"start":{"line":64,"column":1,"offset":2575},"end":{"line":64,"column":19,"offset":2593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentIndex"}],"position":{"start":{"line":65,"column":5,"offset":2598},"end":{"line":65,"column":19,"offset":2612}}}],"position":{"start":{"line":65,"column":1,"offset":2594},"end":{"line":65,"column":19,"offset":2612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}],"position":{"start":{"line":66,"column":5,"offset":2617},"end":{"line":66,"column":12,"offset":2624}}}],"position":{"start":{"line":66,"column":1,"offset":2613},"end":{"line":66,"column":12,"offset":2624}}},{"type":"text","value":"\n"}],"position":{"start":{"line":63,"column":1,"offset":2557},"end":{"line":66,"column":12,"offset":2624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first time the callback is called, ","position":{"start":{"line":68,"column":1,"offset":2626},"end":{"line":68,"column":40,"offset":2665}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":68,"column":40,"offset":2665},"end":{"line":68,"column":53,"offset":2678}}},{"type":"text","value":" and ","position":{"start":{"line":68,"column":53,"offset":2678},"end":{"line":68,"column":58,"offset":2683}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":68,"column":58,"offset":2683},"end":{"line":68,"column":72,"offset":2697}}},{"type":"text","value":" can be one of two values. If ","position":{"start":{"line":68,"column":72,"offset":2697},"end":{"line":68,"column":102,"offset":2727}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":68,"column":102,"offset":2727},"end":{"line":68,"column":116,"offset":2741}}},{"type":"text","value":" is provided in the call to ","position":{"start":{"line":68,"column":116,"offset":2741},"end":{"line":68,"column":144,"offset":2769}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":68,"column":144,"offset":2769},"end":{"line":68,"column":154,"offset":2779}}},{"type":"text","value":", then ","position":{"start":{"line":68,"column":154,"offset":2779},"end":{"line":68,"column":161,"offset":2786}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":68,"column":161,"offset":2786},"end":{"line":68,"column":174,"offset":2799}}},{"type":"text","value":" will be equal to ","position":{"start":{"line":68,"column":174,"offset":2799},"end":{"line":68,"column":192,"offset":2817}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":68,"column":192,"offset":2817},"end":{"line":68,"column":206,"offset":2831}}},{"type":"text","value":", and ","position":{"start":{"line":68,"column":206,"offset":2831},"end":{"line":68,"column":212,"offset":2837}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":68,"column":212,"offset":2837},"end":{"line":68,"column":226,"offset":2851}}},{"type":"text","value":" will be equal to the first value in the array. If no ","position":{"start":{"line":68,"column":226,"offset":2851},"end":{"line":68,"column":280,"offset":2905}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":68,"column":280,"offset":2905},"end":{"line":68,"column":294,"offset":2919}}},{"type":"text","value":" is provided, then ","position":{"start":{"line":68,"column":294,"offset":2919},"end":{"line":68,"column":313,"offset":2938}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":68,"column":313,"offset":2938},"end":{"line":68,"column":326,"offset":2951}}},{"type":"text","value":" will be equal to the first value in the array, and ","position":{"start":{"line":68,"column":326,"offset":2951},"end":{"line":68,"column":378,"offset":3003}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":68,"column":378,"offset":3003},"end":{"line":68,"column":392,"offset":3017}}},{"type":"text","value":" will be equal to the second.","position":{"start":{"line":68,"column":392,"offset":3017},"end":{"line":68,"column":421,"offset":3046}}}],"position":{"start":{"line":68,"column":1,"offset":2626},"end":{"line":68,"column":421,"offset":3046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":70,"column":3,"offset":3050},"end":{"line":70,"column":8,"offset":3055}}}],"position":{"start":{"line":70,"column":1,"offset":3048},"end":{"line":70,"column":10,"offset":3057}}},{"type":"text","value":" If ","position":{"start":{"line":70,"column":10,"offset":3057},"end":{"line":70,"column":14,"offset":3061}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":70,"column":14,"offset":3061},"end":{"line":70,"column":28,"offset":3075}}},{"type":"text","value":" is not provided, ","position":{"start":{"line":70,"column":28,"offset":3075},"end":{"line":70,"column":46,"offset":3093}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":70,"column":46,"offset":3093},"end":{"line":70,"column":56,"offset":3103}}},{"type":"text","value":" will execute the callback function starting at index ","position":{"start":{"line":70,"column":56,"offset":3103},"end":{"line":70,"column":110,"offset":3157}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":70,"column":110,"offset":3157},"end":{"line":70,"column":113,"offset":3160}}},{"type":"text","value":", skipping the first index. If ","position":{"start":{"line":70,"column":113,"offset":3160},"end":{"line":70,"column":144,"offset":3191}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":70,"column":144,"offset":3191},"end":{"line":70,"column":158,"offset":3205}}},{"type":"text","value":" is provided, it will start at index ","position":{"start":{"line":70,"column":158,"offset":3205},"end":{"line":70,"column":195,"offset":3242}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":70,"column":195,"offset":3242},"end":{"line":70,"column":198,"offset":3245}}},{"type":"text","value":".","position":{"start":{"line":70,"column":198,"offset":3245},"end":{"line":70,"column":199,"offset":3246}}}],"position":{"start":{"line":70,"column":1,"offset":3048},"end":{"line":70,"column":199,"offset":3246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the array is empty and no ","position":{"start":{"line":72,"column":1,"offset":3248},"end":{"line":72,"column":30,"offset":3277}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":72,"column":30,"offset":3277},"end":{"line":72,"column":44,"offset":3291}}},{"type":"text","value":" is provided, ","position":{"start":{"line":72,"column":44,"offset":3291},"end":{"line":72,"column":58,"offset":3305}}},{"type":"element","tagName":"a","properties":{"href":"../typeerror"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TypeError"}],"position":{"start":{"line":72,"column":59,"offset":3306},"end":{"line":72,"column":70,"offset":3317}}}],"position":{"start":{"line":72,"column":58,"offset":3305},"end":{"line":72,"column":85,"offset":3332}}},{"type":"text","value":" will be thrown.","position":{"start":{"line":72,"column":85,"offset":3332},"end":{"line":72,"column":101,"offset":3348}}}],"position":{"start":{"line":72,"column":1,"offset":3248},"end":{"line":72,"column":101,"offset":3348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the array only has one element (regardless of position) and no ","position":{"start":{"line":74,"column":1,"offset":3350},"end":{"line":74,"column":67,"offset":3416}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":74,"column":67,"offset":3416},"end":{"line":74,"column":81,"offset":3430}}},{"type":"text","value":" is provided, or if ","position":{"start":{"line":74,"column":81,"offset":3430},"end":{"line":74,"column":101,"offset":3450}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":74,"column":101,"offset":3450},"end":{"line":74,"column":115,"offset":3464}}},{"type":"text","value":" is provided but the array is empty, the solo value will be returned ","position":{"start":{"line":74,"column":115,"offset":3464},"end":{"line":74,"column":184,"offset":3533}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"without","position":{"start":{"line":74,"column":185,"offset":3534},"end":{"line":74,"column":192,"offset":3541}}}],"position":{"start":{"line":74,"column":184,"offset":3533},"end":{"line":74,"column":193,"offset":3542}}},{"type":"text","value":" calling ","position":{"start":{"line":74,"column":193,"offset":3542},"end":{"line":74,"column":202,"offset":3551}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":74,"column":203,"offset":3552},"end":{"line":74,"column":213,"offset":3562}}},{"type":"text","value":".","position":{"start":{"line":74,"column":213,"offset":3562},"end":{"line":74,"column":214,"offset":3563}}}],"position":{"start":{"line":74,"column":202,"offset":3551},"end":{"line":74,"column":215,"offset":3564}}}],"position":{"start":{"line":74,"column":1,"offset":3350},"end":{"line":74,"column":215,"offset":3564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is almost always safer to provide an ","position":{"start":{"line":76,"column":1,"offset":3566},"end":{"line":76,"column":41,"offset":3606}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":76,"column":41,"offset":3606},"end":{"line":76,"column":55,"offset":3620}}},{"type":"text","value":", because there can be up to ","position":{"start":{"line":76,"column":55,"offset":3620},"end":{"line":76,"column":84,"offset":3649}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"four","position":{"start":{"line":76,"column":85,"offset":3650},"end":{"line":76,"column":89,"offset":3654}}}],"position":{"start":{"line":76,"column":84,"offset":3649},"end":{"line":76,"column":90,"offset":3655}}},{"type":"text","value":" possible output types without ","position":{"start":{"line":76,"column":90,"offset":3655},"end":{"line":76,"column":121,"offset":3686}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":76,"column":121,"offset":3686},"end":{"line":76,"column":135,"offset":3700}}},{"type":"text","value":", as shown in the following example:","position":{"start":{"line":76,"column":135,"offset":3700},"end":{"line":76,"column":171,"offset":3736}}}],"position":{"start":{"line":76,"column":1,"offset":3566},"end":{"line":76,"column":171,"offset":3736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let maxCallback = ( acc, cur ) => Math.max( acc.x, cur.x );\nlet maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce without initialValue\n[ { x: 2 }, { x: 22 }, { x: 42 } ].reduce( maxCallback ); // NaN\n[ { x: 2 }, { x: 22 }            ].reduce( maxCallback ); // 22\n[ { x: 2 }                       ].reduce( maxCallback ); // { x: 2 }\n[                                ].reduce( maxCallback ); // TypeError\n\n// map & reduce with initialValue; better solution, also works for empty or larger arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n"}],"position":{"start":{"line":78,"column":1,"offset":3738},"end":{"line":89,"column":64,"offset":4390}}}],"position":{"start":{"line":78,"column":1,"offset":3738},"end":{"line":89,"column":64,"offset":4390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"How reduce() works","position":{"start":{"line":91,"column":5,"offset":4396},"end":{"line":91,"column":23,"offset":4414}}}],"position":{"start":{"line":91,"column":1,"offset":4392},"end":{"line":91,"column":23,"offset":4414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose the following use of ","position":{"start":{"line":93,"column":1,"offset":4416},"end":{"line":93,"column":30,"offset":4445}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":93,"column":30,"offset":4445},"end":{"line":93,"column":40,"offset":4455}}},{"type":"text","value":" occurred:","position":{"start":{"line":93,"column":40,"offset":4455},"end":{"line":93,"column":50,"offset":4465}}}],"position":{"start":{"line":93,"column":1,"offset":4416},"end":{"line":93,"column":50,"offset":4465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue\n})\n"}],"position":{"start":{"line":95,"column":1,"offset":4467},"end":{"line":97,"column":7,"offset":4599}}}],"position":{"start":{"line":95,"column":1,"offset":4467},"end":{"line":97,"column":7,"offset":4599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The callback would be invoked four times, with the arguments and return values in each call being as follows:","position":{"start":{"line":99,"column":1,"offset":4601},"end":{"line":99,"column":110,"offset":4710}}}],"position":{"start":{"line":99,"column":1,"offset":4601},"end":{"line":99,"column":110,"offset":4710}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>0</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>1</code></td></tr><tr class=\"even\"><td>second call</td><td><code>1</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>3</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>3</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>6</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>6</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr></tbody></table>","position":{"start":{"line":101,"column":1,"offset":4712},"end":{"line":101,"column":940,"offset":5651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":103,"column":1,"offset":5653},"end":{"line":103,"column":23,"offset":5675}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":103,"column":23,"offset":5675},"end":{"line":103,"column":33,"offset":5685}}},{"type":"text","value":" would be that of the last callback invocation (","position":{"start":{"line":103,"column":33,"offset":5685},"end":{"line":103,"column":81,"offset":5733}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"10"}],"position":{"start":{"line":103,"column":81,"offset":5733},"end":{"line":103,"column":85,"offset":5737}}},{"type":"text","value":").","position":{"start":{"line":103,"column":85,"offset":5737},"end":{"line":103,"column":87,"offset":5739}}}],"position":{"start":{"line":103,"column":1,"offset":5653},"end":{"line":103,"column":87,"offset":5739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also provide an ","position":{"start":{"line":105,"column":1,"offset":5741},"end":{"line":105,"column":25,"offset":5765}}},{"type":"element","tagName":"a","properties":{"href":"../../functions/arrow_functions"},"children":[{"type":"text","value":"Arrow Function","position":{"start":{"line":105,"column":26,"offset":5766},"end":{"line":105,"column":40,"offset":5780}}}],"position":{"start":{"line":105,"column":25,"offset":5765},"end":{"line":105,"column":74,"offset":5814}}},{"type":"text","value":" instead of a full function. The code below will produce the same output as the code in the block above:","position":{"start":{"line":105,"column":74,"offset":5814},"end":{"line":105,"column":178,"offset":5918}}}],"position":{"start":{"line":105,"column":1,"offset":5741},"end":{"line":105,"column":178,"offset":5918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce( (accumulator, currentValue, currentIndex, array) => accumulator + currentValue )\n"}],"position":{"start":{"line":107,"column":1,"offset":5920},"end":{"line":107,"column":109,"offset":6028}}}],"position":{"start":{"line":107,"column":1,"offset":5920},"end":{"line":107,"column":109,"offset":6028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were to provide an ","position":{"start":{"line":109,"column":1,"offset":6030},"end":{"line":109,"column":27,"offset":6056}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":109,"column":27,"offset":6056},"end":{"line":109,"column":41,"offset":6070}}},{"type":"text","value":" as the second argument to ","position":{"start":{"line":109,"column":41,"offset":6070},"end":{"line":109,"column":68,"offset":6097}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":109,"column":68,"offset":6097},"end":{"line":109,"column":78,"offset":6107}}},{"type":"text","value":", the result would look like this:","position":{"start":{"line":109,"column":78,"offset":6107},"end":{"line":109,"column":112,"offset":6141}}}],"position":{"start":{"line":109,"column":1,"offset":6030},"end":{"line":109,"column":112,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n}, 10)\n"}],"position":{"start":{"line":111,"column":1,"offset":6143},"end":{"line":113,"column":11,"offset":6276}}}],"position":{"start":{"line":111,"column":1,"offset":6143},"end":{"line":113,"column":11,"offset":6276}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>10</code></td><td><code>0</code></td><td><code>0</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr><tr class=\"even\"><td>second call</td><td><code>10</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>11</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>11</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>13</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>13</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>16</code></td></tr><tr class=\"odd\"><td>fifth call</td><td><code>16</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>20</code></td></tr></tbody></table>","position":{"start":{"line":115,"column":1,"offset":6278},"end":{"line":115,"column":1118,"offset":7395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":117,"column":1,"offset":7397},"end":{"line":117,"column":23,"offset":7419}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":117,"column":23,"offset":7419},"end":{"line":117,"column":33,"offset":7429}}},{"type":"text","value":" in this case would be ","position":{"start":{"line":117,"column":33,"offset":7429},"end":{"line":117,"column":56,"offset":7452}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"20"}],"position":{"start":{"line":117,"column":56,"offset":7452},"end":{"line":117,"column":60,"offset":7456}}},{"type":"text","value":".","position":{"start":{"line":117,"column":60,"offset":7456},"end":{"line":117,"column":61,"offset":7457}}}],"position":{"start":{"line":117,"column":1,"offset":7397},"end":{"line":117,"column":61,"offset":7457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polyfill","position":{"start":{"line":119,"column":4,"offset":7462},"end":{"line":119,"column":12,"offset":7470}}}],"position":{"start":{"line":119,"column":1,"offset":7459},"end":{"line":119,"column":12,"offset":7470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: https://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' +\n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      var k = 0;\n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          Â« accumulator, kValue, k, O Â»).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n"}],"position":{"start":{"line":121,"column":1,"offset":7472},"end":{"line":183,"column":6,"offset":9462}}}],"position":{"start":{"line":121,"column":1,"offset":7472},"end":{"line":183,"column":6,"offset":9462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":185,"column":3,"offset":9466},"end":{"line":185,"column":8,"offset":9471}}}],"position":{"start":{"line":185,"column":1,"offset":9464},"end":{"line":185,"column":10,"offset":9473}}},{"type":"text","value":" If you need to support truly obsolete JavaScript engines that do not support ","position":{"start":{"line":185,"column":10,"offset":9473},"end":{"line":185,"column":88,"offset":9551}}},{"type":"element","tagName":"a","properties":{"href":"../object/defineproperty"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.defineProperty()"}],"position":{"start":{"line":185,"column":89,"offset":9552},"end":{"line":185,"column":114,"offset":9577}}}],"position":{"start":{"line":185,"column":88,"offset":9551},"end":{"line":185,"column":141,"offset":9604}}},{"type":"text","value":", it is best not to polyfill ","position":{"start":{"line":185,"column":141,"offset":9604},"end":{"line":185,"column":170,"offset":9633}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.prototype"}],"position":{"start":{"line":185,"column":170,"offset":9633},"end":{"line":185,"column":187,"offset":9650}}},{"type":"text","value":" methods at all, as you cannot make them ","position":{"start":{"line":185,"column":187,"offset":9650},"end":{"line":185,"column":228,"offset":9691}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"non-enumerable","position":{"start":{"line":185,"column":230,"offset":9693},"end":{"line":185,"column":244,"offset":9707}}}],"position":{"start":{"line":185,"column":228,"offset":9691},"end":{"line":185,"column":246,"offset":9709}}},{"type":"text","value":".","position":{"start":{"line":185,"column":246,"offset":9709},"end":{"line":185,"column":247,"offset":9710}}}],"position":{"start":{"line":185,"column":1,"offset":9464},"end":{"line":185,"column":247,"offset":9710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":187,"column":4,"offset":9715},"end":{"line":187,"column":12,"offset":9723}}}],"position":{"start":{"line":187,"column":1,"offset":9712},"end":{"line":187,"column":12,"offset":9723}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sum all the values of an array","position":{"start":{"line":189,"column":5,"offset":9729},"end":{"line":189,"column":35,"offset":9759}}}],"position":{"start":{"line":189,"column":1,"offset":9725},"end":{"line":189,"column":35,"offset":9759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {\n  return accumulator + currentValue\n}, 0)\n// sum is 6\n"}],"position":{"start":{"line":191,"column":1,"offset":9761},"end":{"line":194,"column":16,"offset":9899}}}],"position":{"start":{"line":191,"column":1,"offset":9761},"end":{"line":194,"column":16,"offset":9899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":196,"column":1,"offset":9901},"end":{"line":196,"column":46,"offset":9946}}}],"position":{"start":{"line":196,"column":1,"offset":9901},"end":{"line":196,"column":46,"offset":9946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let total = [ 0, 1, 2, 3 ].reduce(\n  ( accumulator, currentValue ) => accumulator + currentValue,\n  0\n)\n"}],"position":{"start":{"line":198,"column":1,"offset":9948},"end":{"line":201,"column":6,"offset":10067}}}],"position":{"start":{"line":198,"column":1,"offset":9948},"end":{"line":201,"column":6,"offset":10067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sum of values in an object array","position":{"start":{"line":203,"column":5,"offset":10073},"end":{"line":203,"column":37,"offset":10105}}}],"position":{"start":{"line":203,"column":1,"offset":10069},"end":{"line":203,"column":37,"offset":10105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To sum up the values contained in an array of objects, you ","position":{"start":{"line":205,"column":1,"offset":10107},"end":{"line":205,"column":60,"offset":10166}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"must","position":{"start":{"line":205,"column":62,"offset":10168},"end":{"line":205,"column":66,"offset":10172}}}],"position":{"start":{"line":205,"column":60,"offset":10166},"end":{"line":205,"column":68,"offset":10174}}},{"type":"text","value":" supply an ","position":{"start":{"line":205,"column":68,"offset":10174},"end":{"line":205,"column":79,"offset":10185}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":205,"column":79,"offset":10185},"end":{"line":205,"column":93,"offset":10199}}},{"type":"text","value":", so that each item passes through your function.","position":{"start":{"line":205,"column":93,"offset":10199},"end":{"line":205,"column":142,"offset":10248}}}],"position":{"start":{"line":205,"column":1,"offset":10107},"end":{"line":205,"column":142,"offset":10248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue.x\n}, initialValue)\n\nconsole.log(sum) // logs 6\n"}],"position":{"start":{"line":207,"column":1,"offset":10250},"end":{"line":212,"column":31,"offset":10456}}}],"position":{"start":{"line":207,"column":1,"offset":10250},"end":{"line":212,"column":31,"offset":10456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":214,"column":1,"offset":10458},"end":{"line":214,"column":46,"offset":10503}}}],"position":{"start":{"line":214,"column":1,"offset":10458},"end":{"line":214,"column":46,"offset":10503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(\n    (accumulator, currentValue) => accumulator + currentValue.x\n    , initialValue\n)\n\nconsole.log(sum) // logs 6\n"}],"position":{"start":{"line":216,"column":1,"offset":10505},"end":{"line":222,"column":31,"offset":10705}}}],"position":{"start":{"line":216,"column":1,"offset":10505},"end":{"line":222,"column":31,"offset":10705}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Flatten an array of arrays","position":{"start":{"line":224,"column":5,"offset":10711},"end":{"line":224,"column":31,"offset":10737}}}],"position":{"start":{"line":224,"column":1,"offset":10707},"end":{"line":224,"column":31,"offset":10737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(accumulator, currentValue) {\n    return accumulator.concat(currentValue)\n  },\n  []\n)\n// flattened is [0, 1, 2, 3, 4, 5]\n"}],"position":{"start":{"line":226,"column":1,"offset":10739},"end":{"line":232,"column":39,"offset":10946}}}],"position":{"start":{"line":226,"column":1,"offset":10739},"end":{"line":232,"column":39,"offset":10946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":234,"column":1,"offset":10948},"end":{"line":234,"column":46,"offset":10993}}}],"position":{"start":{"line":234,"column":1,"offset":10948},"end":{"line":234,"column":46,"offset":10993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  ( accumulator, currentValue ) => accumulator.concat(currentValue),\n  []\n)\n"}],"position":{"start":{"line":236,"column":1,"offset":10995},"end":{"line":239,"column":6,"offset":11135}}}],"position":{"start":{"line":236,"column":1,"offset":10995},"end":{"line":239,"column":6,"offset":11135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Counting instances of values in an object","position":{"start":{"line":241,"column":5,"offset":11141},"end":{"line":241,"column":46,"offset":11182}}}],"position":{"start":{"line":241,"column":1,"offset":11137},"end":{"line":241,"column":46,"offset":11182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n"}],"position":{"start":{"line":243,"column":1,"offset":11184},"end":{"line":255,"column":55,"offset":11530}}}],"position":{"start":{"line":243,"column":1,"offset":11184},"end":{"line":255,"column":55,"offset":11530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Grouping objects by a property","position":{"start":{"line":257,"column":5,"offset":11536},"end":{"line":257,"column":35,"offset":11566}}}],"position":{"start":{"line":257,"column":1,"offset":11532},"end":{"line":257,"column":35,"offset":11566}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    let key = obj[property]\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n  }, {})\n}\n\nlet groupedPeople = groupBy(people, 'age')\n// groupedPeople is:\n// {\n//   20: [\n//     { name: 'Max', age: 20 },\n//     { name: 'Jane', age: 20 }\n//   ],\n//   21: [{ name: 'Alice', age: 21 }]\n// }\n"}],"position":{"start":{"line":259,"column":1,"offset":11568},"end":{"line":284,"column":9,"offset":12182}}}],"position":{"start":{"line":259,"column":1,"offset":11568},"end":{"line":284,"column":9,"offset":12182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Bonding arrays contained in an array of objects using the spread operator and initialValue","position":{"start":{"line":286,"column":5,"offset":12188},"end":{"line":286,"column":95,"offset":12278}}}],"position":{"start":{"line":286,"column":1,"offset":12184},"end":{"line":286,"column":95,"offset":12278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// friends - an array of objects\n// where object field \"books\" is a list of favorite books\nlet friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}]\n\n// allbooks - list which will contain all friends' books +\n// additional list contained in initialValue\nlet allbooks = friends.reduce(function(accumulator, currentValue) {\n  return [...accumulator, ...currentValue.books]\n}, ['Alphabet'])\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace',\n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n"}],"position":{"start":{"line":288,"column":1,"offset":12280},"end":{"line":314,"column":9,"offset":13102}}}],"position":{"start":{"line":288,"column":1,"offset":12280},"end":{"line":314,"column":9,"offset":13102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Remove duplicate items in an array","position":{"start":{"line":316,"column":5,"offset":13108},"end":{"line":316,"column":39,"offset":13142}}}],"position":{"start":{"line":316,"column":1,"offset":13104},"end":{"line":316,"column":39,"offset":13142}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":318,"column":3,"offset":13146},"end":{"line":318,"column":8,"offset":13151}}}],"position":{"start":{"line":318,"column":1,"offset":13144},"end":{"line":318,"column":10,"offset":13153}}},{"type":"text","value":" If you are using an environment compatible with ","position":{"start":{"line":318,"column":10,"offset":13153},"end":{"line":318,"column":59,"offset":13202}}},{"type":"element","tagName":"a","properties":{"href":"../set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set"}],"position":{"start":{"line":318,"column":60,"offset":13203},"end":{"line":318,"column":65,"offset":13208}}}],"position":{"start":{"line":318,"column":59,"offset":13202},"end":{"line":318,"column":74,"offset":13217}}},{"type":"text","value":" and ","position":{"start":{"line":318,"column":74,"offset":13217},"end":{"line":318,"column":79,"offset":13222}}},{"type":"element","tagName":"a","properties":{"href":"from"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.from()"}],"position":{"start":{"line":318,"column":80,"offset":13223},"end":{"line":318,"column":94,"offset":13237}}}],"position":{"start":{"line":318,"column":79,"offset":13222},"end":{"line":318,"column":101,"offset":13244}}},{"type":"text","value":", you could use ","position":{"start":{"line":318,"column":101,"offset":13244},"end":{"line":318,"column":117,"offset":13260}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let orderedArray = Array.from(new Set(myArray))"}],"position":{"start":{"line":318,"column":117,"offset":13260},"end":{"line":318,"column":166,"offset":13309}}},{"type":"text","value":" to get an array where duplicate items have been removed.","position":{"start":{"line":318,"column":166,"offset":13309},"end":{"line":318,"column":223,"offset":13366}}}],"position":{"start":{"line":318,"column":1,"offset":13144},"end":{"line":318,"column":223,"offset":13366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue)\n  }\n  return accumulator\n}, [])\n\nconsole.log(myOrderedArray)\n"}],"position":{"start":{"line":320,"column":1,"offset":13368},"end":{"line":328,"column":32,"offset":13695}}}],"position":{"start":{"line":320,"column":1,"offset":13368},"end":{"line":328,"column":32,"offset":13695}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Replace .filter().map() with .reduce()","position":{"start":{"line":330,"column":5,"offset":13701},"end":{"line":330,"column":43,"offset":13739}}}],"position":{"start":{"line":330,"column":1,"offset":13697},"end":{"line":330,"column":43,"offset":13739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using ","position":{"start":{"line":332,"column":1,"offset":13741},"end":{"line":332,"column":7,"offset":13747}}},{"type":"element","tagName":"a","properties":{"href":"filter"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.filter()"}],"position":{"start":{"line":332,"column":8,"offset":13748},"end":{"line":332,"column":24,"offset":13764}}}],"position":{"start":{"line":332,"column":7,"offset":13747},"end":{"line":332,"column":33,"offset":13773}}},{"type":"text","value":" then ","position":{"start":{"line":332,"column":33,"offset":13773},"end":{"line":332,"column":39,"offset":13779}}},{"type":"element","tagName":"a","properties":{"href":"map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.map()"}],"position":{"start":{"line":332,"column":40,"offset":13780},"end":{"line":332,"column":53,"offset":13793}}}],"position":{"start":{"line":332,"column":39,"offset":13779},"end":{"line":332,"column":59,"offset":13799}}},{"type":"text","value":" traverses the array twice, but you can achieve the same effect while traversing only once with ","position":{"start":{"line":332,"column":59,"offset":13799},"end":{"line":332,"column":155,"offset":13895}}},{"type":"element","tagName":"a","properties":{"href":"reduce"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.reduce()"}],"position":{"start":{"line":332,"column":156,"offset":13896},"end":{"line":332,"column":172,"offset":13912}}}],"position":{"start":{"line":332,"column":155,"offset":13895},"end":{"line":332,"column":181,"offset":13921}}},{"type":"text","value":", thereby being more efficient. (If you like for loops, you can filter and map while traversing once with ","position":{"start":{"line":332,"column":181,"offset":13921},"end":{"line":332,"column":287,"offset":14027}}},{"type":"element","tagName":"a","properties":{"href":"foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.forEach()"}],"position":{"start":{"line":332,"column":288,"offset":14028},"end":{"line":332,"column":305,"offset":14045}}}],"position":{"start":{"line":332,"column":287,"offset":14027},"end":{"line":332,"column":315,"offset":14055}}},{"type":"text","value":").","position":{"start":{"line":332,"column":315,"offset":14055},"end":{"line":332,"column":317,"offset":14057}}}],"position":{"start":{"line":332,"column":1,"offset":13741},"end":{"line":332,"column":317,"offset":14057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const numbers = [-5, 6, 2, 0,];\n\nconst doubledPositiveNumbers = numbers.reduce((accumulator, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    accumulator.push(doubled);\n  }\n  return accumulator;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]\n"}],"position":{"start":{"line":334,"column":1,"offset":14059},"end":{"line":344,"column":52,"offset":14384}}}],"position":{"start":{"line":334,"column":1,"offset":14059},"end":{"line":344,"column":52,"offset":14384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Running Promises in Sequence","position":{"start":{"line":346,"column":5,"offset":14390},"end":{"line":346,"column":33,"offset":14418}}}],"position":{"start":{"line":346,"column":1,"offset":14386},"end":{"line":346,"column":33,"offset":14418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  )\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5)\n  })\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2)\n  })\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4)\n  })\n}\n\nconst promiseArr = [p1, p2, f3, p4]\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log)   // 1200\n"}],"position":{"start":{"line":348,"column":1,"offset":14420},"end":{"line":390,"column":35,"offset":15448}}}],"position":{"start":{"line":348,"column":1,"offset":14420},"end":{"line":390,"column":35,"offset":15448}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Function composition enabling piping","position":{"start":{"line":392,"column":5,"offset":15454},"end":{"line":392,"column":41,"offset":15490}}}],"position":{"start":{"line":392,"column":1,"offset":15450},"end":{"line":392,"column":41,"offset":15490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Building-blocks to use for composition\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n)\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple)\nconst multiply9 = pipe(triple, triple)\nconst multiply16 = pipe(quadruple, quadruple)\nconst multiply24 = pipe(double, triple, quadruple)\n\n// Usage\nmultiply6(6)   // 36\nmultiply9(9)   // 81\nmultiply16(16) // 256\nmultiply24(10) // 240\n"}],"position":{"start":{"line":394,"column":1,"offset":15492},"end":{"line":415,"column":26,"offset":16171}}}],"position":{"start":{"line":394,"column":1,"offset":15492},"end":{"line":415,"column":26,"offset":16171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Write map using reduce","position":{"start":{"line":417,"column":5,"offset":16177},"end":{"line":417,"column":27,"offset":16199}}}],"position":{"start":{"line":417,"column":1,"offset":16173},"end":{"line":417,"column":27,"offset":16199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, initialValue) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(initialValue, currentValue, index, array)\n      return mappedArray\n    }, [])\n  }\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n) // [5, 7, , 10]\n"}],"position":{"start":{"line":419,"column":1,"offset":16201},"end":{"line":430,"column":22,"offset":16670}}}],"position":{"start":{"line":419,"column":1,"offset":16201},"end":{"line":430,"column":22,"offset":16670}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":431,"column":1,"offset":16671}}}}