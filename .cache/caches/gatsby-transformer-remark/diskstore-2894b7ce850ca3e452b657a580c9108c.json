{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-3d8c9e30124e8a07bdb7ca296f7648e9--","val":"<h2>Introduction</h2>\n<p>ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is <a href=\"http://kangax.github.io/es5-compat-table/es6/\">underway now</a>.</p>\n<p>See the <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ES6 standard</a> for full specification of the ECMAScript 6 language.</p>\n<p>ES6 includes the following new features:</p>\n<ul>\n<li><a href=\"#arrows\">arrows</a></li>\n<li><a href=\"#classes\">classes</a></li>\n<li><a href=\"#enhanced-object-literals\">enhanced object literals</a></li>\n<li><a href=\"#template-strings\">template strings</a></li>\n<li><a href=\"#destructuring\">destructuring</a></li>\n<li><a href=\"#default--rest--spread\">default + rest + spread</a></li>\n<li><a href=\"#let--const\">let + const</a></li>\n<li><a href=\"#iterators--forof\">iterators + for..of</a></li>\n<li><a href=\"#generators\">generators</a></li>\n<li><a href=\"#unicode\">unicode</a></li>\n<li><a href=\"#modules\">modules</a></li>\n<li><a href=\"#module-loaders\">module loaders</a></li>\n<li><a href=\"#map--set--weakmap--weakset\">map + set + weakmap + weakset</a></li>\n<li><a href=\"#proxies\">proxies</a></li>\n<li><a href=\"#symbols\">symbols</a></li>\n<li><a href=\"#subclassable-built-ins\">subclassable built-ins</a></li>\n<li><a href=\"#promises\">promises</a></li>\n<li><a href=\"#math--number--string--array--object-apis\">math + number + string + array + object APIs</a></li>\n<li><a href=\"#binary-and-octal-literals\">binary and octal literals</a></li>\n<li><a href=\"#reflect-api\">reflect api</a></li>\n<li><a href=\"#tail-calls\">tail calls</a></li>\n</ul>\n<h2>ECMAScript 6 Features</h2>\n<h3>Arrows</h3>\n<p>Arrows are a function shorthand using the <code>=></code> syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both statement block bodies as well as expression bodies which return the value of the expression. Unlike functions, arrows share the same lexical <code>this</code> as their surrounding code.</p>\n<pre><code class=\"language-js\">// Expression bodies\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\nvar pairs = evens.map(v => ({even: v, odd: v + 1}));\n\n// Statement bodies\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// Lexical this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN Arrow Functions</a></p>\n<h3>Classes</h3>\n<p>ES6 classes are a simple sugar over the prototype-based OO pattern. Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability. Classes support prototype-based inheritance, super calls, instance and static methods and constructors.</p>\n<pre><code class=\"language-js\">class SkinnedMesh extends THREE.Mesh {\n  constructor(geometry, materials) {\n    super(geometry, materials);\n\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  update(camera) {\n    //...\n    super.update();\n  }\n  get boneCount() {\n    return this.bones.length;\n  }\n  set matrixType(matrixType) {\n    this.idMatrix = SkinnedMesh[matrixType]();\n  }\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">MDN Classes</a></p>\n<h3>Enhanced Object Literals</h3>\n<p>Object literals are extended to support setting the prototype at construction, shorthand for <code>foo: foo</code> assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.</p>\n<pre><code class=\"language-js\">var obj = {\n    // __proto__\n    __proto__: theProtoObj,\n    // Shorthand for 'handler: handler'\n    handler,\n    // Methods\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // Computed (dynamic) property names\n    [ 'prop_' + (() => 42)() ]: 42\n};\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals\">MDN Grammar and types: Object literals</a></p>\n<h3>Template Strings</h3>\n<p>Template strings provide syntactic sugar for constructing strings. This is similar to string interpolation features in Perl, Python and more. Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.</p>\n<pre><code class=\"language-js\">// Basic literal string creation\n`In JavaScript '\\n' is a line-feed.`\n\n// Multiline strings\n`In JavaScript this is\n not legal.`\n\n// String interpolation\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// Construct an HTTP request prefix is used to interpret the replacements and construction\nPOST`http://foo.org/bar?a=${a}&#x26;b=${b}\n     Content-Type: application/json\n     X-Credentials: ${credentials}\n     { \"foo\": ${foo},\n       \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\">MDN Template Strings</a></p>\n<h3>Destructuring</h3>\n<p>Destructuring allows binding using pattern matching, with support for matching arrays and objects. Destructuring is fail-soft, similar to standard object lookup <code>foo[\"bar\"]</code>, producing <code>undefined</code> values when not found.</p>\n<pre><code class=\"language-js\">// list matching\nvar [a, , b] = [1,2,3];\n\n// object matching\nvar { op: a, lhs: { op: b }, rhs: c }\n       = getASTNode()\n\n// object matching shorthand\n// binds `op`, `lhs` and `rhs` in scope\nvar {op, lhs, rhs} = getASTNode()\n\n// Can be used in parameter position\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// Fail-soft destructuring\nvar [a] = [];\na === undefined;\n\n// Fail-soft destructuring with defaults\nvar [a = 1] = [];\na === 1;\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">MDN Destructuring assignment</a></p>\n<h3>Default + Rest + Spread</h3>\n<p>Callee-evaluated default parameter values. Turn an array into consecutive arguments in a function call. Bind trailing parameters to an array. Rest replaces the need for <code>arguments</code> and addresses common cases more directly.</p>\n<hr>\n<pre><code class=\"language-js\">function f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\nf(3) == 15\n</code></pre>\n<hr>\n<pre><code class=\"language-js\">function f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\n</code></pre>\n<hr>\n<pre><code class=\"language-js\">function f(x, y, z) {\n  return x + y + z;\n}\n// Pass each elem of array as argument\nf(...[1,2,3]) == 6\n</code></pre>\n<p>More MDN info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">Spread Operator</a></p>\n<h3>Let + Const</h3>\n<p>Block-scoped binding constructs. <code>let</code> is the new <code>var</code>. <code>const</code> is single-assignment. Static restrictions prevent use before assignment.</p>\n<hr>\n<pre><code class=\"language-js\">function f() {\n  {\n    let x;\n    {\n      // okay, block scoped name\n      const x = \"sneaky\";\n      // error, const\n      x = \"foo\";\n    }\n    // error, already declared in block\n    let x = \"inner\";\n  }\n}\n</code></pre>\n<p>More MDN info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let statement</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const statement</a></p>\n<h3>Iterators + For..Of</h3>\n<p>Iterator objects enable custom iteration like CLR IEnumerable or Java Iterable. Generalize <code>for..in</code> to custom iterator-based iteration with <code>for..of</code>. Don't require realizing an array, enabling lazy design patterns like LINQ.</p>\n<pre><code class=\"language-js\">let fibonacci = {\n  [Symbol.iterator]() {\n    let pre = 0, cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur }\n      }\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n</code></pre>\n<p>Iteration is based on these duck-typed interfaces (using <a href=\"http://typescriptlang.org\">TypeScript</a> type syntax for exposition only):</p>\n<pre><code class=\"language-TypeScript\">interface IteratorResult {\n  done: boolean;\n  value: any;\n}\ninterface Iterator {\n  next(): IteratorResult;\n}\ninterface Iterable {\n  [Symbol.iterator](): Iterator\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">MDN for...of</a></p>\n<h3>Generators</h3>\n<p>Generators simplify iterator-authoring using <code>function*</code> and <code>yield</code>. A function declared as function* returns a Generator instance. Generators are subtypes of iterators which include additional <code>next</code> and <code>throw</code>. These enable values to flow back into the generator, so <code>yield</code> is an expression form which returns a value (or throws).</p>\n<p>Note: Can also be used to enable 'await'-like async programming, see also ES7 <code>await</code> proposal.</p>\n<pre><code class=\"language-js\">var fibonacci = {\n  [Symbol.iterator]: function*() {\n    var pre = 0, cur = 1;\n    for (;;) {\n      var temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n</code></pre>\n<p>The generator interface is (using <a href=\"http://typescriptlang.org\">TypeScript</a> type syntax for exposition only):</p>\n<pre><code class=\"language-TypeScript\">interface Generator extends Iterator {\n    next(value?: any): IteratorResult;\n    throw(exception: any);\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">MDN Iteration protocols</a></p>\n<h3>Unicode</h3>\n<p>Non-breaking additions to support full Unicode, including new Unicode literal form in strings and new RegExp <code>u</code> mode to handle code points, as well as new APIs to process strings at the 21bit code points level. These additions support building global apps in JavaScript.</p>\n<pre><code class=\"language-js\">// same as ES5.1\n\"𠮷\".length == 2\n\n// new RegExp behaviour, opt-in 'u'\n\"𠮷\".match(/./u)[0].length == 2\n\n// new form\n\"\\u{20BB7}\"==\"𠮷\"==\"\\uD842\\uDFB7\"\n\n// new String ops\n\"𠮷\".codePointAt(0) == 0x20BB7\n\n// for-of iterates code points\nfor(var c of \"𠮷\") {\n  console.log(c);\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\">MDN RegExp.prototype.unicode</a></p>\n<h3>Modules</h3>\n<p>Language-level support for modules for component definition. Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader. Implicitly async model - no code executes until requested modules are available and processed.</p>\n<pre><code class=\"language-js\">// lib/math.js\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n</code></pre>\n<pre><code class=\"language-js\">// app.js\nimport * as math from \"lib/math\";\nalert(\"2π = \" + math.sum(math.pi, math.pi));\n</code></pre>\n<pre><code class=\"language-js\">// otherApp.js\nimport {sum, pi} from \"lib/math\";\nalert(\"2π = \" + sum(pi, pi));\n</code></pre>\n<p>Some additional features include <code>export default</code> and <code>export *</code>:</p>\n<pre><code class=\"language-js\">// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.log(x);\n}\n</code></pre>\n<pre><code class=\"language-js\">// app.js\nimport ln, {pi, e} from \"lib/mathplusplus\";\nalert(\"2π = \" + ln(e)*pi*2);\n</code></pre>\n<p>More MDN info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import statement</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">export statement</a></p>\n<h3>Module Loaders</h3>\n<p>Module loaders support:</p>\n<ul>\n<li>Dynamic loading</li>\n<li>State isolation</li>\n<li>Global namespace isolation</li>\n<li>Compilation hooks</li>\n<li>Nested virtualization</li>\n</ul>\n<p>The default module loader can be configured, and new loaders can be constructed to evaluate and load code in isolated or constrained contexts.</p>\n<pre><code class=\"language-js\">// Dynamic loading - 'System' is default loader\nSystem.import('lib/math').then(function(m) {\n  alert(\"2π = \" + m.sum(m.pi, m.pi));\n});\n\n// Create execution sandboxes - new Loaders\nvar loader = new Loader({\n  global: fixup(window) // replace 'console.log'\n});\nloader.eval(\"console.log('hello world!');\");\n\n// Directly manipulate module cache\nSystem.get('jquery');\nSystem.set('jquery', Module({$: $})); // WARNING: not yet finalized\n</code></pre>\n<h3>Map + Set + WeakMap + WeakSet</h3>\n<p>Efficient data structures for common algorithms. WeakMaps provides leak-free object-key'd side tables.</p>\n<pre><code class=\"language-js\">// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n</code></pre>\n<p>More MDN info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></p>\n<h3>Proxies</h3>\n<p>Proxies enable creation of objects with the full range of behaviors available to host objects. Can be used for interception, object virtualization, logging/profiling, etc.</p>\n<pre><code class=\"language-js\">// Proxying a normal object\nvar target = {};\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\nvar p = new Proxy(target, handler);\np.world === 'Hello, world!';\n</code></pre>\n<pre><code class=\"language-js\">// Proxying a function object\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === 'I am the proxy';\n</code></pre>\n<p>There are traps available for all of the runtime-level meta-operations:</p>\n<pre><code class=\"language-js\">var handler =\n{\n  get:...,\n  set:...,\n  has:...,\n  deleteProperty:...,\n  apply:...,\n  construct:...,\n  getOwnPropertyDescriptor:...,\n  defineProperty:...,\n  getPrototypeOf:...,\n  setPrototypeOf:...,\n  enumerate:...,\n  ownKeys:...,\n  preventExtensions:...,\n  isExtensible:...\n}\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">MDN Proxy</a></p>\n<h3>Symbols</h3>\n<p>Symbols enable access control for object state. Symbols allow properties to be keyed by either <code>string</code> (as in ES5) or <code>symbol</code>. Symbols are a new primitive type. Optional <code>description</code> parameter used in debugging - but is not part of identity. Symbols are unique (like gensym), but not private since they are exposed via reflection features like <code>Object.getOwnPropertySymbols</code>.</p>\n<pre><code class=\"language-js\">var MyClass = (function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  return MyClass;\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">MDN Symbol</a></p>\n<h3>Subclassable Built-ins</h3>\n<p>In ES6, built-ins like <code>Array</code>, <code>Date</code> and DOM <code>Element</code>s can be subclassed.</p>\n<p>Object construction for a function named <code>Ctor</code> now uses two-phases (both virtually dispatched):</p>\n<ul>\n<li>Call <code>Ctor[@@create]</code> to allocate the object, installing any special behavior</li>\n<li>Invoke constructor on new instance to initialize</li>\n</ul>\n<p>The known <code>@@create</code> symbol is available via <code>Symbol.create</code>. Built-ins now expose their <code>@@create</code> explicitly.</p>\n<pre><code class=\"language-js\">// Pseudo-code of Array\nclass Array {\n    constructor(...args) { /* ... */ }\n    static [Symbol.create]() {\n        // Install special [[DefineOwnProperty]]\n        // to magically update 'length'\n    }\n}\n\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\n// Two-phase 'new':\n// 1) Call @@create to allocate object\n// 2) Invoke constructor on new instance\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\n</code></pre>\n<h3>Math + Number + String + Array + Object APIs</h3>\n<p>Many new library additions, including core Math libraries, Array conversion helpers, String helpers, and Object.assign for copying.</p>\n<pre><code class=\"language-js\">Number.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1, 2, 3].find(x => x == 3) // 3\n[1, 2, 3].findIndex(x => x == 2) // 1\n[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n</code></pre>\n<p>More MDN info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">Array.from</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\">Array.of</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">Array.prototype.copyWithin</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a></p>\n<h3>Binary and Octal Literals</h3>\n<p>Two new numeric literal forms are added for binary (<code>b</code>) and octal (<code>o</code>).</p>\n<pre><code class=\"language-js\">0b111110111 === 503 // true\n0o767 === 503 // true\n</code></pre>\n<h3>Promises</h3>\n<p>Promises are a library for asynchronous programming. Promises are a first class representation of a value that may be made available in the future. Promises are used in many existing JavaScript libraries.</p>\n<hr>\n<pre><code class=\"language-js\">function timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN Promise</a></p>\n<h3>Reflect API</h3>\n<p>Full reflection API exposing the runtime-level meta-operations on objects. This is effectively the inverse of the Proxy API, and allows making calls corresponding to the same meta-operations as the proxy traps. Especially useful for implementing proxies.</p>\n<pre><code class=\"language-js\">// No sample yet\n</code></pre>\n<p>More info: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">MDN Reflect</a></p>\n<h3>Tail Calls</h3>\n<p>Calls in tail-position are guaranteed to not grow the stack unboundedly. Makes recursive algorithms safe in the face of unbounded inputs.</p>\n<hr>\n<pre><code class=\"language-js\">function factorial(n, acc = 1) {\n    'use strict';\n    if (n &#x3C;= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// Stack overflow in most implementations today,\n// but safe on arbitrary inputs in ES6\nfactorial(100000)\n</code></pre>"}