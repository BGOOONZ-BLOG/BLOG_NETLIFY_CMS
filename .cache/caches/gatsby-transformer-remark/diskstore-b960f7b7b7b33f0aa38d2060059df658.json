{"expireTime":9007200904342770000,"key":"transformer-remark-markdown-html-ast-2678684dee7db9ab5ee5823b4f4e2d2e--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Map","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":6,"offset":6}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":6,"offset":6}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":4,"column":1,"offset":8},"end":{"line":4,"column":5,"offset":12}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":4,"column":5,"offset":12},"end":{"line":4,"column":10,"offset":17}}},{"type":"text","value":" object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and ","position":{"start":{"line":4,"column":10,"offset":17},"end":{"line":4,"column":124,"offset":131}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Primitive"},"children":[{"type":"text","value":"primitive values","position":{"start":{"line":4,"column":125,"offset":132},"end":{"line":4,"column":141,"offset":148}}}],"position":{"start":{"line":4,"column":124,"offset":131},"end":{"line":4,"column":203,"offset":210}}},{"type":"text","value":") may be used as either a key or a value.","position":{"start":{"line":4,"column":203,"offset":210},"end":{"line":4,"column":244,"offset":251}}}],"position":{"start":{"line":4,"column":1,"offset":8},"end":{"line":4,"column":244,"offset":251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":6,"column":4,"offset":256},"end":{"line":6,"column":15,"offset":267}}}],"position":{"start":{"line":6,"column":1,"offset":253},"end":{"line":6,"column":15,"offset":267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A ","position":{"start":{"line":8,"column":1,"offset":269},"end":{"line":8,"column":3,"offset":271}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":8,"column":3,"offset":271},"end":{"line":8,"column":8,"offset":276}}},{"type":"text","value":" object iterates its elements in insertion order â€” a ","position":{"start":{"line":8,"column":8,"offset":276},"end":{"line":8,"column":61,"offset":329}}},{"type":"element","tagName":"a","properties":{"href":"../statements/for...of"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for...of"}],"position":{"start":{"line":8,"column":62,"offset":330},"end":{"line":8,"column":72,"offset":340}}}],"position":{"start":{"line":8,"column":61,"offset":329},"end":{"line":8,"column":97,"offset":365}}},{"type":"text","value":" loop returns an array of ","position":{"start":{"line":8,"column":97,"offset":365},"end":{"line":8,"column":123,"offset":391}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":8,"column":123,"offset":391},"end":{"line":8,"column":137,"offset":405}}},{"type":"text","value":" for each iteration.","position":{"start":{"line":8,"column":137,"offset":405},"end":{"line":8,"column":157,"offset":425}}}],"position":{"start":{"line":8,"column":1,"offset":269},"end":{"line":8,"column":157,"offset":425}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Key equality","position":{"start":{"line":10,"column":5,"offset":431},"end":{"line":10,"column":17,"offset":443}}}],"position":{"start":{"line":10,"column":1,"offset":427},"end":{"line":10,"column":17,"offset":443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Key equality is based on the ","position":{"start":{"line":12,"column":3,"offset":447},"end":{"line":12,"column":32,"offset":476}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sameValueZero"}],"position":{"start":{"line":12,"column":33,"offset":477},"end":{"line":12,"column":48,"offset":492}}}],"position":{"start":{"line":12,"column":32,"offset":476},"end":{"line":12,"column":165,"offset":609}}},{"type":"text","value":" algorithm.","position":{"start":{"line":12,"column":165,"offset":609},"end":{"line":12,"column":176,"offset":620}}}],"position":{"start":{"line":12,"column":1,"offset":445},"end":{"line":12,"column":176,"offset":620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":13,"column":4,"offset":624},"end":{"line":13,"column":9,"offset":629}}}],"position":{"start":{"line":13,"column":3,"offset":623},"end":{"line":13,"column":15,"offset":635}}},{"type":"text","value":" is considered the same as ","position":{"start":{"line":13,"column":15,"offset":635},"end":{"line":13,"column":42,"offset":662}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":13,"column":42,"offset":662},"end":{"line":13,"column":47,"offset":667}}},{"type":"text","value":" (even though ","position":{"start":{"line":13,"column":47,"offset":667},"end":{"line":13,"column":61,"offset":681}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":13,"column":61,"offset":681},"end":{"line":13,"column":74,"offset":694}}},{"type":"text","value":") and all other values are considered equal according to the semantics of the ","position":{"start":{"line":13,"column":74,"offset":694},"end":{"line":13,"column":152,"offset":772}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==="}],"position":{"start":{"line":13,"column":152,"offset":772},"end":{"line":13,"column":157,"offset":777}}},{"type":"text","value":" operator.","position":{"start":{"line":13,"column":157,"offset":777},"end":{"line":13,"column":167,"offset":787}}}],"position":{"start":{"line":13,"column":1,"offset":621},"end":{"line":13,"column":167,"offset":787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In the current ECMAScript specification, ","position":{"start":{"line":14,"column":3,"offset":790},"end":{"line":14,"column":44,"offset":831}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-0"}],"position":{"start":{"line":14,"column":44,"offset":831},"end":{"line":14,"column":48,"offset":835}}},{"type":"text","value":" and ","position":{"start":{"line":14,"column":48,"offset":835},"end":{"line":14,"column":53,"offset":840}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"+0"}],"position":{"start":{"line":14,"column":53,"offset":840},"end":{"line":14,"column":57,"offset":844}}},{"type":"text","value":" are considered equal, although this was not so in earlier drafts. See ","position":{"start":{"line":14,"column":57,"offset":844},"end":{"line":14,"column":128,"offset":915}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"\"Value equality for -0 and 0\"","position":{"start":{"line":14,"column":129,"offset":916},"end":{"line":14,"column":158,"offset":945}}}],"position":{"start":{"line":14,"column":128,"offset":915},"end":{"line":14,"column":159,"offset":946}}},{"type":"text","value":" in the ","position":{"start":{"line":14,"column":159,"offset":946},"end":{"line":14,"column":167,"offset":954}}},{"type":"element","tagName":"a","properties":{"href":"#browser_compatibility"},"children":[{"type":"text","value":"Browser compatibility","position":{"start":{"line":14,"column":168,"offset":955},"end":{"line":14,"column":189,"offset":976}}}],"position":{"start":{"line":14,"column":167,"offset":954},"end":{"line":14,"column":214,"offset":1001}}},{"type":"text","value":" table for details.","position":{"start":{"line":14,"column":214,"offset":1001},"end":{"line":14,"column":233,"offset":1020}}}],"position":{"start":{"line":14,"column":1,"offset":788},"end":{"line":14,"column":233,"offset":1020}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":445},"end":{"line":14,"column":233,"offset":1020}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Objects vs. Maps","position":{"start":{"line":16,"column":5,"offset":1026},"end":{"line":16,"column":21,"offset":1042}}}],"position":{"start":{"line":16,"column":1,"offset":1022},"end":{"line":16,"column":21,"offset":1042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"object"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":18,"column":2,"offset":1045},"end":{"line":18,"column":10,"offset":1053}}}],"position":{"start":{"line":18,"column":1,"offset":1044},"end":{"line":18,"column":19,"offset":1062}}},{"type":"text","value":" is similar to ","position":{"start":{"line":18,"column":19,"offset":1062},"end":{"line":18,"column":34,"offset":1077}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":18,"column":34,"offset":1077},"end":{"line":18,"column":39,"offset":1082}}},{"type":"text","value":"â€”both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), ","position":{"start":{"line":18,"column":39,"offset":1082},"end":{"line":18,"column":225,"offset":1268}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":18,"column":225,"offset":1268},"end":{"line":18,"column":233,"offset":1276}}},{"type":"text","value":" has been used as ","position":{"start":{"line":18,"column":233,"offset":1276},"end":{"line":18,"column":251,"offset":1294}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":18,"column":251,"offset":1294},"end":{"line":18,"column":256,"offset":1299}}},{"type":"text","value":" historically.","position":{"start":{"line":18,"column":256,"offset":1299},"end":{"line":18,"column":270,"offset":1313}}}],"position":{"start":{"line":18,"column":1,"offset":1044},"end":{"line":18,"column":270,"offset":1313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, there are important differences that make ","position":{"start":{"line":20,"column":1,"offset":1315},"end":{"line":20,"column":52,"offset":1366}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":20,"column":52,"offset":1366},"end":{"line":20,"column":57,"offset":1371}}},{"type":"text","value":" preferable in certain cases:","position":{"start":{"line":20,"column":57,"offset":1371},"end":{"line":20,"column":86,"offset":1400}}}],"position":{"start":{"line":20,"column":1,"offset":1315},"end":{"line":20,"column":86,"offset":1400}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><colgroup><col style=\"width: 33%\" /><col style=\"width: 33%\" /><col style=\"width: 33%\" /></colgroup><thead><tr class=\"header\"><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr class=\"odd\"><td>Accidental Keys</td><td>A <code>Map</code> does not contain any keys by default. It only contains what is explicitly put into it.</td><td><p>An <code>Object</code> has a prototype, so it contains default keys that could collide with your own keys if you're not careful.</p><div class=\"notecard note\"><p><strong>Note:</strong> As of ES5, this can be bypassed by using <a href=\"object/create\"><code>Object.create(null)</code></a>, but this is seldom done.</p></div></td></tr><tr class=\"even\"><td>Key Types</td><td>A <code>Map</code>'s keys can be any value (including functions, objects, or any primitive).</td><td>The keys of an <code>Object</code> must be either a <a href=\"string\"><code>String</code></a> or a <a href=\"symbol\"><code>Symbol</code></a>.</td></tr><tr class=\"odd\"><td>Key Order</td><td><p>The keys in <code>Map</code> are ordered in a simple, straightforward way: A <code>Map</code> object iterates entries, keys, and values in the order of entry insertion.</p></td><td><p>Although the keys of an ordinary <code>Object</code> are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.</p><p>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a> and <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\">EnumerateObjectProperties</a> abstract specification operations. But note that no single mechanism iterates <strong>all</strong> of an object's properties; the various mechanisms each include different subsets of properties. (<a href=\"../statements/for...in\"><code>for-in</code></a> includes only enumerable string-keyed properties; <a href=\"object/keys\"><code>Object.keys</code></a> includes only own, enumerable, string-keyed properties; <a href=\"object/getownpropertynames\"><code>Object.getOwnPropertyNames</code></a> includes own, string-keyed properties even if non-enumerable; <a href=\"object/getownpropertysymbols\"><code>Object.getOwnPropertySymbols</code></a> does the same for just <code>Symbol</code>-keyed properties, etc.)</p></td></tr><tr class=\"even\"><td><p>Size</p></td><td>The number of items in a <code>Map</code> is easily retrieved from its <a href=\"map/size\"><code>size</code></a> property.</td><td>The number of items in an <code>Object</code> must be determined manually.</td></tr><tr class=\"odd\"><td>Iteration</td><td>A <code>Map</code> is an <a href=\"../iteration_protocols\">iterable</a>, so it can be directly iterated.</td><td><p><code>Object</code> does not implement an <a href=\"../iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript <a href=\"../statements/for...of\">for...of</a> statement (by default).</p><div class=\"notecard note\"><p><strong>Note:</strong></p><ul><li>An object can implement the iteration protocol, or you can get an iterable for an object using <a href=\"object/keys\"><code>Object.keys</code></a> or <a href=\"object/entries\"><code>Object.entries</code></a>.</li><li>The <a href=\"../statements/for...in\">for...in</a> statement allows you to iterate over the <em>enumerable</em> properties of an object.</li></ul></div></td></tr><tr class=\"even\"><td>Performance</td><td><p>Performs better in scenarios involving frequent additions and removals of key-value pairs.</p></td><td><p>Not optimized for frequent additions and removals of key-value pairs.</p></td></tr></tbody></table>","position":{"start":{"line":22,"column":1,"offset":1402},"end":{"line":22,"column":3789,"offset":5190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Setting object properties","position":{"start":{"line":24,"column":5,"offset":5196},"end":{"line":24,"column":30,"offset":5221}}}],"position":{"start":{"line":24,"column":1,"offset":5192},"end":{"line":24,"column":30,"offset":5221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Setting Object properties works for Map objects as well, and can cause considerable confusion.","position":{"start":{"line":26,"column":1,"offset":5223},"end":{"line":26,"column":95,"offset":5317}}}],"position":{"start":{"line":26,"column":1,"offset":5223},"end":{"line":26,"column":95,"offset":5317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Therefore, this appears to work in a way:","position":{"start":{"line":28,"column":1,"offset":5319},"end":{"line":28,"column":42,"offset":5360}}}],"position":{"start":{"line":28,"column":1,"offset":5319},"end":{"line":28,"column":42,"offset":5360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let wrongMap = new Map()\nwrongMap['bla'] = 'blaa'\nwrongMap['bla2'] = 'blaaa2'\n\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":30,"column":1,"offset":5362},"end":{"line":34,"column":66,"offset":5518}}}],"position":{"start":{"line":30,"column":1,"offset":5362},"end":{"line":34,"column":66,"offset":5518}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:","position":{"start":{"line":36,"column":1,"offset":5520},"end":{"line":36,"column":217,"offset":5736}}}],"position":{"start":{"line":36,"column":1,"offset":5520},"end":{"line":36,"column":217,"offset":5736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wrongMap.has('bla')    // false\nwrongMap.delete('bla') // false\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":38,"column":1,"offset":5738},"end":{"line":40,"column":66,"offset":5875}}}],"position":{"start":{"line":38,"column":1,"offset":5738},"end":{"line":40,"column":66,"offset":5875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The correct usage for storing data in the Map is through the ","position":{"start":{"line":42,"column":1,"offset":5877},"end":{"line":42,"column":62,"offset":5938}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set(key, value)"}],"position":{"start":{"line":42,"column":62,"offset":5938},"end":{"line":42,"column":79,"offset":5955}}},{"type":"text","value":" method.","position":{"start":{"line":42,"column":79,"offset":5955},"end":{"line":42,"column":87,"offset":5963}}}],"position":{"start":{"line":42,"column":1,"offset":5877},"end":{"line":42,"column":87,"offset":5963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let contacts = new Map()\ncontacts.set('Jessie', {phone: \"213-555-1234\", address: \"123 N 1st Ave\"})\ncontacts.has('Jessie') // true\ncontacts.get('Hilary') // undefined\ncontacts.set('Hilary', {phone: \"617-555-4321\", address: \"321 S 2nd St\"})\ncontacts.get('Jessie') // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete('Raymond') // false\ncontacts.delete('Jessie') // true\nconsole.log(contacts.size) // 1\n"}],"position":{"start":{"line":44,"column":1,"offset":5965},"end":{"line":52,"column":36,"offset":6417}}}],"position":{"start":{"line":44,"column":1,"offset":5965},"end":{"line":52,"column":36,"offset":6417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":54,"column":4,"offset":6422},"end":{"line":54,"column":15,"offset":6433}}}],"position":{"start":{"line":54,"column":1,"offset":6419},"end":{"line":54,"column":15,"offset":6433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map()"}],"position":{"start":{"line":56,"column":2,"offset":6436},"end":{"line":56,"column":9,"offset":6443}}}],"position":{"start":{"line":56,"column":1,"offset":6435},"end":{"line":56,"column":19,"offset":6453}}},{"type":"text","value":"\nCreates a new ","position":{"start":{"line":56,"column":19,"offset":6453},"end":{"line":57,"column":15,"offset":6468}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":57,"column":15,"offset":6468},"end":{"line":57,"column":20,"offset":6473}}},{"type":"text","value":" object.","position":{"start":{"line":57,"column":20,"offset":6473},"end":{"line":57,"column":28,"offset":6481}}}],"position":{"start":{"line":56,"column":1,"offset":6435},"end":{"line":57,"column":28,"offset":6481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Static properties","position":{"start":{"line":59,"column":4,"offset":6486},"end":{"line":59,"column":21,"offset":6503}}}],"position":{"start":{"line":59,"column":1,"offset":6483},"end":{"line":59,"column":21,"offset":6503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@species"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"get Map[@@species]"}],"position":{"start":{"line":61,"column":2,"offset":6506},"end":{"line":61,"column":22,"offset":6526}}}],"position":{"start":{"line":61,"column":1,"offset":6505},"end":{"line":61,"column":38,"offset":6542}}},{"type":"text","value":"\nThe constructor function that is used to create derived objects.","position":{"start":{"line":61,"column":38,"offset":6542},"end":{"line":62,"column":65,"offset":6607}}}],"position":{"start":{"line":61,"column":1,"offset":6505},"end":{"line":62,"column":65,"offset":6607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance properties","position":{"start":{"line":64,"column":4,"offset":6612},"end":{"line":64,"column":23,"offset":6631}}}],"position":{"start":{"line":64,"column":1,"offset":6609},"end":{"line":64,"column":23,"offset":6631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/size"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.size"}],"position":{"start":{"line":66,"column":2,"offset":6634},"end":{"line":66,"column":22,"offset":6654}}}],"position":{"start":{"line":66,"column":1,"offset":6633},"end":{"line":66,"column":33,"offset":6665}}},{"type":"text","value":"\nReturns the number of key/value pairs in the ","position":{"start":{"line":66,"column":33,"offset":6665},"end":{"line":67,"column":46,"offset":6711}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":67,"column":46,"offset":6711},"end":{"line":67,"column":51,"offset":6716}}},{"type":"text","value":" object.","position":{"start":{"line":67,"column":51,"offset":6716},"end":{"line":67,"column":59,"offset":6724}}}],"position":{"start":{"line":66,"column":1,"offset":6633},"end":{"line":67,"column":59,"offset":6724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance methods","position":{"start":{"line":69,"column":4,"offset":6729},"end":{"line":69,"column":20,"offset":6745}}}],"position":{"start":{"line":69,"column":1,"offset":6726},"end":{"line":69,"column":20,"offset":6745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/clear"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.clear()"}],"position":{"start":{"line":71,"column":2,"offset":6748},"end":{"line":71,"column":25,"offset":6771}}}],"position":{"start":{"line":71,"column":1,"offset":6747},"end":{"line":71,"column":37,"offset":6783}}},{"type":"text","value":"\nRemoves all key-value pairs from the ","position":{"start":{"line":71,"column":37,"offset":6783},"end":{"line":72,"column":38,"offset":6821}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":72,"column":38,"offset":6821},"end":{"line":72,"column":43,"offset":6826}}},{"type":"text","value":" object.","position":{"start":{"line":72,"column":43,"offset":6826},"end":{"line":72,"column":51,"offset":6834}}}],"position":{"start":{"line":71,"column":1,"offset":6747},"end":{"line":72,"column":51,"offset":6834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/delete"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.delete(key)"}],"position":{"start":{"line":74,"column":2,"offset":6837},"end":{"line":74,"column":29,"offset":6864}}}],"position":{"start":{"line":74,"column":1,"offset":6836},"end":{"line":74,"column":42,"offset":6877}}},{"type":"text","value":"\nReturns ","position":{"start":{"line":74,"column":42,"offset":6877},"end":{"line":75,"column":9,"offset":6886}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"true"}],"position":{"start":{"line":75,"column":9,"offset":6886},"end":{"line":75,"column":15,"offset":6892}}},{"type":"text","value":" if an element in the ","position":{"start":{"line":75,"column":15,"offset":6892},"end":{"line":75,"column":37,"offset":6914}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":75,"column":37,"offset":6914},"end":{"line":75,"column":42,"offset":6919}}},{"type":"text","value":" object existed and has been removed, or ","position":{"start":{"line":75,"column":42,"offset":6919},"end":{"line":75,"column":83,"offset":6960}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":75,"column":83,"offset":6960},"end":{"line":75,"column":90,"offset":6967}}},{"type":"text","value":" if the element does not exist. ","position":{"start":{"line":75,"column":90,"offset":6967},"end":{"line":75,"column":122,"offset":6999}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":75,"column":122,"offset":6999},"end":{"line":75,"column":146,"offset":7023}}},{"type":"text","value":" will return ","position":{"start":{"line":75,"column":146,"offset":7023},"end":{"line":75,"column":159,"offset":7036}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":75,"column":159,"offset":7036},"end":{"line":75,"column":166,"offset":7043}}},{"type":"text","value":" afterwards.","position":{"start":{"line":75,"column":166,"offset":7043},"end":{"line":75,"column":178,"offset":7055}}}],"position":{"start":{"line":74,"column":1,"offset":6836},"end":{"line":75,"column":178,"offset":7055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/get"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.get(key)"}],"position":{"start":{"line":77,"column":2,"offset":7058},"end":{"line":77,"column":26,"offset":7082}}}],"position":{"start":{"line":77,"column":1,"offset":7057},"end":{"line":77,"column":36,"offset":7092}}},{"type":"text","value":"\nReturns the value associated to the ","position":{"start":{"line":77,"column":36,"offset":7092},"end":{"line":78,"column":37,"offset":7129}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":78,"column":37,"offset":7129},"end":{"line":78,"column":42,"offset":7134}}},{"type":"text","value":", or ","position":{"start":{"line":78,"column":42,"offset":7134},"end":{"line":78,"column":47,"offset":7139}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"undefined"}],"position":{"start":{"line":78,"column":47,"offset":7139},"end":{"line":78,"column":58,"offset":7150}}},{"type":"text","value":" if there is none.","position":{"start":{"line":78,"column":58,"offset":7150},"end":{"line":78,"column":76,"offset":7168}}}],"position":{"start":{"line":77,"column":1,"offset":7057},"end":{"line":78,"column":76,"offset":7168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/has"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":80,"column":2,"offset":7171},"end":{"line":80,"column":26,"offset":7195}}}],"position":{"start":{"line":80,"column":1,"offset":7170},"end":{"line":80,"column":36,"offset":7205}}},{"type":"text","value":"\nReturns a boolean asserting whether a value has been associated to the ","position":{"start":{"line":80,"column":36,"offset":7205},"end":{"line":81,"column":72,"offset":7277}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":81,"column":72,"offset":7277},"end":{"line":81,"column":77,"offset":7282}}},{"type":"text","value":" in the ","position":{"start":{"line":81,"column":77,"offset":7282},"end":{"line":81,"column":85,"offset":7290}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":81,"column":85,"offset":7290},"end":{"line":81,"column":90,"offset":7295}}},{"type":"text","value":" object or not.","position":{"start":{"line":81,"column":90,"offset":7295},"end":{"line":81,"column":105,"offset":7310}}}],"position":{"start":{"line":80,"column":1,"offset":7170},"end":{"line":81,"column":105,"offset":7310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.set(key, value)"}],"position":{"start":{"line":83,"column":2,"offset":7313},"end":{"line":83,"column":33,"offset":7344}}}],"position":{"start":{"line":83,"column":1,"offset":7312},"end":{"line":83,"column":43,"offset":7354}}},{"type":"text","value":"\nSets the ","position":{"start":{"line":83,"column":43,"offset":7354},"end":{"line":84,"column":10,"offset":7364}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":84,"column":10,"offset":7364},"end":{"line":84,"column":17,"offset":7371}}},{"type":"text","value":" for the ","position":{"start":{"line":84,"column":17,"offset":7371},"end":{"line":84,"column":26,"offset":7380}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":84,"column":26,"offset":7380},"end":{"line":84,"column":31,"offset":7385}}},{"type":"text","value":" in the ","position":{"start":{"line":84,"column":31,"offset":7385},"end":{"line":84,"column":39,"offset":7393}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":84,"column":39,"offset":7393},"end":{"line":84,"column":44,"offset":7398}}},{"type":"text","value":" object. Returns the ","position":{"start":{"line":84,"column":44,"offset":7398},"end":{"line":84,"column":65,"offset":7419}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":84,"column":65,"offset":7419},"end":{"line":84,"column":70,"offset":7424}}},{"type":"text","value":" object.","position":{"start":{"line":84,"column":70,"offset":7424},"end":{"line":84,"column":78,"offset":7432}}}],"position":{"start":{"line":83,"column":1,"offset":7312},"end":{"line":84,"column":78,"offset":7432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iteration methods","position":{"start":{"line":86,"column":5,"offset":7438},"end":{"line":86,"column":22,"offset":7455}}}],"position":{"start":{"line":86,"column":1,"offset":7434},"end":{"line":86,"column":22,"offset":7455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@iterator"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype[@@iterator]()"}],"position":{"start":{"line":88,"column":2,"offset":7458},"end":{"line":88,"column":31,"offset":7487}}}],"position":{"start":{"line":88,"column":1,"offset":7457},"end":{"line":88,"column":48,"offset":7504}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":88,"column":48,"offset":7504},"end":{"line":89,"column":45,"offset":7549}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":89,"column":45,"offset":7549},"end":{"line":89,"column":59,"offset":7563}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":89,"column":59,"offset":7563},"end":{"line":89,"column":84,"offset":7588}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":89,"column":84,"offset":7588},"end":{"line":89,"column":89,"offset":7593}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":89,"column":89,"offset":7593},"end":{"line":89,"column":116,"offset":7620}}}],"position":{"start":{"line":88,"column":1,"offset":7457},"end":{"line":89,"column":116,"offset":7620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/keys"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.keys()"}],"position":{"start":{"line":91,"column":2,"offset":7623},"end":{"line":91,"column":24,"offset":7645}}}],"position":{"start":{"line":91,"column":1,"offset":7622},"end":{"line":91,"column":35,"offset":7656}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":91,"column":35,"offset":7656},"end":{"line":92,"column":49,"offset":7705}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"keys","position":{"start":{"line":92,"column":51,"offset":7707},"end":{"line":92,"column":55,"offset":7711}}}],"position":{"start":{"line":92,"column":49,"offset":7705},"end":{"line":92,"column":57,"offset":7713}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":92,"column":57,"offset":7713},"end":{"line":92,"column":82,"offset":7738}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":92,"column":82,"offset":7738},"end":{"line":92,"column":87,"offset":7743}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":92,"column":87,"offset":7743},"end":{"line":92,"column":114,"offset":7770}}}],"position":{"start":{"line":91,"column":1,"offset":7622},"end":{"line":92,"column":114,"offset":7770}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/values"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.values()"}],"position":{"start":{"line":94,"column":2,"offset":7773},"end":{"line":94,"column":26,"offset":7797}}}],"position":{"start":{"line":94,"column":1,"offset":7772},"end":{"line":94,"column":39,"offset":7810}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":94,"column":39,"offset":7810},"end":{"line":95,"column":49,"offset":7859}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"values","position":{"start":{"line":95,"column":51,"offset":7861},"end":{"line":95,"column":57,"offset":7867}}}],"position":{"start":{"line":95,"column":49,"offset":7859},"end":{"line":95,"column":59,"offset":7869}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":95,"column":59,"offset":7869},"end":{"line":95,"column":84,"offset":7894}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":95,"column":84,"offset":7894},"end":{"line":95,"column":89,"offset":7899}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":95,"column":89,"offset":7899},"end":{"line":95,"column":116,"offset":7926}}}],"position":{"start":{"line":94,"column":1,"offset":7772},"end":{"line":95,"column":116,"offset":7926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/entries"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.entries()"}],"position":{"start":{"line":97,"column":2,"offset":7929},"end":{"line":97,"column":27,"offset":7954}}}],"position":{"start":{"line":97,"column":1,"offset":7928},"end":{"line":97,"column":41,"offset":7968}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":97,"column":41,"offset":7968},"end":{"line":98,"column":45,"offset":8013}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":98,"column":45,"offset":8013},"end":{"line":98,"column":59,"offset":8027}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":98,"column":59,"offset":8027},"end":{"line":98,"column":84,"offset":8052}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":98,"column":84,"offset":8052},"end":{"line":98,"column":89,"offset":8057}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":98,"column":89,"offset":8057},"end":{"line":98,"column":116,"offset":8084}}}],"position":{"start":{"line":97,"column":1,"offset":7928},"end":{"line":98,"column":116,"offset":8084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.forEach(callbackFn[, thisArg])"}],"position":{"start":{"line":100,"column":2,"offset":8087},"end":{"line":100,"column":48,"offset":8133}}}],"position":{"start":{"line":100,"column":1,"offset":8086},"end":{"line":100,"column":62,"offset":8147}}},{"type":"text","value":"\nCalls ","position":{"start":{"line":100,"column":62,"offset":8147},"end":{"line":101,"column":7,"offset":8154}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callbackFn"}],"position":{"start":{"line":101,"column":7,"offset":8154},"end":{"line":101,"column":19,"offset":8166}}},{"type":"text","value":" once for each key-value pair present in the ","position":{"start":{"line":101,"column":19,"offset":8166},"end":{"line":101,"column":64,"offset":8211}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":101,"column":64,"offset":8211},"end":{"line":101,"column":69,"offset":8216}}},{"type":"text","value":" object, in insertion order. If a ","position":{"start":{"line":101,"column":69,"offset":8216},"end":{"line":101,"column":103,"offset":8250}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"thisArg"}],"position":{"start":{"line":101,"column":103,"offset":8250},"end":{"line":101,"column":112,"offset":8259}}},{"type":"text","value":" parameter is provided to ","position":{"start":{"line":101,"column":112,"offset":8259},"end":{"line":101,"column":138,"offset":8285}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach"}],"position":{"start":{"line":101,"column":138,"offset":8285},"end":{"line":101,"column":147,"offset":8294}}},{"type":"text","value":", it will be used as the ","position":{"start":{"line":101,"column":147,"offset":8294},"end":{"line":101,"column":172,"offset":8319}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":101,"column":172,"offset":8319},"end":{"line":101,"column":178,"offset":8325}}},{"type":"text","value":" value for each callback.","position":{"start":{"line":101,"column":178,"offset":8325},"end":{"line":101,"column":203,"offset":8350}}}],"position":{"start":{"line":100,"column":1,"offset":8086},"end":{"line":101,"column":203,"offset":8350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":103,"column":4,"offset":8355},"end":{"line":103,"column":12,"offset":8363}}}],"position":{"start":{"line":103,"column":1,"offset":8352},"end":{"line":103,"column":12,"offset":8363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using the Map object","position":{"start":{"line":105,"column":5,"offset":8369},"end":{"line":105,"column":25,"offset":8389}}}],"position":{"start":{"line":105,"column":1,"offset":8365},"end":{"line":105,"column":25,"offset":8389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n"}],"position":{"start":{"line":107,"column":1,"offset":8391},"end":{"line":128,"column":78,"offset":9231}}}],"position":{"start":{"line":107,"column":1,"offset":8391},"end":{"line":128,"column":78,"offset":9231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using NaN as Map keys","position":{"start":{"line":130,"column":5,"offset":9237},"end":{"line":130,"column":26,"offset":9258}}}],"position":{"start":{"line":130,"column":1,"offset":9233},"end":{"line":130,"column":26,"offset":9258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":132,"column":2,"offset":9261},"end":{"line":132,"column":7,"offset":9266}}}],"position":{"start":{"line":132,"column":1,"offset":9260},"end":{"line":132,"column":13,"offset":9272}}},{"type":"text","value":" can also be used as a key. Even though every ","position":{"start":{"line":132,"column":13,"offset":9272},"end":{"line":132,"column":59,"offset":9318}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":132,"column":59,"offset":9318},"end":{"line":132,"column":64,"offset":9323}}},{"type":"text","value":" is not equal to itself (","position":{"start":{"line":132,"column":64,"offset":9323},"end":{"line":132,"column":89,"offset":9348}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":132,"column":89,"offset":9348},"end":{"line":132,"column":102,"offset":9361}}},{"type":"text","value":" is true), the following example works because ","position":{"start":{"line":132,"column":102,"offset":9361},"end":{"line":132,"column":149,"offset":9408}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":132,"column":149,"offset":9408},"end":{"line":132,"column":154,"offset":9413}}},{"type":"text","value":"s are indistinguishable from each other:","position":{"start":{"line":132,"column":154,"offset":9413},"end":{"line":132,"column":194,"offset":9453}}}],"position":{"start":{"line":132,"column":1,"offset":9260},"end":{"line":132,"column":194,"offset":9453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN)\n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN)\n// \"not a number\"\n"}],"position":{"start":{"line":134,"column":1,"offset":9455},"end":{"line":142,"column":22,"offset":9637}}}],"position":{"start":{"line":134,"column":1,"offset":9455},"end":{"line":142,"column":22,"offset":9637}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with for..of","position":{"start":{"line":144,"column":5,"offset":9643},"end":{"line":144,"column":31,"offset":9669}}}],"position":{"start":{"line":144,"column":1,"offset":9639},"end":{"line":144,"column":31,"offset":9669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using a ","position":{"start":{"line":146,"column":1,"offset":9671},"end":{"line":146,"column":30,"offset":9700}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for..of"}],"position":{"start":{"line":146,"column":30,"offset":9700},"end":{"line":146,"column":39,"offset":9709}}},{"type":"text","value":" loop:","position":{"start":{"line":146,"column":39,"offset":9709},"end":{"line":146,"column":45,"offset":9715}}}],"position":{"start":{"line":146,"column":1,"offset":9671},"end":{"line":146,"column":45,"offset":9715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":148,"column":1,"offset":9717},"end":{"line":174,"column":15,"offset":10210}}}],"position":{"start":{"line":148,"column":1,"offset":9717},"end":{"line":174,"column":15,"offset":10210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with forEach()","position":{"start":{"line":176,"column":5,"offset":10216},"end":{"line":176,"column":33,"offset":10244}}}],"position":{"start":{"line":176,"column":1,"offset":10212},"end":{"line":176,"column":33,"offset":10244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using the ","position":{"start":{"line":178,"column":1,"offset":10246},"end":{"line":178,"column":32,"offset":10277}}},{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach()"}],"position":{"start":{"line":178,"column":33,"offset":10278},"end":{"line":178,"column":44,"offset":10289}}}],"position":{"start":{"line":178,"column":32,"offset":10277},"end":{"line":178,"column":58,"offset":10303}}},{"type":"text","value":" method:","position":{"start":{"line":178,"column":58,"offset":10303},"end":{"line":178,"column":66,"offset":10311}}}],"position":{"start":{"line":178,"column":1,"offset":10246},"end":{"line":178,"column":66,"offset":10311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":180,"column":1,"offset":10313},"end":{"line":184,"column":15,"offset":10430}}}],"position":{"start":{"line":180,"column":1,"offset":10313},"end":{"line":184,"column":15,"offset":10430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Relation with Array objects","position":{"start":{"line":186,"column":5,"offset":10436},"end":{"line":186,"column":32,"offset":10463}}}],"position":{"start":{"line":186,"column":1,"offset":10432},"end":{"line":186,"column":32,"offset":10463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]\n"}],"position":{"start":{"line":188,"column":1,"offset":10465},"end":{"line":202,"column":62,"offset":11071}}}],"position":{"start":{"line":188,"column":1,"offset":10465},"end":{"line":202,"column":62,"offset":11071}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cloning and merging Maps","position":{"start":{"line":204,"column":5,"offset":11077},"end":{"line":204,"column":29,"offset":11101}}}],"position":{"start":{"line":204,"column":1,"offset":11073},"end":{"line":204,"column":29,"offset":11101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like ","position":{"start":{"line":206,"column":1,"offset":11103},"end":{"line":206,"column":11,"offset":11113}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array"}],"position":{"start":{"line":206,"column":11,"offset":11113},"end":{"line":206,"column":18,"offset":11120}}},{"type":"text","value":"s, ","position":{"start":{"line":206,"column":18,"offset":11120},"end":{"line":206,"column":21,"offset":11123}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":206,"column":21,"offset":11123},"end":{"line":206,"column":26,"offset":11128}}},{"type":"text","value":"s can be cloned:","position":{"start":{"line":206,"column":26,"offset":11128},"end":{"line":206,"column":42,"offset":11144}}}],"position":{"start":{"line":206,"column":1,"offset":11103},"end":{"line":206,"column":42,"offset":11144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)\n"}],"position":{"start":{"line":208,"column":1,"offset":11146},"end":{"line":215,"column":77,"offset":11354}}}],"position":{"start":{"line":208,"column":1,"offset":11146},"end":{"line":215,"column":77,"offset":11354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":217,"column":3,"offset":11358},"end":{"line":217,"column":8,"offset":11363}}}],"position":{"start":{"line":217,"column":1,"offset":11356},"end":{"line":217,"column":10,"offset":11365}}},{"type":"text","value":" Keep in mind that ","position":{"start":{"line":217,"column":10,"offset":11365},"end":{"line":217,"column":29,"offset":11384}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"the data itself","position":{"start":{"line":217,"column":30,"offset":11385},"end":{"line":217,"column":45,"offset":11400}}}],"position":{"start":{"line":217,"column":29,"offset":11384},"end":{"line":217,"column":46,"offset":11401}}},{"type":"text","value":" is not cloned.","position":{"start":{"line":217,"column":46,"offset":11401},"end":{"line":217,"column":61,"offset":11416}}}],"position":{"start":{"line":217,"column":1,"offset":11356},"end":{"line":217,"column":61,"offset":11416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged, maintaining key uniqueness:","position":{"start":{"line":219,"column":1,"offset":11418},"end":{"line":219,"column":48,"offset":11465}}}],"position":{"start":{"line":219,"column":1,"offset":11418},"end":{"line":219,"column":48,"offset":11465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":221,"column":1,"offset":11467},"end":{"line":238,"column":40,"offset":11904}}}],"position":{"start":{"line":221,"column":1,"offset":11467},"end":{"line":238,"column":40,"offset":11904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged with Arrays, too:","position":{"start":{"line":240,"column":1,"offset":11906},"end":{"line":240,"column":37,"offset":11942}}}],"position":{"start":{"line":240,"column":1,"offset":11906},"end":{"line":240,"column":37,"offset":11942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":242,"column":1,"offset":11944},"end":{"line":258,"column":40,"offset":12343}}}],"position":{"start":{"line":242,"column":1,"offset":11944},"end":{"line":258,"column":40,"offset":12343}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":259,"column":1,"offset":12344}}}}