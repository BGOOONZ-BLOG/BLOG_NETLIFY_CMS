{"expireTime":9007200904342771000,"key":"transformer-remark-markdown-html-ast-dfcd70fbb9aec2b4324e0b8b814f98bc--","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data structures","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<br>","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":5,"offset":22}}},{"type":"element","tagName":"a","properties":{"href":"https://ds-unit-5-lambda.netlify.app/#"},"children":[{"type":"text","value":"https://ds-unit-5-lambda.netlify.app/#","position":{"start":{"line":4,"column":5,"offset":22},"end":{"line":4,"column":43,"offset":60}}}],"position":{"start":{"line":4,"column":5,"offset":22},"end":{"line":4,"column":43,"offset":60}}},{"type":"text","value":".\n","position":{"start":{"line":4,"column":43,"offset":60},"end":{"line":5,"column":1,"offset":62}}},{"type":"raw","value":"<br>","position":{"start":{"line":5,"column":1,"offset":62},"end":{"line":5,"column":5,"offset":66}}},{"type":"text","value":"\n","position":{"start":{"line":5,"column":5,"offset":66},"end":{"line":6,"column":1,"offset":67}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":1,"offset":67},"end":{"line":6,"column":5,"offset":71}}},{"type":"text","value":"\n","position":{"start":{"line":6,"column":5,"offset":71},"end":{"line":7,"column":1,"offset":72}}},{"type":"raw","value":"<br>","position":{"start":{"line":7,"column":1,"offset":72},"end":{"line":7,"column":5,"offset":76}}}],"position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":7,"column":5,"offset":76}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":9,"column":1,"offset":78},"end":{"line":14,"column":5,"offset":438}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<br>","position":{"start":{"line":16,"column":1,"offset":440},"end":{"line":26,"column":5,"offset":828}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  Python Data Structures</h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://ds-unit-5-lambda.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<br>\n<br>\n<h1>   Leetcode </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz.github.io/Leetcode-JS-PY-MD/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":28,"column":1,"offset":830},"end":{"line":47,"column":5,"offset":1593}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":49,"column":1,"offset":1595},"end":{"line":57,"column":5,"offset":1970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Data structures in JavaScript","position":{"start":{"line":59,"column":5,"offset":1976},"end":{"line":59,"column":34,"offset":2005}}}],"position":{"start":{"line":59,"column":1,"offset":1972},"end":{"line":59,"column":34,"offset":2005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":61,"column":1,"offset":2007},"end":{"line":61,"column":28,"offset":2034}}},{"type":"text","value":"H","position":{"start":{"line":61,"column":28,"offset":2034},"end":{"line":61,"column":29,"offset":2035}}},{"type":"raw","value":"</span>","position":{"start":{"line":61,"column":29,"offset":2035},"end":{"line":61,"column":36,"offset":2042}}},{"type":"text","value":"ere's a website I created to practice data structures!","position":{"start":{"line":61,"column":36,"offset":2042},"end":{"line":61,"column":90,"offset":2096}}}],"position":{"start":{"line":61,"column":1,"offset":2007},"end":{"line":61,"column":90,"offset":2096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\">","position":{"start":{"line":63,"column":1,"offset":2098},"end":{"line":63,"column":178,"offset":2275}}},{"type":"raw","value":"<strong>","position":{"start":{"line":63,"column":178,"offset":2275},"end":{"line":63,"column":186,"offset":2283}}},{"type":"text","value":"directory","position":{"start":{"line":63,"column":186,"offset":2283},"end":{"line":63,"column":195,"offset":2292}}},{"type":"raw","value":"</strong>","position":{"start":{"line":63,"column":195,"offset":2292},"end":{"line":63,"column":204,"offset":2301}}},{"type":"raw","value":"<br />","position":{"start":{"line":63,"column":204,"offset":2301},"end":{"line":63,"column":210,"offset":2307}}},{"type":"text","value":"\n","position":{"start":{"line":63,"column":210,"offset":2307},"end":{"line":64,"column":1,"offset":2308}}},{"type":"raw","value":"<em>","position":{"start":{"line":64,"column":1,"offset":2308},"end":{"line":64,"column":5,"offset":2312}}},{"type":"text","value":"Edit description","position":{"start":{"line":64,"column":5,"offset":2312},"end":{"line":64,"column":21,"offset":2328}}},{"type":"raw","value":"</em>","position":{"start":{"line":64,"column":21,"offset":2328},"end":{"line":64,"column":26,"offset":2333}}},{"type":"text","value":"ds-algo-official-c3dw6uapg-bgoonz.vercel.app","position":{"start":{"line":64,"column":26,"offset":2333},"end":{"line":64,"column":70,"offset":2377}}},{"type":"raw","value":"</a>","position":{"start":{"line":64,"column":70,"offset":2377},"end":{"line":64,"column":74,"offset":2381}}},{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">","position":{"start":{"line":64,"column":74,"offset":2381},"end":{"line":64,"column":209,"offset":2516}}},{"type":"raw","value":"</a>","position":{"start":{"line":64,"column":209,"offset":2516},"end":{"line":64,"column":213,"offset":2520}}}],"position":{"start":{"line":63,"column":1,"offset":2098},"end":{"line":64,"column":213,"offset":2520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":66,"column":1,"offset":2522},"end":{"line":66,"column":28,"offset":2549}}},{"type":"text","value":"H","position":{"start":{"line":66,"column":28,"offset":2549},"end":{"line":66,"column":29,"offset":2550}}},{"type":"raw","value":"</span>","position":{"start":{"line":66,"column":29,"offset":2550},"end":{"line":66,"column":36,"offset":2557}}},{"type":"text","value":"ere's the repo that the website is built on:","position":{"start":{"line":66,"column":36,"offset":2557},"end":{"line":66,"column":80,"offset":2601}}}],"position":{"start":{"line":66,"column":1,"offset":2522},"end":{"line":66,"column":80,"offset":2601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">","position":{"start":{"line":68,"column":1,"offset":2603},"end":{"line":68,"column":156,"offset":2758}}},{"type":"raw","value":"<strong>","position":{"start":{"line":68,"column":156,"offset":2758},"end":{"line":68,"column":164,"offset":2766}}},{"type":"text","value":"bgoonz/DS-ALGO-OFFICIAL","position":{"start":{"line":68,"column":164,"offset":2766},"end":{"line":68,"column":187,"offset":2789}}},{"type":"raw","value":"</strong>","position":{"start":{"line":68,"column":187,"offset":2789},"end":{"line":68,"column":196,"offset":2798}}},{"type":"raw","value":"<br />","position":{"start":{"line":68,"column":196,"offset":2798},"end":{"line":68,"column":202,"offset":2804}}},{"type":"text","value":"\n","position":{"start":{"line":68,"column":202,"offset":2804},"end":{"line":69,"column":1,"offset":2805}}},{"type":"raw","value":"<em>","position":{"start":{"line":69,"column":1,"offset":2805},"end":{"line":69,"column":5,"offset":2809}}},{"type":"text","value":"Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…","position":{"start":{"line":69,"column":5,"offset":2809},"end":{"line":69,"column":123,"offset":2927}}},{"type":"raw","value":"</em>","position":{"start":{"line":69,"column":123,"offset":2927},"end":{"line":69,"column":128,"offset":2932}}},{"type":"text","value":"github.com","position":{"start":{"line":69,"column":128,"offset":2932},"end":{"line":69,"column":138,"offset":2942}}},{"type":"raw","value":"</a>","position":{"start":{"line":69,"column":138,"offset":2942},"end":{"line":69,"column":142,"offset":2946}}},{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">","position":{"start":{"line":69,"column":142,"offset":2946},"end":{"line":69,"column":246,"offset":3050}}},{"type":"raw","value":"</a>","position":{"start":{"line":69,"column":246,"offset":3050},"end":{"line":69,"column":250,"offset":3054}}}],"position":{"start":{"line":68,"column":1,"offset":2603},"end":{"line":69,"column":250,"offset":3054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":71,"column":1,"offset":3056},"end":{"line":71,"column":28,"offset":3083}}},{"type":"text","value":"H","position":{"start":{"line":71,"column":28,"offset":3083},"end":{"line":71,"column":29,"offset":3084}}},{"type":"raw","value":"</span>","position":{"start":{"line":71,"column":29,"offset":3084},"end":{"line":71,"column":36,"offset":3091}}},{"type":"text","value":"ere's a live code editor where you can mess with any of the examples…","position":{"start":{"line":71,"column":36,"offset":3091},"end":{"line":71,"column":105,"offset":3160}}}],"position":{"start":{"line":71,"column":1,"offset":3056},"end":{"line":71,"column":105,"offset":3160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Resources (article content below):","position":{"start":{"line":73,"column":5,"offset":3166},"end":{"line":73,"column":39,"offset":3200}}}],"position":{"start":{"line":73,"column":1,"offset":3162},"end":{"line":73,"column":39,"offset":3200}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Videos","position":{"start":{"line":75,"column":6,"offset":3207},"end":{"line":75,"column":12,"offset":3213}}}],"position":{"start":{"line":75,"column":1,"offset":3202},"end":{"line":75,"column":12,"offset":3213}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"53c4\">","position":{"start":{"line":77,"column":5,"offset":3219},"end":{"line":77,"column":21,"offset":3235}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=2&amp;t=0s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":77,"column":21,"offset":3235},"end":{"line":77,"column":181,"offset":3395}}},{"type":"text","value":"Abdul Bari: YouTubeChannel for Algorithms","position":{"start":{"line":77,"column":181,"offset":3395},"end":{"line":77,"column":222,"offset":3436}}},{"type":"raw","value":"</a>","position":{"start":{"line":77,"column":222,"offset":3436},"end":{"line":77,"column":226,"offset":3440}}},{"type":"raw","value":"</span>","position":{"start":{"line":77,"column":226,"offset":3440},"end":{"line":77,"column":233,"offset":3447}}}],"position":{"start":{"line":77,"column":1,"offset":3215},"end":{"line":77,"column":233,"offset":3447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ab93\">","position":{"start":{"line":78,"column":5,"offset":3452},"end":{"line":78,"column":21,"offset":3468}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&amp;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":78,"column":21,"offset":3468},"end":{"line":78,"column":160,"offset":3607}}},{"type":"text","value":"Data Structures and algorithms","position":{"start":{"line":78,"column":160,"offset":3607},"end":{"line":78,"column":190,"offset":3637}}},{"type":"raw","value":"</a>","position":{"start":{"line":78,"column":190,"offset":3637},"end":{"line":78,"column":194,"offset":3641}}},{"type":"raw","value":"</span>","position":{"start":{"line":78,"column":194,"offset":3641},"end":{"line":78,"column":201,"offset":3648}}}],"position":{"start":{"line":78,"column":1,"offset":3448},"end":{"line":78,"column":201,"offset":3648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e614\">","position":{"start":{"line":79,"column":5,"offset":3653},"end":{"line":79,"column":21,"offset":3669}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":79,"column":21,"offset":3669},"end":{"line":79,"column":145,"offset":3793}}},{"type":"text","value":"Data Structures and algorithms Course","position":{"start":{"line":79,"column":145,"offset":3793},"end":{"line":79,"column":182,"offset":3830}}},{"type":"raw","value":"</a>","position":{"start":{"line":79,"column":182,"offset":3830},"end":{"line":79,"column":186,"offset":3834}}},{"type":"raw","value":"</span>","position":{"start":{"line":79,"column":186,"offset":3834},"end":{"line":79,"column":193,"offset":3841}}}],"position":{"start":{"line":79,"column":1,"offset":3649},"end":{"line":79,"column":193,"offset":3841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3d48\">","position":{"start":{"line":80,"column":5,"offset":3846},"end":{"line":80,"column":21,"offset":3862}}},{"type":"raw","value":"<a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":80,"column":21,"offset":3862},"end":{"line":80,"column":138,"offset":3979}}},{"type":"text","value":"Khan Academy","position":{"start":{"line":80,"column":138,"offset":3979},"end":{"line":80,"column":150,"offset":3991}}},{"type":"raw","value":"</a>","position":{"start":{"line":80,"column":150,"offset":3991},"end":{"line":80,"column":154,"offset":3995}}},{"type":"raw","value":"</span>","position":{"start":{"line":80,"column":154,"offset":3995},"end":{"line":80,"column":161,"offset":4002}}}],"position":{"start":{"line":80,"column":1,"offset":3842},"end":{"line":80,"column":161,"offset":4002}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ac90\">","position":{"start":{"line":81,"column":5,"offset":4007},"end":{"line":81,"column":21,"offset":4023}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":81,"column":21,"offset":4023},"end":{"line":81,"column":145,"offset":4147}}},{"type":"text","value":"Data structures by mycodeschool","position":{"start":{"line":81,"column":145,"offset":4147},"end":{"line":81,"column":176,"offset":4178}}},{"type":"raw","value":"</a>","position":{"start":{"line":81,"column":176,"offset":4178},"end":{"line":81,"column":180,"offset":4182}}},{"type":"text","value":"Pre-requisite for this lesson is good understanding of pointers in C.","position":{"start":{"line":81,"column":180,"offset":4182},"end":{"line":81,"column":249,"offset":4251}}},{"type":"raw","value":"</span>","position":{"start":{"line":81,"column":249,"offset":4251},"end":{"line":81,"column":256,"offset":4258}}}],"position":{"start":{"line":81,"column":1,"offset":4003},"end":{"line":81,"column":256,"offset":4258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9bd9\">","position":{"start":{"line":82,"column":5,"offset":4263},"end":{"line":82,"column":21,"offset":4279}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":82,"column":21,"offset":4279},"end":{"line":82,"column":160,"offset":4418}}},{"type":"text","value":"MIT 6.006: Intro to Algorithms(2011)","position":{"start":{"line":82,"column":160,"offset":4418},"end":{"line":82,"column":196,"offset":4454}}},{"type":"raw","value":"</a>","position":{"start":{"line":82,"column":196,"offset":4454},"end":{"line":82,"column":200,"offset":4458}}},{"type":"raw","value":"</span>","position":{"start":{"line":82,"column":200,"offset":4458},"end":{"line":82,"column":207,"offset":4465}}}],"position":{"start":{"line":82,"column":1,"offset":4259},"end":{"line":82,"column":207,"offset":4465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"71f0\">","position":{"start":{"line":83,"column":5,"offset":4470},"end":{"line":83,"column":21,"offset":4486}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":83,"column":21,"offset":4486},"end":{"line":83,"column":160,"offset":4625}}},{"type":"text","value":"Data Structures and Algorithms by Codewithharry","position":{"start":{"line":83,"column":160,"offset":4625},"end":{"line":83,"column":207,"offset":4672}}},{"type":"raw","value":"</a>","position":{"start":{"line":83,"column":207,"offset":4672},"end":{"line":83,"column":211,"offset":4676}}},{"type":"raw","value":"</span>","position":{"start":{"line":83,"column":211,"offset":4676},"end":{"line":83,"column":218,"offset":4683}}}],"position":{"start":{"line":83,"column":1,"offset":4466},"end":{"line":83,"column":218,"offset":4683}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":1,"offset":3215},"end":{"line":83,"column":218,"offset":4683}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Books","position":{"start":{"line":85,"column":6,"offset":4690},"end":{"line":85,"column":11,"offset":4695}}}],"position":{"start":{"line":85,"column":1,"offset":4685},"end":{"line":85,"column":11,"offset":4695}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2eac\">","position":{"start":{"line":87,"column":5,"offset":4701},"end":{"line":87,"column":21,"offset":4717}}},{"type":"raw","value":"<a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":87,"column":21,"offset":4717},"end":{"line":87,"column":154,"offset":4850}}},{"type":"text","value":"Introduction to Algorithms","position":{"start":{"line":87,"column":154,"offset":4850},"end":{"line":87,"column":180,"offset":4876}}},{"type":"raw","value":"</a>","position":{"start":{"line":87,"column":180,"offset":4876},"end":{"line":87,"column":184,"offset":4880}}},{"type":"text","value":" by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein","position":{"start":{"line":87,"column":184,"offset":4880},"end":{"line":87,"column":264,"offset":4960}}},{"type":"raw","value":"</span>","position":{"start":{"line":87,"column":264,"offset":4960},"end":{"line":87,"column":271,"offset":4967}}}],"position":{"start":{"line":87,"column":1,"offset":4697},"end":{"line":87,"column":271,"offset":4967}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3e8d\">","position":{"start":{"line":88,"column":5,"offset":4972},"end":{"line":88,"column":21,"offset":4988}}},{"type":"raw","value":"<a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":88,"column":21,"offset":4988},"end":{"line":88,"column":146,"offset":5113}}},{"type":"text","value":"Competitive Programming 3","position":{"start":{"line":88,"column":146,"offset":5113},"end":{"line":88,"column":171,"offset":5138}}},{"type":"raw","value":"</a>","position":{"start":{"line":88,"column":171,"offset":5138},"end":{"line":88,"column":175,"offset":5142}}},{"type":"text","value":" by Steven Halim and Felix Halim","position":{"start":{"line":88,"column":175,"offset":5142},"end":{"line":88,"column":207,"offset":5174}}},{"type":"raw","value":"</span>","position":{"start":{"line":88,"column":207,"offset":5174},"end":{"line":88,"column":214,"offset":5181}}}],"position":{"start":{"line":88,"column":1,"offset":4968},"end":{"line":88,"column":214,"offset":5181}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3aa3\">","position":{"start":{"line":89,"column":5,"offset":5186},"end":{"line":89,"column":21,"offset":5202}}},{"type":"raw","value":"<a href=\"https://cses.fi/book/book.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":89,"column":21,"offset":5202},"end":{"line":89,"column":102,"offset":5283}}},{"type":"text","value":"Competitive Programmers Hand Book","position":{"start":{"line":89,"column":102,"offset":5283},"end":{"line":89,"column":135,"offset":5316}}},{"type":"raw","value":"</a>","position":{"start":{"line":89,"column":135,"offset":5316},"end":{"line":89,"column":139,"offset":5320}}},{"type":"text","value":" Beginner friendly hand book for competitive programmers.","position":{"start":{"line":89,"column":139,"offset":5320},"end":{"line":89,"column":196,"offset":5377}}},{"type":"raw","value":"</span>","position":{"start":{"line":89,"column":196,"offset":5377},"end":{"line":89,"column":203,"offset":5384}}}],"position":{"start":{"line":89,"column":1,"offset":5182},"end":{"line":89,"column":203,"offset":5384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3c02\">","position":{"start":{"line":90,"column":5,"offset":5389},"end":{"line":90,"column":21,"offset":5405}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":90,"column":21,"offset":5405},"end":{"line":90,"column":229,"offset":5613}}},{"type":"text","value":"Data Structures and Algorithms Made Easy","position":{"start":{"line":90,"column":229,"offset":5613},"end":{"line":90,"column":269,"offset":5653}}},{"type":"raw","value":"</a>","position":{"start":{"line":90,"column":269,"offset":5653},"end":{"line":90,"column":273,"offset":5657}}},{"type":"text","value":" by Narasimha Karumanchi","position":{"start":{"line":90,"column":273,"offset":5657},"end":{"line":90,"column":297,"offset":5681}}},{"type":"raw","value":"</span>","position":{"start":{"line":90,"column":297,"offset":5681},"end":{"line":90,"column":304,"offset":5688}}}],"position":{"start":{"line":90,"column":1,"offset":5385},"end":{"line":90,"column":304,"offset":5688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"93ec\">","position":{"start":{"line":91,"column":5,"offset":5693},"end":{"line":91,"column":21,"offset":5709}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":91,"column":21,"offset":5709},"end":{"line":91,"column":234,"offset":5922}}},{"type":"text","value":"Learning Algorithms Through Programming and Puzzle Solving","position":{"start":{"line":91,"column":234,"offset":5922},"end":{"line":91,"column":292,"offset":5980}}},{"type":"raw","value":"</a>","position":{"start":{"line":91,"column":292,"offset":5980},"end":{"line":91,"column":296,"offset":5984}}},{"type":"text","value":" by Alexander Kulikov and Pavel Pevzner","position":{"start":{"line":91,"column":296,"offset":5984},"end":{"line":91,"column":335,"offset":6023}}},{"type":"raw","value":"</span>","position":{"start":{"line":91,"column":335,"offset":6023},"end":{"line":91,"column":342,"offset":6030}}}],"position":{"start":{"line":91,"column":1,"offset":5689},"end":{"line":91,"column":342,"offset":6030}}},{"type":"text","value":"\n"}],"position":{"start":{"line":87,"column":1,"offset":4697},"end":{"line":91,"column":342,"offset":6030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Coding practice","position":{"start":{"line":93,"column":6,"offset":6037},"end":{"line":93,"column":21,"offset":6052}}}],"position":{"start":{"line":93,"column":1,"offset":6032},"end":{"line":93,"column":21,"offset":6052}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"824c\">","position":{"start":{"line":95,"column":5,"offset":6058},"end":{"line":95,"column":21,"offset":6074}}},{"type":"raw","value":"<a href=\"https://leetcode.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":95,"column":21,"offset":6074},"end":{"line":95,"column":94,"offset":6147}}},{"type":"text","value":"LeetCode","position":{"start":{"line":95,"column":94,"offset":6147},"end":{"line":95,"column":102,"offset":6155}}},{"type":"raw","value":"</a>","position":{"start":{"line":95,"column":102,"offset":6155},"end":{"line":95,"column":106,"offset":6159}}},{"type":"raw","value":"</span>","position":{"start":{"line":95,"column":106,"offset":6159},"end":{"line":95,"column":113,"offset":6166}}}],"position":{"start":{"line":95,"column":1,"offset":6054},"end":{"line":95,"column":113,"offset":6166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a528\">","position":{"start":{"line":96,"column":5,"offset":6171},"end":{"line":96,"column":21,"offset":6187}}},{"type":"raw","value":"<a href=\"https://www.interviewbit.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":96,"column":21,"offset":6187},"end":{"line":96,"column":102,"offset":6268}}},{"type":"text","value":"InterviewBit","position":{"start":{"line":96,"column":102,"offset":6268},"end":{"line":96,"column":114,"offset":6280}}},{"type":"raw","value":"</a>","position":{"start":{"line":96,"column":114,"offset":6280},"end":{"line":96,"column":118,"offset":6284}}},{"type":"raw","value":"</span>","position":{"start":{"line":96,"column":118,"offset":6284},"end":{"line":96,"column":125,"offset":6291}}}],"position":{"start":{"line":96,"column":1,"offset":6167},"end":{"line":96,"column":125,"offset":6291}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fa41\">","position":{"start":{"line":97,"column":5,"offset":6296},"end":{"line":97,"column":21,"offset":6312}}},{"type":"raw","value":"<a href=\"https://codility.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":97,"column":21,"offset":6312},"end":{"line":97,"column":94,"offset":6385}}},{"type":"text","value":"Codility","position":{"start":{"line":97,"column":94,"offset":6385},"end":{"line":97,"column":102,"offset":6393}}},{"type":"raw","value":"</a>","position":{"start":{"line":97,"column":102,"offset":6393},"end":{"line":97,"column":106,"offset":6397}}},{"type":"raw","value":"</span>","position":{"start":{"line":97,"column":106,"offset":6397},"end":{"line":97,"column":113,"offset":6404}}}],"position":{"start":{"line":97,"column":1,"offset":6292},"end":{"line":97,"column":113,"offset":6404}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6c61\">","position":{"start":{"line":98,"column":5,"offset":6409},"end":{"line":98,"column":21,"offset":6425}}},{"type":"raw","value":"<a href=\"https://www.hackerrank.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":98,"column":21,"offset":6425},"end":{"line":98,"column":100,"offset":6504}}},{"type":"text","value":"HackerRank","position":{"start":{"line":98,"column":100,"offset":6504},"end":{"line":98,"column":110,"offset":6514}}},{"type":"raw","value":"</a>","position":{"start":{"line":98,"column":110,"offset":6514},"end":{"line":98,"column":114,"offset":6518}}},{"type":"raw","value":"</span>","position":{"start":{"line":98,"column":114,"offset":6518},"end":{"line":98,"column":121,"offset":6525}}}],"position":{"start":{"line":98,"column":1,"offset":6405},"end":{"line":98,"column":121,"offset":6525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"dff6\">","position":{"start":{"line":99,"column":5,"offset":6530},"end":{"line":99,"column":21,"offset":6546}}},{"type":"raw","value":"<a href=\"https://projecteuler.net/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":99,"column":21,"offset":6546},"end":{"line":99,"column":98,"offset":6623}}},{"type":"text","value":"Project Euler","position":{"start":{"line":99,"column":98,"offset":6623},"end":{"line":99,"column":111,"offset":6636}}},{"type":"raw","value":"</a>","position":{"start":{"line":99,"column":111,"offset":6636},"end":{"line":99,"column":115,"offset":6640}}},{"type":"raw","value":"</span>","position":{"start":{"line":99,"column":115,"offset":6640},"end":{"line":99,"column":122,"offset":6647}}}],"position":{"start":{"line":99,"column":1,"offset":6526},"end":{"line":99,"column":122,"offset":6647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b2dd\">","position":{"start":{"line":100,"column":5,"offset":6652},"end":{"line":100,"column":21,"offset":6668}}},{"type":"raw","value":"<a href=\"https://spoj.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":100,"column":21,"offset":6668},"end":{"line":100,"column":90,"offset":6737}}},{"type":"text","value":"Spoj","position":{"start":{"line":100,"column":90,"offset":6737},"end":{"line":100,"column":94,"offset":6741}}},{"type":"raw","value":"</a>","position":{"start":{"line":100,"column":94,"offset":6741},"end":{"line":100,"column":98,"offset":6745}}},{"type":"raw","value":"</span>","position":{"start":{"line":100,"column":98,"offset":6745},"end":{"line":100,"column":105,"offset":6752}}}],"position":{"start":{"line":100,"column":1,"offset":6648},"end":{"line":100,"column":105,"offset":6752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"c8e8\">","position":{"start":{"line":101,"column":5,"offset":6757},"end":{"line":101,"column":21,"offset":6773}}},{"type":"raw","value":"<a href=\"https://code.google.com/codejam/contests.html\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":101,"column":21,"offset":6773},"end":{"line":101,"column":118,"offset":6870}}},{"type":"text","value":"Google Code Jam practice problems","position":{"start":{"line":101,"column":118,"offset":6870},"end":{"line":101,"column":151,"offset":6903}}},{"type":"raw","value":"</a>","position":{"start":{"line":101,"column":151,"offset":6903},"end":{"line":101,"column":155,"offset":6907}}},{"type":"raw","value":"</span>","position":{"start":{"line":101,"column":155,"offset":6907},"end":{"line":101,"column":162,"offset":6914}}}],"position":{"start":{"line":101,"column":1,"offset":6753},"end":{"line":101,"column":162,"offset":6914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e8bb\">","position":{"start":{"line":102,"column":5,"offset":6919},"end":{"line":102,"column":21,"offset":6935}}},{"type":"raw","value":"<a href=\"https://www.hackerearth.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":102,"column":21,"offset":6935},"end":{"line":102,"column":101,"offset":7015}}},{"type":"text","value":"HackerEarth","position":{"start":{"line":102,"column":101,"offset":7015},"end":{"line":102,"column":112,"offset":7026}}},{"type":"raw","value":"</a>","position":{"start":{"line":102,"column":112,"offset":7026},"end":{"line":102,"column":116,"offset":7030}}},{"type":"raw","value":"</span>","position":{"start":{"line":102,"column":116,"offset":7030},"end":{"line":102,"column":123,"offset":7037}}}],"position":{"start":{"line":102,"column":1,"offset":6915},"end":{"line":102,"column":123,"offset":7037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e803\">","position":{"start":{"line":103,"column":5,"offset":7042},"end":{"line":103,"column":21,"offset":7058}}},{"type":"raw","value":"<a href=\"https://www.topcoder.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":103,"column":21,"offset":7058},"end":{"line":103,"column":98,"offset":7135}}},{"type":"text","value":"Top Coder","position":{"start":{"line":103,"column":98,"offset":7135},"end":{"line":103,"column":107,"offset":7144}}},{"type":"raw","value":"</a>","position":{"start":{"line":103,"column":107,"offset":7144},"end":{"line":103,"column":111,"offset":7148}}},{"type":"raw","value":"</span>","position":{"start":{"line":103,"column":111,"offset":7148},"end":{"line":103,"column":118,"offset":7155}}}],"position":{"start":{"line":103,"column":1,"offset":7038},"end":{"line":103,"column":118,"offset":7155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"294e\">","position":{"start":{"line":104,"column":5,"offset":7160},"end":{"line":104,"column":21,"offset":7176}}},{"type":"raw","value":"<a href=\"https://www.codechef.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":104,"column":21,"offset":7176},"end":{"line":104,"column":98,"offset":7253}}},{"type":"text","value":"CodeChef","position":{"start":{"line":104,"column":98,"offset":7253},"end":{"line":104,"column":106,"offset":7261}}},{"type":"raw","value":"</a>","position":{"start":{"line":104,"column":106,"offset":7261},"end":{"line":104,"column":110,"offset":7265}}},{"type":"raw","value":"</span>","position":{"start":{"line":104,"column":110,"offset":7265},"end":{"line":104,"column":117,"offset":7272}}}],"position":{"start":{"line":104,"column":1,"offset":7156},"end":{"line":104,"column":117,"offset":7272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9c05\">","position":{"start":{"line":105,"column":5,"offset":7277},"end":{"line":105,"column":21,"offset":7293}}},{"type":"raw","value":"<a href=\"https://www.codewars.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":105,"column":21,"offset":7293},"end":{"line":105,"column":98,"offset":7370}}},{"type":"text","value":"Codewars","position":{"start":{"line":105,"column":98,"offset":7370},"end":{"line":105,"column":106,"offset":7378}}},{"type":"raw","value":"</a>","position":{"start":{"line":105,"column":106,"offset":7378},"end":{"line":105,"column":110,"offset":7382}}},{"type":"raw","value":"</span>","position":{"start":{"line":105,"column":110,"offset":7382},"end":{"line":105,"column":117,"offset":7389}}}],"position":{"start":{"line":105,"column":1,"offset":7273},"end":{"line":105,"column":117,"offset":7389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"356e\">","position":{"start":{"line":106,"column":5,"offset":7394},"end":{"line":106,"column":21,"offset":7410}}},{"type":"raw","value":"<a href=\"https://codesignal.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":106,"column":21,"offset":7410},"end":{"line":106,"column":96,"offset":7485}}},{"type":"text","value":"CodeSignal","position":{"start":{"line":106,"column":96,"offset":7485},"end":{"line":106,"column":106,"offset":7495}}},{"type":"raw","value":"</a>","position":{"start":{"line":106,"column":106,"offset":7495},"end":{"line":106,"column":110,"offset":7499}}},{"type":"raw","value":"</span>","position":{"start":{"line":106,"column":110,"offset":7499},"end":{"line":106,"column":117,"offset":7506}}}],"position":{"start":{"line":106,"column":1,"offset":7390},"end":{"line":106,"column":117,"offset":7506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2d20\">","position":{"start":{"line":107,"column":5,"offset":7511},"end":{"line":107,"column":21,"offset":7527}}},{"type":"raw","value":"<a href=\"http://codekata.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":107,"column":21,"offset":7527},"end":{"line":107,"column":93,"offset":7599}}},{"type":"text","value":"CodeKata","position":{"start":{"line":107,"column":93,"offset":7599},"end":{"line":107,"column":101,"offset":7607}}},{"type":"raw","value":"</a>","position":{"start":{"line":107,"column":101,"offset":7607},"end":{"line":107,"column":105,"offset":7611}}},{"type":"raw","value":"</span>","position":{"start":{"line":107,"column":105,"offset":7611},"end":{"line":107,"column":112,"offset":7618}}}],"position":{"start":{"line":107,"column":1,"offset":7507},"end":{"line":107,"column":112,"offset":7618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"d3bf\">","position":{"start":{"line":108,"column":5,"offset":7623},"end":{"line":108,"column":21,"offset":7639}}},{"type":"raw","value":"<a href=\"https://www.firecode.io/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":108,"column":21,"offset":7639},"end":{"line":108,"column":97,"offset":7715}}},{"type":"text","value":"Firecode","position":{"start":{"line":108,"column":97,"offset":7715},"end":{"line":108,"column":105,"offset":7723}}},{"type":"raw","value":"</a>","position":{"start":{"line":108,"column":105,"offset":7723},"end":{"line":108,"column":109,"offset":7727}}},{"type":"raw","value":"</span>","position":{"start":{"line":108,"column":109,"offset":7727},"end":{"line":108,"column":116,"offset":7734}}}],"position":{"start":{"line":108,"column":1,"offset":7619},"end":{"line":108,"column":116,"offset":7734}}},{"type":"text","value":"\n"}],"position":{"start":{"line":95,"column":1,"offset":6054},"end":{"line":108,"column":116,"offset":7734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Courses","position":{"start":{"line":110,"column":6,"offset":7741},"end":{"line":110,"column":13,"offset":7748}}}],"position":{"start":{"line":110,"column":1,"offset":7736},"end":{"line":110,"column":13,"offset":7748}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"eac2\">","position":{"start":{"line":112,"column":5,"offset":7754},"end":{"line":112,"column":21,"offset":7770}}},{"type":"raw","value":"<a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":112,"column":21,"offset":7770},"end":{"line":112,"column":156,"offset":7905}}},{"type":"text","value":"Master the Coding Interview: Big Tech (FAANG) Interviews","position":{"start":{"line":112,"column":156,"offset":7905},"end":{"line":112,"column":212,"offset":7961}}},{"type":"raw","value":"</a>","position":{"start":{"line":112,"column":212,"offset":7961},"end":{"line":112,"column":216,"offset":7965}}},{"type":"text","value":" Course by Andrei and his team.","position":{"start":{"line":112,"column":216,"offset":7965},"end":{"line":112,"column":247,"offset":7996}}},{"type":"raw","value":"</span>","position":{"start":{"line":112,"column":247,"offset":7996},"end":{"line":112,"column":254,"offset":8003}}}],"position":{"start":{"line":112,"column":1,"offset":7750},"end":{"line":112,"column":254,"offset":8003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"36ca\">","position":{"start":{"line":113,"column":5,"offset":8008},"end":{"line":113,"column":21,"offset":8024}}},{"type":"raw","value":"<a href=\"https://realpython.com/python-data-structures\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":113,"column":21,"offset":8024},"end":{"line":113,"column":118,"offset":8121}}},{"type":"text","value":"Common Python Data Structures","position":{"start":{"line":113,"column":118,"offset":8121},"end":{"line":113,"column":147,"offset":8150}}},{"type":"raw","value":"</a>","position":{"start":{"line":113,"column":147,"offset":8150},"end":{"line":113,"column":151,"offset":8154}}},{"type":"text","value":" Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.","position":{"start":{"line":113,"column":151,"offset":8154},"end":{"line":113,"column":443,"offset":8446}}},{"type":"raw","value":"</span>","position":{"start":{"line":113,"column":443,"offset":8446},"end":{"line":113,"column":450,"offset":8453}}}],"position":{"start":{"line":113,"column":1,"offset":8004},"end":{"line":113,"column":450,"offset":8453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"cdc9\">","position":{"start":{"line":114,"column":5,"offset":8458},"end":{"line":114,"column":21,"offset":8474}}},{"type":"raw","value":"<a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":114,"column":21,"offset":8474},"end":{"line":114,"column":128,"offset":8581}}},{"type":"text","value":"Fork CPP","position":{"start":{"line":114,"column":128,"offset":8581},"end":{"line":114,"column":136,"offset":8589}}},{"type":"raw","value":"</a>","position":{"start":{"line":114,"column":136,"offset":8589},"end":{"line":114,"column":140,"offset":8593}}},{"type":"text","value":" A good course for beginners.","position":{"start":{"line":114,"column":140,"offset":8593},"end":{"line":114,"column":169,"offset":8622}}},{"type":"raw","value":"</span>","position":{"start":{"line":114,"column":169,"offset":8622},"end":{"line":114,"column":176,"offset":8629}}}],"position":{"start":{"line":114,"column":1,"offset":8454},"end":{"line":114,"column":176,"offset":8629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6d47\">","position":{"start":{"line":115,"column":5,"offset":8634},"end":{"line":115,"column":21,"offset":8650}}},{"type":"raw","value":"<a href=\"https://codeforces.com/edu/course/2\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":115,"column":21,"offset":8650},"end":{"line":115,"column":108,"offset":8737}}},{"type":"text","value":"EDU","position":{"start":{"line":115,"column":108,"offset":8737},"end":{"line":115,"column":111,"offset":8740}}},{"type":"raw","value":"</a>","position":{"start":{"line":115,"column":111,"offset":8740},"end":{"line":115,"column":115,"offset":8744}}},{"type":"text","value":" Advanced course.","position":{"start":{"line":115,"column":115,"offset":8744},"end":{"line":115,"column":132,"offset":8761}}},{"type":"raw","value":"</span>","position":{"start":{"line":115,"column":132,"offset":8761},"end":{"line":115,"column":139,"offset":8768}}}],"position":{"start":{"line":115,"column":1,"offset":8630},"end":{"line":115,"column":139,"offset":8768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8bb5\">","position":{"start":{"line":116,"column":5,"offset":8773},"end":{"line":116,"column":21,"offset":8789}}},{"type":"raw","value":"<a href=\"https://www.udacity.com/course/c-for-programmers--ud210\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":116,"column":21,"offset":8789},"end":{"line":116,"column":128,"offset":8896}}},{"type":"text","value":"C++ For Programmers","position":{"start":{"line":116,"column":128,"offset":8896},"end":{"line":116,"column":147,"offset":8915}}},{"type":"raw","value":"</a>","position":{"start":{"line":116,"column":147,"offset":8915},"end":{"line":116,"column":151,"offset":8919}}},{"type":"text","value":" Learn features and constructs for C++.","position":{"start":{"line":116,"column":151,"offset":8919},"end":{"line":116,"column":190,"offset":8958}}},{"type":"raw","value":"</span>","position":{"start":{"line":116,"column":190,"offset":8958},"end":{"line":116,"column":197,"offset":8965}}}],"position":{"start":{"line":116,"column":1,"offset":8769},"end":{"line":116,"column":197,"offset":8965}}},{"type":"text","value":"\n"}],"position":{"start":{"line":112,"column":1,"offset":7750},"end":{"line":116,"column":197,"offset":8965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Guides","position":{"start":{"line":118,"column":6,"offset":8972},"end":{"line":118,"column":12,"offset":8978}}}],"position":{"start":{"line":118,"column":1,"offset":8967},"end":{"line":118,"column":12,"offset":8978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e9e9\">","position":{"start":{"line":120,"column":5,"offset":8984},"end":{"line":120,"column":21,"offset":9000}}},{"type":"raw","value":"<a href=\"http://www.geeksforgeeks.org/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":120,"column":21,"offset":9000},"end":{"line":120,"column":102,"offset":9081}}},{"type":"text","value":"GeeksForGeeks — A CS portal for geeks","position":{"start":{"line":120,"column":102,"offset":9081},"end":{"line":120,"column":139,"offset":9118}}},{"type":"raw","value":"</a>","position":{"start":{"line":120,"column":139,"offset":9118},"end":{"line":120,"column":143,"offset":9122}}},{"type":"raw","value":"</span>","position":{"start":{"line":120,"column":143,"offset":9122},"end":{"line":120,"column":150,"offset":9129}}}],"position":{"start":{"line":120,"column":1,"offset":8980},"end":{"line":120,"column":150,"offset":9129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a228\">","position":{"start":{"line":121,"column":5,"offset":9134},"end":{"line":121,"column":21,"offset":9150}}},{"type":"raw","value":"<a href=\"https://www.learneroo.com/subjects/8\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":121,"column":21,"offset":9150},"end":{"line":121,"column":109,"offset":9238}}},{"type":"text","value":"Learneroo — Algorithms","position":{"start":{"line":121,"column":109,"offset":9238},"end":{"line":121,"column":131,"offset":9260}}},{"type":"raw","value":"</a>","position":{"start":{"line":121,"column":131,"offset":9260},"end":{"line":121,"column":135,"offset":9264}}},{"type":"raw","value":"</span>","position":{"start":{"line":121,"column":135,"offset":9264},"end":{"line":121,"column":142,"offset":9271}}}],"position":{"start":{"line":121,"column":1,"offset":9130},"end":{"line":121,"column":142,"offset":9271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a2f0\">","position":{"start":{"line":122,"column":5,"offset":9276},"end":{"line":122,"column":21,"offset":9292}}},{"type":"raw","value":"<a href=\"http://www.topcoder.com/tc?d1=tutorials&amp;d2=alg_index&amp;module=Static\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":122,"column":21,"offset":9292},"end":{"line":122,"column":147,"offset":9418}}},{"type":"text","value":"Top Coder tutorials","position":{"start":{"line":122,"column":147,"offset":9418},"end":{"line":122,"column":166,"offset":9437}}},{"type":"raw","value":"</a>","position":{"start":{"line":122,"column":166,"offset":9437},"end":{"line":122,"column":170,"offset":9441}}},{"type":"raw","value":"</span>","position":{"start":{"line":122,"column":170,"offset":9441},"end":{"line":122,"column":177,"offset":9448}}}],"position":{"start":{"line":122,"column":1,"offset":9272},"end":{"line":122,"column":177,"offset":9448}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f3ec\">","position":{"start":{"line":123,"column":5,"offset":9453},"end":{"line":123,"column":21,"offset":9469}}},{"type":"raw","value":"<a href=\"http://www.infoarena.ro/training-path\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":123,"column":21,"offset":9469},"end":{"line":123,"column":110,"offset":9558}}},{"type":"text","value":"Infoarena training path","position":{"start":{"line":123,"column":110,"offset":9558},"end":{"line":123,"column":133,"offset":9581}}},{"type":"raw","value":"</a>","position":{"start":{"line":123,"column":133,"offset":9581},"end":{"line":123,"column":137,"offset":9585}}},{"type":"text","value":" (RO)","position":{"start":{"line":123,"column":137,"offset":9585},"end":{"line":123,"column":142,"offset":9590}}},{"type":"raw","value":"</span>","position":{"start":{"line":123,"column":142,"offset":9590},"end":{"line":123,"column":149,"offset":9597}}}],"position":{"start":{"line":123,"column":1,"offset":9449},"end":{"line":123,"column":149,"offset":9597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ec93\">","position":{"start":{"line":124,"column":5,"offset":9602},"end":{"line":124,"column":21,"offset":9618}}},{"type":"text","value":"Steven & Felix Halim — ","position":{"start":{"line":124,"column":21,"offset":9618},"end":{"line":124,"column":44,"offset":9641}}},{"type":"raw","value":"<a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=118\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":124,"column":44,"offset":9641},"end":{"line":124,"column":186,"offset":9783}}},{"type":"text","value":"Increasing the Lower Bound of Programming Contests","position":{"start":{"line":124,"column":186,"offset":9783},"end":{"line":124,"column":236,"offset":9833}}},{"type":"raw","value":"</a>","position":{"start":{"line":124,"column":236,"offset":9833},"end":{"line":124,"column":240,"offset":9837}}},{"type":"text","value":" (UVA Online Judge)","position":{"start":{"line":124,"column":240,"offset":9837},"end":{"line":124,"column":259,"offset":9856}}},{"type":"raw","value":"</span>","position":{"start":{"line":124,"column":259,"offset":9856},"end":{"line":124,"column":266,"offset":9863}}}],"position":{"start":{"line":124,"column":1,"offset":9598},"end":{"line":124,"column":266,"offset":9863}}},{"type":"text","value":"\n"}],"position":{"start":{"line":120,"column":1,"offset":8980},"end":{"line":124,"column":266,"offset":9863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"space","position":{"start":{"line":126,"column":8,"offset":9872},"end":{"line":126,"column":13,"offset":9877}}}],"position":{"start":{"line":126,"column":7,"offset":9871},"end":{"line":126,"column":14,"offset":9878}}}],"position":{"start":{"line":126,"column":5,"offset":9869},"end":{"line":126,"column":16,"offset":9880}}}],"position":{"start":{"line":126,"column":1,"offset":9865},"end":{"line":126,"column":16,"offset":9880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.","position":{"start":{"line":128,"column":4,"offset":9885},"end":{"line":128,"column":250,"offset":10131}}}],"position":{"start":{"line":128,"column":3,"offset":9884},"end":{"line":128,"column":251,"offset":10132}}}],"position":{"start":{"line":128,"column":3,"offset":9884},"end":{"line":128,"column":251,"offset":10132}}},{"type":"text","value":"\n"}],"position":{"start":{"line":128,"column":1,"offset":9882},"end":{"line":128,"column":251,"offset":10132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"time","position":{"start":{"line":130,"column":6,"offset":10139},"end":{"line":130,"column":10,"offset":10143}}}],"position":{"start":{"line":130,"column":5,"offset":10138},"end":{"line":130,"column":11,"offset":10144}}}],"position":{"start":{"line":130,"column":1,"offset":10134},"end":{"line":130,"column":11,"offset":10144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The time complexity for a data structure is in general more diverse than its space complexity.","position":{"start":{"line":132,"column":4,"offset":10149},"end":{"line":132,"column":98,"offset":10243}}}],"position":{"start":{"line":132,"column":3,"offset":10148},"end":{"line":132,"column":99,"offset":10244}}}],"position":{"start":{"line":132,"column":3,"offset":10148},"end":{"line":132,"column":99,"offset":10244}}},{"type":"text","value":"\n"}],"position":{"start":{"line":132,"column":1,"offset":10146},"end":{"line":132,"column":99,"offset":10244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Several operations","position":{"start":{"line":134,"column":6,"offset":10251},"end":{"line":134,"column":24,"offset":10269}}}],"position":{"start":{"line":134,"column":5,"offset":10250},"end":{"line":134,"column":25,"offset":10270}}}],"position":{"start":{"line":134,"column":1,"offset":10246},"end":{"line":134,"column":25,"offset":10270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.","position":{"start":{"line":136,"column":4,"offset":10275},"end":{"line":136,"column":272,"offset":10543}}}],"position":{"start":{"line":136,"column":3,"offset":10274},"end":{"line":136,"column":273,"offset":10544}}}],"position":{"start":{"line":136,"column":3,"offset":10274},"end":{"line":136,"column":273,"offset":10544}}},{"type":"text","value":"\n"}],"position":{"start":{"line":136,"column":1,"offset":10272},"end":{"line":136,"column":273,"offset":10544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Dependent on data","position":{"start":{"line":138,"column":6,"offset":10551},"end":{"line":138,"column":23,"offset":10568}}}],"position":{"start":{"line":138,"column":5,"offset":10550},"end":{"line":138,"column":24,"offset":10569}}}],"position":{"start":{"line":138,"column":1,"offset":10546},"end":{"line":138,"column":24,"offset":10569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.","position":{"start":{"line":140,"column":4,"offset":10574},"end":{"line":140,"column":342,"offset":10912}}}],"position":{"start":{"line":140,"column":3,"offset":10573},"end":{"line":140,"column":343,"offset":10913}}}],"position":{"start":{"line":140,"column":3,"offset":10573},"end":{"line":140,"column":343,"offset":10913}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":10571},"end":{"line":140,"column":343,"offset":10913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"bc8d\">","position":{"start":{"line":142,"column":5,"offset":10919},"end":{"line":142,"column":21,"offset":10935}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The best-case complexity: when the data looks the best","position":{"start":{"line":142,"column":23,"offset":10937},"end":{"line":142,"column":77,"offset":10991}}}],"position":{"start":{"line":142,"column":21,"offset":10935},"end":{"line":142,"column":79,"offset":10993}}},{"type":"raw","value":"</span>","position":{"start":{"line":142,"column":79,"offset":10993},"end":{"line":142,"column":86,"offset":11000}}}],"position":{"start":{"line":142,"column":1,"offset":10915},"end":{"line":142,"column":86,"offset":11000}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8b06\">","position":{"start":{"line":143,"column":5,"offset":11005},"end":{"line":143,"column":21,"offset":11021}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The worst-case complexity: when the data looks the worst","position":{"start":{"line":143,"column":23,"offset":11023},"end":{"line":143,"column":79,"offset":11079}}}],"position":{"start":{"line":143,"column":21,"offset":11021},"end":{"line":143,"column":81,"offset":11081}}},{"type":"raw","value":"</span>","position":{"start":{"line":143,"column":81,"offset":11081},"end":{"line":143,"column":88,"offset":11088}}}],"position":{"start":{"line":143,"column":1,"offset":11001},"end":{"line":143,"column":88,"offset":11088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"881c\">","position":{"start":{"line":144,"column":5,"offset":11093},"end":{"line":144,"column":21,"offset":11109}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The average-case complexity: when the data looks average","position":{"start":{"line":144,"column":23,"offset":11111},"end":{"line":144,"column":79,"offset":11167}}}],"position":{"start":{"line":144,"column":21,"offset":11109},"end":{"line":144,"column":81,"offset":11169}}},{"type":"raw","value":"</span>","position":{"start":{"line":144,"column":81,"offset":11169},"end":{"line":144,"column":88,"offset":11176}}}],"position":{"start":{"line":144,"column":1,"offset":11089},"end":{"line":144,"column":88,"offset":11176}}},{"type":"text","value":"\n"}],"position":{"start":{"line":142,"column":1,"offset":10915},"end":{"line":144,"column":88,"offset":11176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Big O notation","position":{"start":{"line":146,"column":5,"offset":11182},"end":{"line":146,"column":19,"offset":11196}}}],"position":{"start":{"line":146,"column":1,"offset":11178},"end":{"line":146,"column":19,"offset":11196}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.","position":{"start":{"line":148,"column":1,"offset":11198},"end":{"line":148,"column":242,"offset":11439}}}],"position":{"start":{"line":148,"column":1,"offset":11198},"end":{"line":148,"column":242,"offset":11439}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Array data structure","position":{"start":{"line":150,"column":5,"offset":11445},"end":{"line":150,"column":29,"offset":11469}}}],"position":{"start":{"line":150,"column":1,"offset":11441},"end":{"line":150,"column":29,"offset":11469}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Qk3UYgeqXamRrFLR.gif\" class=\"graf-image\" /></figure>### Definition","position":{"start":{"line":152,"column":1,"offset":11471},"end":{"line":152,"column":127,"offset":11597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia","position":{"start":{"line":154,"column":1,"offset":11599},"end":{"line":154,"column":284,"offset":11882}}}],"position":{"start":{"line":154,"column":1,"offset":11599},"end":{"line":154,"column":284,"offset":11882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.","position":{"start":{"line":156,"column":1,"offset":11884},"end":{"line":156,"column":154,"offset":12037}}}],"position":{"start":{"line":156,"column":1,"offset":11884},"end":{"line":156,"column":154,"offset":12037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Complexity","position":{"start":{"line":158,"column":2,"offset":12040},"end":{"line":158,"column":12,"offset":12050}}}],"position":{"start":{"line":158,"column":1,"offset":12039},"end":{"line":158,"column":13,"offset":12051}}},{"type":"text","value":"\n","position":{"start":{"line":158,"column":13,"offset":12051},"end":{"line":159,"column":1,"offset":12052}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Average","position":{"start":{"line":159,"column":2,"offset":12053},"end":{"line":159,"column":9,"offset":12060}}}],"position":{"start":{"line":159,"column":1,"offset":12052},"end":{"line":159,"column":10,"offset":12061}}},{"type":"text","value":"\n","position":{"start":{"line":159,"column":10,"offset":12061},"end":{"line":160,"column":1,"offset":12062}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Access Search Insertion Deletion","position":{"start":{"line":160,"column":2,"offset":12063},"end":{"line":160,"column":34,"offset":12095}}}],"position":{"start":{"line":160,"column":1,"offset":12062},"end":{"line":160,"column":35,"offset":12096}}}],"position":{"start":{"line":158,"column":1,"offset":12039},"end":{"line":160,"column":35,"offset":12096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"O(1) O(n) O(1) O(n)","position":{"start":{"line":162,"column":1,"offset":12098},"end":{"line":162,"column":20,"offset":12117}}}],"position":{"start":{"line":162,"column":1,"offset":12098},"end":{"line":162,"column":20,"offset":12117}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*-BJ2hU-CZO2kuzu4x5a53g.png\" class=\"graf-image\" /></figure>indexvalue0 … this is the first value, stored at zero position","position":{"start":{"line":164,"column":1,"offset":12119},"end":{"line":164,"column":181,"offset":12299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b953\">","position":{"start":{"line":166,"column":5,"offset":12305},"end":{"line":166,"column":21,"offset":12321}}},{"type":"text","value":"The index of an array ","position":{"start":{"line":166,"column":21,"offset":12321},"end":{"line":166,"column":43,"offset":12343}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"runs in sequence","position":{"start":{"line":166,"column":45,"offset":12345},"end":{"line":166,"column":61,"offset":12361}}}],"position":{"start":{"line":166,"column":43,"offset":12343},"end":{"line":166,"column":63,"offset":12363}}},{"type":"raw","value":"</span>","position":{"start":{"line":166,"column":63,"offset":12363},"end":{"line":166,"column":70,"offset":12370}}}],"position":{"start":{"line":166,"column":1,"offset":12301},"end":{"line":167,"column":1,"offset":12371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This could be useful for storing data that are required to be ordered, such as rankings or queues","position":{"start":{"line":168,"column":5,"offset":12376},"end":{"line":168,"column":102,"offset":12473}}}],"position":{"start":{"line":168,"column":1,"offset":12372},"end":{"line":169,"column":1,"offset":12474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects","position":{"start":{"line":170,"column":5,"offset":12479},"end":{"line":170,"column":142,"offset":12616}}}],"position":{"start":{"line":170,"column":1,"offset":12475},"end":{"line":170,"column":142,"offset":12616}}},{"type":"text","value":"\n"}],"position":{"start":{"line":166,"column":1,"offset":12301},"end":{"line":170,"column":142,"offset":12616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. Objects","position":{"start":{"line":172,"column":5,"offset":12622},"end":{"line":172,"column":15,"offset":12632}}}],"position":{"start":{"line":172,"column":1,"offset":12618},"end":{"line":172,"column":15,"offset":12632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of objects as a logical grouping of a bunch of properties.","position":{"start":{"line":174,"column":1,"offset":12634},"end":{"line":174,"column":65,"offset":12698}}}],"position":{"start":{"line":174,"column":1,"offset":12634},"end":{"line":174,"column":65,"offset":12698}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Properties could be some variable that it's storing or some methods that it's using.","position":{"start":{"line":176,"column":1,"offset":12700},"end":{"line":176,"column":85,"offset":12784}}}],"position":{"start":{"line":176,"column":1,"offset":12700},"end":{"line":176,"column":85,"offset":12784}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I also visualize an object as a table.","position":{"start":{"line":178,"column":1,"offset":12786},"end":{"line":178,"column":39,"offset":12824}}}],"position":{"start":{"line":178,"column":1,"offset":12786},"end":{"line":178,"column":39,"offset":12824}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.","position":{"start":{"line":180,"column":1,"offset":12826},"end":{"line":180,"column":99,"offset":12924}}}],"position":{"start":{"line":180,"column":1,"offset":12826},"end":{"line":180,"column":99,"offset":12924}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*KVZkD2zrgEa_47igW8Hq8g.png\" class=\"graf-image\" /></figure>","position":{"start":{"line":182,"column":1,"offset":12926},"end":{"line":182,"column":120,"offset":13045}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Hash Table","position":{"start":{"line":184,"column":5,"offset":13051},"end":{"line":184,"column":19,"offset":13065}}}],"position":{"start":{"line":184,"column":1,"offset":13047},"end":{"line":184,"column":19,"offset":13065}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*avbxLAFocSV6vsl5.gif\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*3GJiRoLyEoZ_aIlO\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":186,"column":1,"offset":13067},"end":{"line":186,"column":237,"offset":13303}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia","position":{"start":{"line":188,"column":4,"offset":13308},"end":{"line":188,"column":275,"offset":13579}}}],"position":{"start":{"line":188,"column":3,"offset":13307},"end":{"line":188,"column":276,"offset":13580}}}],"position":{"start":{"line":188,"column":3,"offset":13307},"end":{"line":188,"column":276,"offset":13580}}},{"type":"text","value":"\n"}],"position":{"start":{"line":188,"column":1,"offset":13305},"end":{"line":188,"column":276,"offset":13580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.","position":{"start":{"line":190,"column":1,"offset":13582},"end":{"line":190,"column":115,"offset":13696}}}],"position":{"start":{"line":190,"column":1,"offset":13582},"end":{"line":190,"column":115,"offset":13696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":192,"column":1,"offset":13698},"end":{"line":194,"column":33,"offset":13749}}}],"position":{"start":{"line":192,"column":1,"offset":13698},"end":{"line":194,"column":33,"offset":13749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f63f\">","position":{"start":{"line":196,"column":5,"offset":13755},"end":{"line":196,"column":21,"offset":13771}}},{"type":"text","value":"O(1) O(1) O(1)","position":{"start":{"line":196,"column":21,"offset":13771},"end":{"line":196,"column":35,"offset":13785}}},{"type":"raw","value":"</span>","position":{"start":{"line":196,"column":35,"offset":13785},"end":{"line":196,"column":42,"offset":13792}}}],"position":{"start":{"line":196,"column":1,"offset":13751},"end":{"line":196,"column":42,"offset":13792}}},{"type":"text","value":"\n"}],"position":{"start":{"line":196,"column":1,"offset":13751},"end":{"line":196,"column":42,"offset":13792}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":198,"column":4,"offset":13797},"end":{"line":198,"column":12,"offset":13805}}}],"position":{"start":{"line":198,"column":3,"offset":13796},"end":{"line":198,"column":13,"offset":13806}}}],"position":{"start":{"line":198,"column":3,"offset":13796},"end":{"line":198,"column":13,"offset":13806}}},{"type":"text","value":"\n"}],"position":{"start":{"line":198,"column":1,"offset":13794},"end":{"line":198,"column":13,"offset":13806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note, here I am storing another object for every hash in my Hash Table.","position":{"start":{"line":200,"column":1,"offset":13808},"end":{"line":200,"column":72,"offset":13879}}}],"position":{"start":{"line":200,"column":1,"offset":13808},"end":{"line":200,"column":72,"offset":13879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Set","position":{"start":{"line":202,"column":5,"offset":13885},"end":{"line":202,"column":12,"offset":13892}}}],"position":{"start":{"line":202,"column":1,"offset":13881},"end":{"line":202,"column":12,"offset":13892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sets","position":{"start":{"line":204,"column":5,"offset":13898},"end":{"line":204,"column":9,"offset":13902}}}],"position":{"start":{"line":204,"column":1,"offset":13894},"end":{"line":204,"column":9,"offset":13902}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.","position":{"start":{"line":206,"column":1,"offset":13904},"end":{"line":206,"column":124,"offset":14027}}}],"position":{"start":{"line":206,"column":1,"offset":13904},"end":{"line":206,"column":124,"offset":14027}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AIQljh9p8Baw9TnE.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*gOE33ANZP2ujbjIG\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":208,"column":1,"offset":14029},"end":{"line":208,"column":237,"offset":14265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia","position":{"start":{"line":210,"column":4,"offset":14270},"end":{"line":210,"column":211,"offset":14477}}}],"position":{"start":{"line":210,"column":3,"offset":14269},"end":{"line":210,"column":212,"offset":14478}}}],"position":{"start":{"line":210,"column":3,"offset":14269},"end":{"line":210,"column":212,"offset":14478}}},{"type":"text","value":"\n"}],"position":{"start":{"line":210,"column":1,"offset":14267},"end":{"line":210,"column":212,"offset":14478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…","position":{"start":{"line":212,"column":1,"offset":14480},"end":{"line":212,"column":239,"offset":14718}}}],"position":{"start":{"line":212,"column":1,"offset":14480},"end":{"line":212,"column":239,"offset":14718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":214,"column":1,"offset":14720},"end":{"line":216,"column":33,"offset":14771}}}],"position":{"start":{"line":214,"column":1,"offset":14720},"end":{"line":216,"column":33,"offset":14771}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"daa6\">","position":{"start":{"line":218,"column":5,"offset":14777},"end":{"line":218,"column":21,"offset":14793}}},{"type":"text","value":"O(n) O(n) O(n)","position":{"start":{"line":218,"column":21,"offset":14793},"end":{"line":218,"column":35,"offset":14807}}},{"type":"raw","value":"</span>","position":{"start":{"line":218,"column":35,"offset":14807},"end":{"line":218,"column":42,"offset":14814}}}],"position":{"start":{"line":218,"column":1,"offset":14773},"end":{"line":218,"column":42,"offset":14814}}},{"type":"text","value":"\n"}],"position":{"start":{"line":218,"column":1,"offset":14773},"end":{"line":218,"column":42,"offset":14814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":220,"column":4,"offset":14819},"end":{"line":220,"column":12,"offset":14827}}}],"position":{"start":{"line":220,"column":3,"offset":14818},"end":{"line":220,"column":13,"offset":14828}}}],"position":{"start":{"line":220,"column":3,"offset":14818},"end":{"line":220,"column":13,"offset":14828}}},{"type":"text","value":"\n"}],"position":{"start":{"line":220,"column":1,"offset":14816},"end":{"line":220,"column":13,"offset":14828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Singly Linked List","position":{"start":{"line":222,"column":5,"offset":14834},"end":{"line":222,"column":27,"offset":14856}}}],"position":{"start":{"line":222,"column":1,"offset":14830},"end":{"line":222,"column":27,"offset":14856}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fLs64rV-Xq19aVCA.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":224,"column":1,"offset":14858},"end":{"line":224,"column":129,"offset":14986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.","position":{"start":{"line":226,"column":4,"offset":14991},"end":{"line":226,"column":346,"offset":15333}}}],"position":{"start":{"line":226,"column":3,"offset":14990},"end":{"line":226,"column":347,"offset":15334}}}],"position":{"start":{"line":226,"column":3,"offset":14990},"end":{"line":226,"column":347,"offset":15334}}},{"type":"text","value":"\n"}],"position":{"start":{"line":226,"column":1,"offset":14988},"end":{"line":226,"column":347,"offset":15334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.","position":{"start":{"line":228,"column":1,"offset":15336},"end":{"line":228,"column":168,"offset":15503}}}],"position":{"start":{"line":228,"column":1,"offset":15336},"end":{"line":228,"column":168,"offset":15503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":230,"column":1,"offset":15505},"end":{"line":233,"column":20,"offset":15576}}}],"position":{"start":{"line":230,"column":1,"offset":15505},"end":{"line":233,"column":20,"offset":15576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":235,"column":4,"offset":15581},"end":{"line":235,"column":12,"offset":15589}}}],"position":{"start":{"line":235,"column":3,"offset":15580},"end":{"line":235,"column":13,"offset":15590}}}],"position":{"start":{"line":235,"column":3,"offset":15580},"end":{"line":235,"column":13,"offset":15590}}},{"type":"text","value":"\n"}],"position":{"start":{"line":235,"column":1,"offset":15578},"end":{"line":235,"column":13,"offset":15590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":237,"column":1,"offset":15592},"end":{"line":237,"column":4,"offset":15595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Doubly Linked List","position":{"start":{"line":239,"column":5,"offset":15601},"end":{"line":239,"column":27,"offset":15623}}}],"position":{"start":{"line":239,"column":1,"offset":15597},"end":{"line":239,"column":27,"offset":15623}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TQXiR-L_itiG3WP-.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":241,"column":1,"offset":15625},"end":{"line":241,"column":129,"offset":15753}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia","position":{"start":{"line":243,"column":4,"offset":15758},"end":{"line":243,"column":262,"offset":16016}}}],"position":{"start":{"line":243,"column":3,"offset":15757},"end":{"line":243,"column":263,"offset":16017}}}],"position":{"start":{"line":243,"column":3,"offset":15757},"end":{"line":243,"column":263,"offset":16017}}},{"type":"text","value":"\n"}],"position":{"start":{"line":243,"column":1,"offset":15755},"end":{"line":243,"column":263,"offset":16017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.","position":{"start":{"line":245,"column":1,"offset":16019},"end":{"line":245,"column":191,"offset":16209}}}],"position":{"start":{"line":245,"column":1,"offset":16019},"end":{"line":245,"column":191,"offset":16209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":247,"column":1,"offset":16211},"end":{"line":250,"column":20,"offset":16282}}}],"position":{"start":{"line":247,"column":1,"offset":16211},"end":{"line":250,"column":20,"offset":16282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":252,"column":4,"offset":16287},"end":{"line":252,"column":12,"offset":16295}}}],"position":{"start":{"line":252,"column":3,"offset":16286},"end":{"line":252,"column":13,"offset":16296}}}],"position":{"start":{"line":252,"column":3,"offset":16286},"end":{"line":252,"column":13,"offset":16296}}},{"type":"text","value":"\n"}],"position":{"start":{"line":252,"column":1,"offset":16284},"end":{"line":252,"column":13,"offset":16296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Stack","position":{"start":{"line":254,"column":5,"offset":16302},"end":{"line":254,"column":14,"offset":16311}}}],"position":{"start":{"line":254,"column":1,"offset":16298},"end":{"line":254,"column":14,"offset":16311}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*qsjYW-Lvfo22ecLE.gif\" class=\"graf-image\" /></figure>","position":{"start":{"line":256,"column":1,"offset":16313},"end":{"line":256,"column":114,"offset":16426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Definition","position":{"start":{"line":258,"column":6,"offset":16433},"end":{"line":258,"column":16,"offset":16443}}}],"position":{"start":{"line":258,"column":5,"offset":16432},"end":{"line":258,"column":17,"offset":16444}}}],"position":{"start":{"line":258,"column":1,"offset":16428},"end":{"line":258,"column":17,"offset":16444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia","position":{"start":{"line":260,"column":4,"offset":16449},"end":{"line":260,"column":363,"offset":16808}}}],"position":{"start":{"line":260,"column":3,"offset":16448},"end":{"line":260,"column":364,"offset":16809}}}],"position":{"start":{"line":260,"column":3,"offset":16448},"end":{"line":260,"column":364,"offset":16809}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":16446},"end":{"line":260,"column":364,"offset":16809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A Stack often has a third method peek which allows to check the last pushed element without popping it.","position":{"start":{"line":262,"column":1,"offset":16811},"end":{"line":262,"column":104,"offset":16914}}}],"position":{"start":{"line":262,"column":1,"offset":16811},"end":{"line":262,"column":104,"offset":16914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":264,"column":1,"offset":16916},"end":{"line":267,"column":20,"offset":16987}}}],"position":{"start":{"line":264,"column":1,"offset":16916},"end":{"line":267,"column":20,"offset":16987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":269,"column":4,"offset":16992},"end":{"line":269,"column":12,"offset":17000}}}],"position":{"start":{"line":269,"column":3,"offset":16991},"end":{"line":269,"column":13,"offset":17001}}}],"position":{"start":{"line":269,"column":3,"offset":16991},"end":{"line":269,"column":13,"offset":17001}}},{"type":"text","value":"\n"}],"position":{"start":{"line":269,"column":1,"offset":16989},"end":{"line":269,"column":13,"offset":17001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Queue","position":{"start":{"line":271,"column":5,"offset":17007},"end":{"line":271,"column":14,"offset":17016}}}],"position":{"start":{"line":271,"column":1,"offset":17003},"end":{"line":271,"column":14,"offset":17016}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YvfuX5tKP7-V0p7v.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":273,"column":1,"offset":17018},"end":{"line":273,"column":129,"offset":17146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.","position":{"start":{"line":275,"column":4,"offset":17151},"end":{"line":275,"column":474,"offset":17621}}}],"position":{"start":{"line":275,"column":3,"offset":17150},"end":{"line":275,"column":475,"offset":17622}}}],"position":{"start":{"line":275,"column":3,"offset":17150},"end":{"line":275,"column":475,"offset":17622}}},{"type":"text","value":"\n"}],"position":{"start":{"line":275,"column":1,"offset":17148},"end":{"line":275,"column":475,"offset":17622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.","position":{"start":{"line":277,"column":1,"offset":17624},"end":{"line":277,"column":158,"offset":17781}}}],"position":{"start":{"line":277,"column":1,"offset":17624},"end":{"line":277,"column":158,"offset":17781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)","position":{"start":{"line":279,"column":1,"offset":17783},"end":{"line":282,"column":20,"offset":17854}}}],"position":{"start":{"line":279,"column":1,"offset":17783},"end":{"line":282,"column":20,"offset":17854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":284,"column":4,"offset":17859},"end":{"line":284,"column":12,"offset":17867}}}],"position":{"start":{"line":284,"column":3,"offset":17858},"end":{"line":284,"column":13,"offset":17868}}}],"position":{"start":{"line":284,"column":3,"offset":17858},"end":{"line":284,"column":13,"offset":17868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":284,"column":1,"offset":17856},"end":{"line":284,"column":13,"offset":17868}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Tree","position":{"start":{"line":286,"column":5,"offset":17874},"end":{"line":286,"column":13,"offset":17882}}}],"position":{"start":{"line":286,"column":1,"offset":17870},"end":{"line":286,"column":13,"offset":17882}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*yUiQ-NaPKeLQnN7n\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":288,"column":1,"offset":17884},"end":{"line":288,"column":125,"offset":18008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia","position":{"start":{"line":290,"column":4,"offset":18013},"end":{"line":290,"column":476,"offset":18485}}}],"position":{"start":{"line":290,"column":3,"offset":18012},"end":{"line":290,"column":477,"offset":18486}}}],"position":{"start":{"line":290,"column":3,"offset":18012},"end":{"line":290,"column":477,"offset":18486}}},{"type":"text","value":"\n"}],"position":{"start":{"line":290,"column":1,"offset":18010},"end":{"line":290,"column":477,"offset":18486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.","position":{"start":{"line":292,"column":1,"offset":18488},"end":{"line":296,"column":133,"offset":18692}}}],"position":{"start":{"line":292,"column":1,"offset":18488},"end":{"line":296,"column":133,"offset":18692}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*DCdQiB6XqBJCrFRz12BwqA.png\" class=\"graf-image\" /></figure>*The code*","position":{"start":{"line":298,"column":1,"offset":18694},"end":{"line":298,"column":129,"offset":18822}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Graph","position":{"start":{"line":300,"column":5,"offset":18828},"end":{"line":300,"column":14,"offset":18837}}}],"position":{"start":{"line":300,"column":1,"offset":18824},"end":{"line":300,"column":14,"offset":18837}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*q31mL1kjFWlIzw3l.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":302,"column":1,"offset":18839},"end":{"line":302,"column":129,"offset":18967}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references.","position":{"start":{"line":304,"column":4,"offset":18972},"end":{"line":304,"column":515,"offset":19483}}}],"position":{"start":{"line":304,"column":3,"offset":18971},"end":{"line":304,"column":516,"offset":19484}}}],"position":{"start":{"line":304,"column":3,"offset":18971},"end":{"line":304,"column":516,"offset":19484}}},{"type":"text","value":"\n"}],"position":{"start":{"line":304,"column":1,"offset":18969},"end":{"line":304,"column":516,"offset":19484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f896\">","position":{"start":{"line":306,"column":5,"offset":19490},"end":{"line":306,"column":21,"offset":19506}}},{"type":"text","value":"A graph is ","position":{"start":{"line":306,"column":21,"offset":19506},"end":{"line":306,"column":32,"offset":19517}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"any","position":{"start":{"line":306,"column":34,"offset":19519},"end":{"line":306,"column":37,"offset":19522}}}],"position":{"start":{"line":306,"column":32,"offset":19517},"end":{"line":306,"column":39,"offset":19524}}},{"type":"text","value":" collection of nodes and edges.","position":{"start":{"line":306,"column":39,"offset":19524},"end":{"line":306,"column":70,"offset":19555}}},{"type":"raw","value":"</span>","position":{"start":{"line":306,"column":70,"offset":19555},"end":{"line":306,"column":77,"offset":19562}}}],"position":{"start":{"line":306,"column":1,"offset":19486},"end":{"line":306,"column":77,"offset":19562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fbda\">","position":{"start":{"line":307,"column":5,"offset":19567},"end":{"line":307,"column":21,"offset":19583}}},{"type":"text","value":"Much more relaxed in structure than a tree.","position":{"start":{"line":307,"column":21,"offset":19583},"end":{"line":307,"column":64,"offset":19626}}},{"type":"raw","value":"</span>","position":{"start":{"line":307,"column":64,"offset":19626},"end":{"line":307,"column":71,"offset":19633}}}],"position":{"start":{"line":307,"column":1,"offset":19563},"end":{"line":307,"column":71,"offset":19633}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"5281\">","position":{"start":{"line":308,"column":5,"offset":19638},"end":{"line":308,"column":21,"offset":19654}}},{"type":"text","value":"It doesn't need to have a root node (not every node needs to be accessible from a single node)","position":{"start":{"line":308,"column":21,"offset":19654},"end":{"line":308,"column":115,"offset":19748}}},{"type":"raw","value":"</span>","position":{"start":{"line":308,"column":115,"offset":19748},"end":{"line":308,"column":122,"offset":19755}}}],"position":{"start":{"line":308,"column":1,"offset":19634},"end":{"line":308,"column":122,"offset":19755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"0c79\">","position":{"start":{"line":309,"column":5,"offset":19760},"end":{"line":309,"column":21,"offset":19776}}},{"type":"text","value":"It can have cycles (a group of nodes whose paths begin and end at the same node)","position":{"start":{"line":309,"column":21,"offset":19776},"end":{"line":309,"column":101,"offset":19856}}},{"type":"raw","value":"</span>","position":{"start":{"line":309,"column":101,"offset":19856},"end":{"line":309,"column":108,"offset":19863}}}],"position":{"start":{"line":309,"column":1,"offset":19756},"end":{"line":309,"column":108,"offset":19863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"4afc\">","position":{"start":{"line":310,"column":5,"offset":19868},"end":{"line":310,"column":21,"offset":19884}}},{"type":"text","value":"Cycles are not always \"isolated\", they can be one part of a larger graph. You can detect them by starting your search on a specific node and finding a path that takes you back to that same node.","position":{"start":{"line":310,"column":21,"offset":19884},"end":{"line":310,"column":215,"offset":20078}}},{"type":"raw","value":"</span>","position":{"start":{"line":310,"column":215,"offset":20078},"end":{"line":310,"column":222,"offset":20085}}}],"position":{"start":{"line":310,"column":1,"offset":19864},"end":{"line":310,"column":222,"offset":20085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8f45\">","position":{"start":{"line":311,"column":5,"offset":20090},"end":{"line":311,"column":21,"offset":20106}}},{"type":"text","value":"Any number of edges may leave a given node","position":{"start":{"line":311,"column":21,"offset":20106},"end":{"line":311,"column":63,"offset":20148}}},{"type":"raw","value":"</span>","position":{"start":{"line":311,"column":63,"offset":20148},"end":{"line":311,"column":70,"offset":20155}}}],"position":{"start":{"line":311,"column":1,"offset":20086},"end":{"line":311,"column":70,"offset":20155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"51cf\">","position":{"start":{"line":312,"column":5,"offset":20160},"end":{"line":312,"column":21,"offset":20176}}},{"type":"text","value":"A Path is a sequence of nodes on a graph","position":{"start":{"line":312,"column":21,"offset":20176},"end":{"line":312,"column":61,"offset":20216}}},{"type":"raw","value":"</span>","position":{"start":{"line":312,"column":61,"offset":20216},"end":{"line":312,"column":68,"offset":20223}}}],"position":{"start":{"line":312,"column":1,"offset":20156},"end":{"line":312,"column":68,"offset":20223}}},{"type":"text","value":"\n"}],"position":{"start":{"line":306,"column":1,"offset":19486},"end":{"line":312,"column":68,"offset":20223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cycle Visual","position":{"start":{"line":314,"column":5,"offset":20229},"end":{"line":314,"column":17,"offset":20241}}}],"position":{"start":{"line":314,"column":1,"offset":20225},"end":{"line":314,"column":17,"offset":20241}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*dn1BqCdXdFg4FCVSz6uArA.png\" class=\"graf-image\" /></figure>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).","position":{"start":{"line":316,"column":1,"offset":20243},"end":{"line":316,"column":270,"offset":20512}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:","position":{"start":{"line":318,"column":1,"offset":20514},"end":{"line":319,"column":127,"offset":20655}}}],"position":{"start":{"line":318,"column":1,"offset":20514},"end":{"line":319,"column":127,"offset":20655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.","position":{"start":{"line":321,"column":1,"offset":20657},"end":{"line":322,"column":213,"offset":21075}}}],"position":{"start":{"line":321,"column":1,"offset":20657},"end":{"line":322,"column":213,"offset":21075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graph","position":{"start":{"line":324,"column":1,"offset":21077},"end":{"line":324,"column":6,"offset":21082}}}],"position":{"start":{"line":324,"column":1,"offset":21077},"end":{"line":324,"column":6,"offset":21082}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":326,"column":4,"offset":21087},"end":{"line":326,"column":12,"offset":21095}}}],"position":{"start":{"line":326,"column":3,"offset":21086},"end":{"line":326,"column":13,"offset":21096}}}],"position":{"start":{"line":326,"column":3,"offset":21086},"end":{"line":326,"column":13,"offset":21096}}},{"type":"text","value":"\n"}],"position":{"start":{"line":326,"column":1,"offset":21084},"end":{"line":326,"column":13,"offset":21096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":328,"column":1,"offset":21098},"end":{"line":328,"column":4,"offset":21101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Leetcode","position":{"start":{"line":330,"column":3,"offset":21105},"end":{"line":330,"column":11,"offset":21113}}}],"position":{"start":{"line":330,"column":1,"offset":21103},"end":{"line":330,"column":11,"offset":21113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Data Structures & Algorithms","position":{"start":{"line":332,"column":4,"offset":21118},"end":{"line":332,"column":32,"offset":21146}}}],"position":{"start":{"line":332,"column":1,"offset":21115},"end":{"line":332,"column":32,"offset":21146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/Data-Structures-Algos-Codebase"},"children":[{"type":"text","value":"DS Algo Codebase","position":{"start":{"line":334,"column":2,"offset":21149},"end":{"line":334,"column":18,"offset":21165}}}],"position":{"start":{"line":334,"column":1,"offset":21148},"end":{"line":334,"column":77,"offset":21224}}}],"position":{"start":{"line":334,"column":1,"offset":21148},"end":{"line":334,"column":77,"offset":21224}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequencesdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":336,"column":2,"offset":21227},"end":{"line":336,"column":142,"offset":21367}}}],"position":{"start":{"line":336,"column":1,"offset":21226},"end":{"line":336,"column":227,"offset":21452}}}],"position":{"start":{"line":336,"column":1,"offset":21226},"end":{"line":336,"column":227,"offset":21452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":338,"column":4,"offset":21457},"end":{"line":338,"column":6,"offset":21459}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/distinct-subsequences/description/"},"children":[{"type":"text","value":"115. Distinct Subsequences","position":{"start":{"line":338,"column":7,"offset":21460},"end":{"line":338,"column":33,"offset":21486}}}],"position":{"start":{"line":338,"column":6,"offset":21459},"end":{"line":338,"column":100,"offset":21553}}}],"position":{"start":{"line":338,"column":1,"offset":21454},"end":{"line":338,"column":100,"offset":21553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":340,"column":5,"offset":21559},"end":{"line":340,"column":13,"offset":21567}}}],"position":{"start":{"line":340,"column":1,"offset":21555},"end":{"line":340,"column":13,"offset":21567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string ","position":{"start":{"line":342,"column":1,"offset":21569},"end":{"line":342,"column":16,"offset":21584}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":342,"column":18,"offset":21586},"end":{"line":342,"column":19,"offset":21587}}}],"position":{"start":{"line":342,"column":16,"offset":21584},"end":{"line":342,"column":21,"offset":21589}}},{"type":"text","value":" and a string ","position":{"start":{"line":342,"column":21,"offset":21589},"end":{"line":342,"column":35,"offset":21603}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":342,"column":37,"offset":21605},"end":{"line":342,"column":38,"offset":21606}}}],"position":{"start":{"line":342,"column":35,"offset":21603},"end":{"line":342,"column":40,"offset":21608}}},{"type":"text","value":", count the number of distinct subsequences of ","position":{"start":{"line":342,"column":40,"offset":21608},"end":{"line":342,"column":87,"offset":21655}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":342,"column":89,"offset":21657},"end":{"line":342,"column":90,"offset":21658}}}],"position":{"start":{"line":342,"column":87,"offset":21655},"end":{"line":342,"column":92,"offset":21660}}},{"type":"text","value":" which equals ","position":{"start":{"line":342,"column":92,"offset":21660},"end":{"line":342,"column":106,"offset":21674}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":342,"column":108,"offset":21676},"end":{"line":342,"column":109,"offset":21677}}}],"position":{"start":{"line":342,"column":106,"offset":21674},"end":{"line":342,"column":111,"offset":21679}}},{"type":"text","value":".","position":{"start":{"line":342,"column":111,"offset":21679},"end":{"line":342,"column":112,"offset":21680}}}],"position":{"start":{"line":342,"column":1,"offset":21569},"end":{"line":342,"column":112,"offset":21680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, ","position":{"start":{"line":344,"column":1,"offset":21682},"end":{"line":344,"column":209,"offset":21890}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ACE\""}],"position":{"start":{"line":344,"column":209,"offset":21890},"end":{"line":344,"column":216,"offset":21897}}},{"type":"text","value":" is a subsequence of ","position":{"start":{"line":344,"column":216,"offset":21897},"end":{"line":344,"column":237,"offset":21918}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ABCDE\""}],"position":{"start":{"line":344,"column":237,"offset":21918},"end":{"line":344,"column":246,"offset":21927}}},{"type":"text","value":" while ","position":{"start":{"line":344,"column":246,"offset":21927},"end":{"line":344,"column":253,"offset":21934}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"AEC\""}],"position":{"start":{"line":344,"column":253,"offset":21934},"end":{"line":344,"column":260,"offset":21941}}},{"type":"text","value":" is not).","position":{"start":{"line":344,"column":260,"offset":21941},"end":{"line":344,"column":269,"offset":21950}}}],"position":{"start":{"line":344,"column":1,"offset":21682},"end":{"line":344,"column":269,"offset":21950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":346,"column":3,"offset":21954},"end":{"line":346,"column":13,"offset":21964}}}],"position":{"start":{"line":346,"column":1,"offset":21952},"end":{"line":346,"column":15,"offset":21966}}}],"position":{"start":{"line":346,"column":1,"offset":21952},"end":{"line":346,"column":15,"offset":21966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n"}],"position":{"start":{"line":348,"column":1,"offset":21968},"end":{"line":360,"column":12,"offset":22232}}}],"position":{"start":{"line":348,"column":1,"offset":21968},"end":{"line":360,"column":12,"offset":22232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":362,"column":3,"offset":22236},"end":{"line":362,"column":13,"offset":22246}}}],"position":{"start":{"line":362,"column":1,"offset":22234},"end":{"line":362,"column":15,"offset":22248}}}],"position":{"start":{"line":362,"column":1,"offset":22234},"end":{"line":362,"column":15,"offset":22248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n"}],"position":{"start":{"line":364,"column":1,"offset":22250},"end":{"line":380,"column":12,"offset":22553}}}],"position":{"start":{"line":364,"column":1,"offset":22250},"end":{"line":380,"column":12,"offset":22553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":382,"column":5,"offset":22559},"end":{"line":382,"column":14,"offset":22568}}}],"position":{"start":{"line":382,"column":1,"offset":22555},"end":{"line":382,"column":14,"offset":22568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":384,"column":1,"offset":22570},"end":{"line":384,"column":8,"offset":22577}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":384,"column":8,"offset":22577},"end":{"line":384,"column":17,"offset":22586}}},{"type":"text","value":" to be the number of ways that generate ","position":{"start":{"line":384,"column":17,"offset":22586},"end":{"line":384,"column":57,"offset":22626}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T[0...j)"}],"position":{"start":{"line":384,"column":57,"offset":22626},"end":{"line":384,"column":67,"offset":22636}}},{"type":"text","value":" from ","position":{"start":{"line":384,"column":67,"offset":22636},"end":{"line":384,"column":73,"offset":22642}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[0...i)"}],"position":{"start":{"line":384,"column":73,"offset":22642},"end":{"line":384,"column":83,"offset":22652}}},{"type":"text","value":".","position":{"start":{"line":384,"column":83,"offset":22652},"end":{"line":384,"column":84,"offset":22653}}}],"position":{"start":{"line":384,"column":1,"offset":22570},"end":{"line":384,"column":84,"offset":22653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For ","position":{"start":{"line":386,"column":1,"offset":22655},"end":{"line":386,"column":5,"offset":22659}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":386,"column":5,"offset":22659},"end":{"line":386,"column":14,"offset":22668}}},{"type":"text","value":" you can always skip ","position":{"start":{"line":386,"column":14,"offset":22668},"end":{"line":386,"column":35,"offset":22689}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1]"}],"position":{"start":{"line":386,"column":35,"offset":22689},"end":{"line":386,"column":43,"offset":22697}}},{"type":"text","value":", but can only take it when ","position":{"start":{"line":386,"column":43,"offset":22697},"end":{"line":386,"column":71,"offset":22725}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1] === T[j-1]"}],"position":{"start":{"line":386,"column":71,"offset":22725},"end":{"line":386,"column":90,"offset":22744}}},{"type":"text","value":".","position":{"start":{"line":386,"column":90,"offset":22744},"end":{"line":386,"column":91,"offset":22745}}}],"position":{"start":{"line":386,"column":1,"offset":22655},"end":{"line":386,"column":91,"offset":22745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"f(0, j) = 0, j > 0 // nothing to delete\nf(i, 0) = 1 // delete all\nf(i, j) = f(i-1, j) + (S[i-1] === T[j-1] ? f(i-1, j-1) : 0)\n"}],"position":{"start":{"line":388,"column":1,"offset":22747},"end":{"line":392,"column":4,"offset":22882}}}],"position":{"start":{"line":388,"column":1,"offset":22747},"end":{"line":392,"column":4,"offset":22882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":394,"column":1,"offset":22884},"end":{"line":394,"column":27,"offset":22910}}}],"position":{"start":{"line":394,"column":1,"offset":22884},"end":{"line":394,"column":27,"offset":22910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nlet numDistinct = function (s, t) {\n    const lens = s.length;\n    const lent = t.length;\n    const dp = new Array(lent + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= lens; i++) {\n        for (let j = lent; j >= 1; j--) {\n            if (s[i - 1] === t[j - 1]) {\n                dp[j] += dp[j - 1];\n            }\n        }\n    }\n    return dp[lent];\n};\n"}],"position":{"start":{"line":396,"column":1,"offset":22912},"end":{"line":416,"column":4,"offset":23351}}}],"position":{"start":{"line":396,"column":1,"offset":22912},"end":{"line":416,"column":4,"offset":23351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":418,"column":1,"offset":23353},"end":{"line":418,"column":4,"offset":23356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":420,"column":1,"offset":23358},"end":{"line":422,"column":9,"offset":23401}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":422,"column":9,"offset":23401},"end":{"line":422,"column":38,"offset":23430}}}],"position":{"start":{"line":422,"column":9,"offset":23401},"end":{"line":422,"column":38,"offset":23430}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":422,"column":38,"offset":23430},"end":{"line":423,"column":23,"offset":23453}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":423,"column":23,"offset":23453},"end":{"line":423,"column":66,"offset":23496}}}],"position":{"start":{"line":423,"column":23,"offset":23453},"end":{"line":423,"column":66,"offset":23496}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node II\": ","position":{"start":{"line":423,"column":66,"offset":23496},"end":{"line":425,"column":51,"offset":23566}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii","position":{"start":{"line":425,"column":51,"offset":23566},"end":{"line":425,"column":127,"offset":23642}}}],"position":{"start":{"line":425,"column":51,"offset":23566},"end":{"line":425,"column":127,"offset":23642}}},{"type":"text","value":"\n\"Binary Tree Right Side View\": ","position":{"start":{"line":425,"column":127,"offset":23642},"end":{"line":426,"column":32,"offset":23674}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-right-side-view"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-right-side-view","position":{"start":{"line":426,"column":32,"offset":23674},"end":{"line":426,"column":89,"offset":23731}}}],"position":{"start":{"line":426,"column":32,"offset":23674},"end":{"line":426,"column":89,"offset":23731}}}],"position":{"start":{"line":420,"column":1,"offset":23358},"end":{"line":426,"column":89,"offset":23731}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":428,"column":1,"offset":23733},"end":{"line":428,"column":4,"offset":23736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-nodedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":430,"column":2,"offset":23739},"end":{"line":430,"column":142,"offset":23879}}}],"position":{"start":{"line":430,"column":1,"offset":23738},"end":{"line":430,"column":271,"offset":24008}}}],"position":{"start":{"line":430,"column":1,"offset":23738},"end":{"line":430,"column":271,"offset":24008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":432,"column":4,"offset":24013},"end":{"line":432,"column":6,"offset":24015}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":432,"column":7,"offset":24016},"end":{"line":432,"column":55,"offset":24064}}}],"position":{"start":{"line":432,"column":6,"offset":24015},"end":{"line":432,"column":144,"offset":24153}}}],"position":{"start":{"line":432,"column":1,"offset":24010},"end":{"line":432,"column":144,"offset":24153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":434,"column":5,"offset":24159},"end":{"line":434,"column":13,"offset":24167}}}],"position":{"start":{"line":434,"column":1,"offset":24155},"end":{"line":434,"column":13,"offset":24167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":436,"column":1,"offset":24169},"end":{"line":436,"column":20,"offset":24188}}}],"position":{"start":{"line":436,"column":1,"offset":24169},"end":{"line":436,"column":20,"offset":24188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":438,"column":1,"offset":24190},"end":{"line":445,"column":4,"offset":24289}}}],"position":{"start":{"line":438,"column":1,"offset":24190},"end":{"line":445,"column":4,"offset":24289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":447,"column":1,"offset":24291},"end":{"line":447,"column":127,"offset":24417}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":447,"column":127,"offset":24417},"end":{"line":447,"column":133,"offset":24423}}},{"type":"text","value":".","position":{"start":{"line":447,"column":133,"offset":24423},"end":{"line":447,"column":134,"offset":24424}}}],"position":{"start":{"line":447,"column":1,"offset":24291},"end":{"line":447,"column":134,"offset":24424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":449,"column":1,"offset":24426},"end":{"line":449,"column":41,"offset":24466}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":449,"column":41,"offset":24466},"end":{"line":449,"column":47,"offset":24472}}},{"type":"text","value":".","position":{"start":{"line":449,"column":47,"offset":24472},"end":{"line":449,"column":48,"offset":24473}}}],"position":{"start":{"line":449,"column":1,"offset":24426},"end":{"line":449,"column":48,"offset":24473}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":451,"column":3,"offset":24477},"end":{"line":451,"column":8,"offset":24482}}}],"position":{"start":{"line":451,"column":1,"offset":24475},"end":{"line":451,"column":10,"offset":24484}}}],"position":{"start":{"line":451,"column":1,"offset":24475},"end":{"line":451,"column":10,"offset":24484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":453,"column":5,"offset":24490},"end":{"line":453,"column":43,"offset":24528}}}],"position":{"start":{"line":453,"column":1,"offset":24486},"end":{"line":453,"column":43,"offset":24528}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":454,"column":5,"offset":24533},"end":{"line":454,"column":101,"offset":24629}}}],"position":{"start":{"line":454,"column":1,"offset":24529},"end":{"line":454,"column":101,"offset":24629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).","position":{"start":{"line":455,"column":5,"offset":24634},"end":{"line":455,"column":127,"offset":24756}}}],"position":{"start":{"line":455,"column":1,"offset":24630},"end":{"line":455,"column":127,"offset":24756}}},{"type":"text","value":"\n"}],"position":{"start":{"line":453,"column":1,"offset":24486},"end":{"line":455,"column":127,"offset":24756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":457,"column":3,"offset":24760},"end":{"line":457,"column":11,"offset":24768}}}],"position":{"start":{"line":457,"column":1,"offset":24758},"end":{"line":457,"column":13,"offset":24770}}}],"position":{"start":{"line":457,"column":1,"offset":24758},"end":{"line":457,"column":13,"offset":24770}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following perfect binary tree,","position":{"start":{"line":459,"column":1,"offset":24772},"end":{"line":459,"column":41,"offset":24812}}}],"position":{"start":{"line":459,"column":1,"offset":24772},"end":{"line":459,"column":41,"offset":24812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n"}],"position":{"start":{"line":461,"column":1,"offset":24814},"end":{"line":468,"column":4,"offset":24867}}}],"position":{"start":{"line":461,"column":1,"offset":24814},"end":{"line":468,"column":4,"offset":24867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":470,"column":1,"offset":24869},"end":{"line":470,"column":56,"offset":24924}}}],"position":{"start":{"line":470,"column":1,"offset":24869},"end":{"line":470,"column":56,"offset":24924}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n"}],"position":{"start":{"line":472,"column":1,"offset":24926},"end":{"line":479,"column":4,"offset":25003}}}],"position":{"start":{"line":472,"column":1,"offset":24926},"end":{"line":479,"column":4,"offset":25003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":481,"column":5,"offset":25009},"end":{"line":481,"column":14,"offset":25018}}}],"position":{"start":{"line":481,"column":1,"offset":25005},"end":{"line":481,"column":14,"offset":25018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":483,"column":6,"offset":25025},"end":{"line":483,"column":9,"offset":25028}}}],"position":{"start":{"line":483,"column":1,"offset":25020},"end":{"line":483,"column":9,"offset":25028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive.","position":{"start":{"line":485,"column":1,"offset":25030},"end":{"line":485,"column":11,"offset":25040}}}],"position":{"start":{"line":485,"column":1,"offset":25030},"end":{"line":485,"column":11,"offset":25040}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":487,"column":1,"offset":25042},"end":{"line":487,"column":11,"offset":25052}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":487,"column":11,"offset":25052},"end":{"line":487,"column":17,"offset":25058}}},{"type":"text","value":":","position":{"start":{"line":487,"column":17,"offset":25058},"end":{"line":487,"column":18,"offset":25059}}}],"position":{"start":{"line":487,"column":1,"offset":25042},"end":{"line":487,"column":18,"offset":25059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Left child: points to ","position":{"start":{"line":489,"column":5,"offset":25065},"end":{"line":489,"column":27,"offset":25087}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":489,"column":27,"offset":25087},"end":{"line":489,"column":39,"offset":25099}}},{"type":"text","value":".","position":{"start":{"line":489,"column":39,"offset":25099},"end":{"line":489,"column":40,"offset":25100}}}],"position":{"start":{"line":489,"column":1,"offset":25061},"end":{"line":489,"column":40,"offset":25100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Right child: points to ","position":{"start":{"line":490,"column":5,"offset":25105},"end":{"line":490,"column":28,"offset":25128}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next.left"}],"position":{"start":{"line":490,"column":28,"offset":25128},"end":{"line":490,"column":44,"offset":25144}}},{"type":"text","value":" if ","position":{"start":{"line":490,"column":44,"offset":25144},"end":{"line":490,"column":48,"offset":25148}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next"}],"position":{"start":{"line":490,"column":48,"offset":25148},"end":{"line":490,"column":59,"offset":25159}}},{"type":"text","value":" exists.","position":{"start":{"line":490,"column":59,"offset":25159},"end":{"line":490,"column":67,"offset":25167}}}],"position":{"start":{"line":490,"column":1,"offset":25101},"end":{"line":490,"column":67,"offset":25167}}},{"type":"text","value":"\n"}],"position":{"start":{"line":489,"column":1,"offset":25061},"end":{"line":490,"column":67,"offset":25167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right;\n        connect(root.left);\n    }\n    if (root.right !== null) {\n        if (root.next !== null) {\n            root.right.next = root.next.left;\n        }\n        connect(root.right);\n    }\n};\n"}],"position":{"start":{"line":492,"column":1,"offset":25169},"end":{"line":520,"column":4,"offset":25787}}}],"position":{"start":{"line":492,"column":1,"offset":25169},"end":{"line":520,"column":4,"offset":25787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":522,"column":6,"offset":25794},"end":{"line":522,"column":9,"offset":25797}}}],"position":{"start":{"line":522,"column":1,"offset":25789},"end":{"line":522,"column":9,"offset":25797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal.","position":{"start":{"line":524,"column":1,"offset":25799},"end":{"line":524,"column":23,"offset":25821}}}],"position":{"start":{"line":524,"column":1,"offset":25799},"end":{"line":524,"column":23,"offset":25821}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":526,"column":1,"offset":25823},"end":{"line":562,"column":4,"offset":26679}}}],"position":{"start":{"line":526,"column":1,"offset":25823},"end":{"line":562,"column":4,"offset":26679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":564,"column":1,"offset":26681},"end":{"line":564,"column":4,"offset":26684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":566,"column":1,"offset":26686},"end":{"line":568,"column":9,"offset":26729}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":568,"column":9,"offset":26729},"end":{"line":568,"column":38,"offset":26758}}}],"position":{"start":{"line":568,"column":9,"offset":26729},"end":{"line":568,"column":38,"offset":26758}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":568,"column":38,"offset":26758},"end":{"line":569,"column":23,"offset":26781}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":569,"column":23,"offset":26781},"end":{"line":569,"column":66,"offset":26824}}}],"position":{"start":{"line":569,"column":23,"offset":26781},"end":{"line":569,"column":66,"offset":26824}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node\": ","position":{"start":{"line":569,"column":66,"offset":26824},"end":{"line":571,"column":48,"offset":26891}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node","position":{"start":{"line":571,"column":48,"offset":26891},"end":{"line":571,"column":121,"offset":26964}}}],"position":{"start":{"line":571,"column":48,"offset":26891},"end":{"line":571,"column":121,"offset":26964}}}],"position":{"start":{"line":566,"column":1,"offset":26686},"end":{"line":571,"column":121,"offset":26964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":573,"column":1,"offset":26966},"end":{"line":573,"column":4,"offset":26969}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#117-populating-next-right-pointers-in-each-node-iihttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":575,"column":2,"offset":26972},"end":{"line":575,"column":142,"offset":27112}}}],"position":{"start":{"line":575,"column":1,"offset":26971},"end":{"line":575,"column":277,"offset":27247}}}],"position":{"start":{"line":575,"column":1,"offset":26971},"end":{"line":575,"column":277,"offset":27247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":577,"column":4,"offset":27252},"end":{"line":577,"column":6,"offset":27254}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/"},"children":[{"type":"text","value":"117. Populating Next Right Pointers in Each Node II","position":{"start":{"line":577,"column":7,"offset":27255},"end":{"line":577,"column":58,"offset":27306}}}],"position":{"start":{"line":577,"column":6,"offset":27254},"end":{"line":577,"column":150,"offset":27398}}}],"position":{"start":{"line":577,"column":1,"offset":27249},"end":{"line":577,"column":150,"offset":27398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":579,"column":5,"offset":27404},"end":{"line":579,"column":13,"offset":27412}}}],"position":{"start":{"line":579,"column":1,"offset":27400},"end":{"line":579,"column":13,"offset":27412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":581,"column":1,"offset":27414},"end":{"line":581,"column":20,"offset":27433}}}],"position":{"start":{"line":581,"column":1,"offset":27414},"end":{"line":581,"column":20,"offset":27433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":583,"column":1,"offset":27435},"end":{"line":590,"column":4,"offset":27534}}}],"position":{"start":{"line":583,"column":1,"offset":27435},"end":{"line":590,"column":4,"offset":27534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":592,"column":1,"offset":27536},"end":{"line":592,"column":127,"offset":27662}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":592,"column":127,"offset":27662},"end":{"line":592,"column":133,"offset":27668}}},{"type":"text","value":".","position":{"start":{"line":592,"column":133,"offset":27668},"end":{"line":592,"column":134,"offset":27669}}}],"position":{"start":{"line":592,"column":1,"offset":27536},"end":{"line":592,"column":134,"offset":27669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":594,"column":1,"offset":27671},"end":{"line":594,"column":41,"offset":27711}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":594,"column":41,"offset":27711},"end":{"line":594,"column":47,"offset":27717}}},{"type":"text","value":".","position":{"start":{"line":594,"column":47,"offset":27717},"end":{"line":594,"column":48,"offset":27718}}}],"position":{"start":{"line":594,"column":1,"offset":27671},"end":{"line":594,"column":48,"offset":27718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":596,"column":3,"offset":27722},"end":{"line":596,"column":8,"offset":27727}}}],"position":{"start":{"line":596,"column":1,"offset":27720},"end":{"line":596,"column":10,"offset":27729}}}],"position":{"start":{"line":596,"column":1,"offset":27720},"end":{"line":596,"column":10,"offset":27729}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":598,"column":5,"offset":27735},"end":{"line":598,"column":43,"offset":27773}}}],"position":{"start":{"line":598,"column":1,"offset":27731},"end":{"line":598,"column":43,"offset":27773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":599,"column":5,"offset":27778},"end":{"line":599,"column":101,"offset":27874}}}],"position":{"start":{"line":599,"column":1,"offset":27774},"end":{"line":599,"column":101,"offset":27874}}},{"type":"text","value":"\n"}],"position":{"start":{"line":598,"column":1,"offset":27731},"end":{"line":599,"column":101,"offset":27874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":601,"column":3,"offset":27878},"end":{"line":601,"column":11,"offset":27886}}}],"position":{"start":{"line":601,"column":1,"offset":27876},"end":{"line":601,"column":13,"offset":27888}}}],"position":{"start":{"line":601,"column":1,"offset":27876},"end":{"line":601,"column":13,"offset":27888}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following binary tree,","position":{"start":{"line":603,"column":1,"offset":27890},"end":{"line":603,"column":33,"offset":27922}}}],"position":{"start":{"line":603,"column":1,"offset":27890},"end":{"line":603,"column":33,"offset":27922}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n"}],"position":{"start":{"line":605,"column":1,"offset":27924},"end":{"line":612,"column":4,"offset":27977}}}],"position":{"start":{"line":605,"column":1,"offset":27924},"end":{"line":612,"column":4,"offset":27977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":614,"column":1,"offset":27979},"end":{"line":614,"column":56,"offset":28034}}}],"position":{"start":{"line":614,"column":1,"offset":27979},"end":{"line":614,"column":56,"offset":28034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\    \\\n4-> 5 -> 7 -> NULL\n"}],"position":{"start":{"line":616,"column":1,"offset":28036},"end":{"line":623,"column":4,"offset":28113}}}],"position":{"start":{"line":616,"column":1,"offset":28036},"end":{"line":623,"column":4,"offset":28113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":625,"column":5,"offset":28119},"end":{"line":625,"column":14,"offset":28128}}}],"position":{"start":{"line":625,"column":1,"offset":28115},"end":{"line":625,"column":14,"offset":28128}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":627,"column":6,"offset":28135},"end":{"line":627,"column":9,"offset":28138}}}],"position":{"start":{"line":627,"column":1,"offset":28130},"end":{"line":627,"column":9,"offset":28138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive. See ","position":{"start":{"line":629,"column":1,"offset":28140},"end":{"line":629,"column":16,"offset":28155}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":629,"column":17,"offset":28156},"end":{"line":629,"column":65,"offset":28204}}}],"position":{"start":{"line":629,"column":16,"offset":28155},"end":{"line":629,"column":135,"offset":28274}}},{"type":"text","value":".","position":{"start":{"line":629,"column":135,"offset":28274},"end":{"line":629,"column":136,"offset":28275}}}],"position":{"start":{"line":629,"column":1,"offset":28140},"end":{"line":629,"column":136,"offset":28275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The tree may not be perfect now. So keep finding ","position":{"start":{"line":631,"column":1,"offset":28277},"end":{"line":631,"column":50,"offset":28326}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":631,"column":50,"offset":28326},"end":{"line":631,"column":56,"offset":28332}}},{"type":"text","value":" until there is a node with children, or ","position":{"start":{"line":631,"column":56,"offset":28332},"end":{"line":631,"column":97,"offset":28373}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}],"position":{"start":{"line":631,"column":97,"offset":28373},"end":{"line":631,"column":103,"offset":28379}}},{"type":"text","value":".","position":{"start":{"line":631,"column":103,"offset":28379},"end":{"line":631,"column":104,"offset":28380}}}],"position":{"start":{"line":631,"column":1,"offset":28277},"end":{"line":631,"column":104,"offset":28380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This also means post-order traversal is required.","position":{"start":{"line":633,"column":1,"offset":28382},"end":{"line":633,"column":50,"offset":28431}}}],"position":{"start":{"line":633,"column":1,"offset":28382},"end":{"line":633,"column":50,"offset":28431}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    let next = null;\n    for (let node = root.next; node !== null; node = node.next) {\n        if (node.left !== null) {\n            next = node.left;\n            break;\n        }\n        if (node.right !== null) {\n            next = node.right;\n            break;\n        }\n    }\n    if (root.right !== null) {\n        root.right.next = next;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right || next;\n    }\n    connect(root.right);\n    connect(root.left);\n};\n"}],"position":{"start":{"line":635,"column":1,"offset":28433},"end":{"line":672,"column":4,"offset":29274}}}],"position":{"start":{"line":635,"column":1,"offset":28433},"end":{"line":672,"column":4,"offset":29274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":674,"column":6,"offset":29281},"end":{"line":674,"column":9,"offset":29284}}}],"position":{"start":{"line":674,"column":1,"offset":29276},"end":{"line":674,"column":9,"offset":29284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal. Exact same as ","position":{"start":{"line":676,"column":1,"offset":29286},"end":{"line":676,"column":38,"offset":29323}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":676,"column":39,"offset":29324},"end":{"line":676,"column":87,"offset":29372}}}],"position":{"start":{"line":676,"column":38,"offset":29323},"end":{"line":676,"column":157,"offset":29442}}},{"type":"text","value":".","position":{"start":{"line":676,"column":157,"offset":29442},"end":{"line":676,"column":158,"offset":29443}}}],"position":{"start":{"line":676,"column":1,"offset":29286},"end":{"line":676,"column":158,"offset":29443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":678,"column":1,"offset":29445},"end":{"line":714,"column":4,"offset":30301}}}],"position":{"start":{"line":678,"column":1,"offset":29445},"end":{"line":714,"column":4,"offset":30301}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":716,"column":1,"offset":30303},"end":{"line":716,"column":4,"offset":30306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":718,"column":1,"offset":30308},"end":{"line":720,"column":10,"offset":30350}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":720,"column":10,"offset":30350},"end":{"line":720,"column":40,"offset":30380}}}],"position":{"start":{"line":720,"column":10,"offset":30350},"end":{"line":720,"column":40,"offset":30380}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle II\": ","position":{"start":{"line":720,"column":40,"offset":30380},"end":{"line":722,"column":25,"offset":30424}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle-ii","position":{"start":{"line":722,"column":25,"offset":30424},"end":{"line":722,"column":74,"offset":30473}}}],"position":{"start":{"line":722,"column":25,"offset":30424},"end":{"line":722,"column":74,"offset":30473}}}],"position":{"start":{"line":718,"column":1,"offset":30308},"end":{"line":722,"column":74,"offset":30473}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":724,"column":1,"offset":30475},"end":{"line":724,"column":4,"offset":30478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#118-pascals-trianglehttpsleetcodecomproblemspascals-triangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":726,"column":2,"offset":30481},"end":{"line":726,"column":142,"offset":30621}}}],"position":{"start":{"line":726,"column":1,"offset":30480},"end":{"line":726,"column":217,"offset":30696}}}],"position":{"start":{"line":726,"column":1,"offset":30480},"end":{"line":726,"column":217,"offset":30696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":728,"column":4,"offset":30701},"end":{"line":728,"column":6,"offset":30703}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle/description/"},"children":[{"type":"text","value":"118. Pascal's Triangle","position":{"start":{"line":728,"column":7,"offset":30704},"end":{"line":728,"column":29,"offset":30726}}}],"position":{"start":{"line":728,"column":6,"offset":30703},"end":{"line":728,"column":91,"offset":30788}}}],"position":{"start":{"line":728,"column":1,"offset":30698},"end":{"line":728,"column":91,"offset":30788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":730,"column":5,"offset":30794},"end":{"line":730,"column":13,"offset":30802}}}],"position":{"start":{"line":730,"column":1,"offset":30790},"end":{"line":730,"column":13,"offset":30802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative integer ","position":{"start":{"line":732,"column":1,"offset":30804},"end":{"line":732,"column":30,"offset":30833}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":732,"column":31,"offset":30834},"end":{"line":732,"column":38,"offset":30841}}}],"position":{"start":{"line":732,"column":30,"offset":30833},"end":{"line":732,"column":39,"offset":30842}}},{"type":"text","value":", generate the first ","position":{"start":{"line":732,"column":39,"offset":30842},"end":{"line":732,"column":60,"offset":30863}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":732,"column":61,"offset":30864},"end":{"line":732,"column":68,"offset":30871}}}],"position":{"start":{"line":732,"column":60,"offset":30863},"end":{"line":732,"column":69,"offset":30872}}},{"type":"text","value":" of Pascal's triangle.","position":{"start":{"line":732,"column":69,"offset":30872},"end":{"line":732,"column":91,"offset":30894}}}],"position":{"start":{"line":732,"column":1,"offset":30804},"end":{"line":732,"column":91,"offset":30894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":734,"column":1,"offset":30896},"end":{"line":734,"column":112,"offset":31007}}}],"position":{"start":{"line":734,"column":1,"offset":30896},"end":{"line":734,"column":112,"offset":31007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":736,"column":1,"offset":31009},"end":{"line":736,"column":83,"offset":31091}}}],"position":{"start":{"line":736,"column":1,"offset":31009},"end":{"line":736,"column":83,"offset":31091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":738,"column":3,"offset":31095},"end":{"line":738,"column":11,"offset":31103}}}],"position":{"start":{"line":738,"column":1,"offset":31093},"end":{"line":738,"column":13,"offset":31105}}}],"position":{"start":{"line":738,"column":1,"offset":31093},"end":{"line":738,"column":13,"offset":31105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"}],"position":{"start":{"line":740,"column":1,"offset":31107},"end":{"line":751,"column":4,"offset":31195}}}],"position":{"start":{"line":740,"column":1,"offset":31107},"end":{"line":751,"column":4,"offset":31195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":753,"column":5,"offset":31201},"end":{"line":753,"column":14,"offset":31210}}}],"position":{"start":{"line":753,"column":1,"offset":31197},"end":{"line":753,"column":14,"offset":31210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101.","position":{"start":{"line":755,"column":1,"offset":31212},"end":{"line":755,"column":25,"offset":31236}}}],"position":{"start":{"line":755,"column":1,"offset":31212},"end":{"line":755,"column":25,"offset":31236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nlet generate = function (numRows) {\n    if (numRows <= 0) {\n        return [];\n    }\n\n    const result = [[1]];\n    for (let i = 1; i < numRows; i++) {\n        const lastRow = result[i - 1];\n        const row = [1];\n        for (let j = 1; j < i; j++) {\n            row[j] = lastRow[j] + lastRow[j - 1];\n        }\n        row.push(1);\n        result.push(row);\n    }\n\n    return result;\n};\n"}],"position":{"start":{"line":757,"column":1,"offset":31238},"end":{"line":780,"column":4,"offset":31696}}}],"position":{"start":{"line":757,"column":1,"offset":31238},"end":{"line":780,"column":4,"offset":31696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":782,"column":1,"offset":31698},"end":{"line":782,"column":4,"offset":31701}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":784,"column":1,"offset":31703},"end":{"line":786,"column":10,"offset":31745}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":786,"column":10,"offset":31745},"end":{"line":786,"column":40,"offset":31775}}}],"position":{"start":{"line":786,"column":10,"offset":31745},"end":{"line":786,"column":40,"offset":31775}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle\": ","position":{"start":{"line":786,"column":40,"offset":31775},"end":{"line":788,"column":22,"offset":31816}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle","position":{"start":{"line":788,"column":22,"offset":31816},"end":{"line":788,"column":68,"offset":31862}}}],"position":{"start":{"line":788,"column":22,"offset":31816},"end":{"line":788,"column":68,"offset":31862}}}],"position":{"start":{"line":784,"column":1,"offset":31703},"end":{"line":788,"column":68,"offset":31862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":790,"column":1,"offset":31864},"end":{"line":790,"column":4,"offset":31867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":792,"column":2,"offset":31870},"end":{"line":792,"column":142,"offset":32010}}}],"position":{"start":{"line":792,"column":1,"offset":31869},"end":{"line":792,"column":223,"offset":32091}}}],"position":{"start":{"line":792,"column":1,"offset":31869},"end":{"line":792,"column":223,"offset":32091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":794,"column":4,"offset":32096},"end":{"line":794,"column":6,"offset":32098}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii/description/"},"children":[{"type":"text","value":"119. Pascal's Triangle II","position":{"start":{"line":794,"column":7,"offset":32099},"end":{"line":794,"column":32,"offset":32124}}}],"position":{"start":{"line":794,"column":6,"offset":32098},"end":{"line":794,"column":97,"offset":32189}}}],"position":{"start":{"line":794,"column":1,"offset":32093},"end":{"line":794,"column":97,"offset":32189}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":796,"column":5,"offset":32195},"end":{"line":796,"column":13,"offset":32203}}}],"position":{"start":{"line":796,"column":1,"offset":32191},"end":{"line":796,"column":13,"offset":32203}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative index ","position":{"start":{"line":798,"column":1,"offset":32205},"end":{"line":798,"column":28,"offset":32232}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":29,"offset":32233},"end":{"line":798,"column":30,"offset":32234}}}],"position":{"start":{"line":798,"column":28,"offset":32232},"end":{"line":798,"column":31,"offset":32235}}},{"type":"text","value":" where ","position":{"start":{"line":798,"column":31,"offset":32235},"end":{"line":798,"column":38,"offset":32242}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":39,"offset":32243},"end":{"line":798,"column":40,"offset":32244}}}],"position":{"start":{"line":798,"column":38,"offset":32242},"end":{"line":798,"column":41,"offset":32245}}},{"type":"text","value":" ≤ 33, return the ","position":{"start":{"line":798,"column":41,"offset":32245},"end":{"line":798,"column":59,"offset":32263}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":60,"offset":32264},"end":{"line":798,"column":61,"offset":32265}}}],"position":{"start":{"line":798,"column":59,"offset":32263},"end":{"line":798,"column":62,"offset":32266}}},{"type":"text","value":"th index row of the Pascal's triangle.","position":{"start":{"line":798,"column":62,"offset":32266},"end":{"line":798,"column":100,"offset":32304}}}],"position":{"start":{"line":798,"column":1,"offset":32205},"end":{"line":798,"column":100,"offset":32304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the row index starts from 0.","position":{"start":{"line":800,"column":1,"offset":32306},"end":{"line":800,"column":39,"offset":32344}}}],"position":{"start":{"line":800,"column":1,"offset":32306},"end":{"line":800,"column":39,"offset":32344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":802,"column":1,"offset":32346},"end":{"line":802,"column":112,"offset":32457}}}],"position":{"start":{"line":802,"column":1,"offset":32346},"end":{"line":802,"column":112,"offset":32457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":804,"column":1,"offset":32459},"end":{"line":804,"column":83,"offset":32541}}}],"position":{"start":{"line":804,"column":1,"offset":32459},"end":{"line":804,"column":83,"offset":32541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":806,"column":3,"offset":32545},"end":{"line":806,"column":11,"offset":32553}}}],"position":{"start":{"line":806,"column":1,"offset":32543},"end":{"line":806,"column":13,"offset":32555}}}],"position":{"start":{"line":806,"column":1,"offset":32543},"end":{"line":806,"column":13,"offset":32555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 3\nOutput: [1,3,3,1]\n"}],"position":{"start":{"line":808,"column":1,"offset":32557},"end":{"line":812,"column":4,"offset":32592}}}],"position":{"start":{"line":808,"column":1,"offset":32557},"end":{"line":812,"column":4,"offset":32592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":814,"column":3,"offset":32596},"end":{"line":814,"column":13,"offset":32606}}}],"position":{"start":{"line":814,"column":1,"offset":32594},"end":{"line":814,"column":15,"offset":32608}}}],"position":{"start":{"line":814,"column":1,"offset":32594},"end":{"line":814,"column":15,"offset":32608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Could you optimize your algorithm to use only ","position":{"start":{"line":816,"column":1,"offset":32610},"end":{"line":816,"column":47,"offset":32656}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":816,"column":48,"offset":32657},"end":{"line":816,"column":49,"offset":32658}}}],"position":{"start":{"line":816,"column":47,"offset":32656},"end":{"line":816,"column":50,"offset":32659}}},{"type":"text","value":"(","position":{"start":{"line":816,"column":50,"offset":32659},"end":{"line":816,"column":51,"offset":32660}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":816,"column":52,"offset":32661},"end":{"line":816,"column":53,"offset":32662}}}],"position":{"start":{"line":816,"column":51,"offset":32660},"end":{"line":816,"column":54,"offset":32663}}},{"type":"text","value":") extra space?","position":{"start":{"line":816,"column":54,"offset":32663},"end":{"line":816,"column":68,"offset":32677}}}],"position":{"start":{"line":816,"column":1,"offset":32610},"end":{"line":816,"column":68,"offset":32677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":818,"column":5,"offset":32683},"end":{"line":818,"column":14,"offset":32692}}}],"position":{"start":{"line":818,"column":1,"offset":32679},"end":{"line":818,"column":14,"offset":32692}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101 with dynamic array.","position":{"start":{"line":820,"column":1,"offset":32694},"end":{"line":820,"column":44,"offset":32737}}}],"position":{"start":{"line":820,"column":1,"offset":32694},"end":{"line":820,"column":44,"offset":32737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"State ","position":{"start":{"line":822,"column":1,"offset":32739},"end":{"line":822,"column":7,"offset":32745}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i, j)"}],"position":{"start":{"line":822,"column":7,"offset":32745},"end":{"line":822,"column":15,"offset":32753}}},{"type":"text","value":" depends on ","position":{"start":{"line":822,"column":15,"offset":32753},"end":{"line":822,"column":27,"offset":32765}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j)"}],"position":{"start":{"line":822,"column":27,"offset":32765},"end":{"line":822,"column":37,"offset":32775}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":37,"offset":32775},"end":{"line":822,"column":42,"offset":32780}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":822,"column":42,"offset":32780},"end":{"line":822,"column":54,"offset":32792}}},{"type":"text","value":". So to access ","position":{"start":{"line":822,"column":54,"offset":32792},"end":{"line":822,"column":69,"offset":32807}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":822,"column":69,"offset":32807},"end":{"line":822,"column":81,"offset":32819}}},{"type":"text","value":" iteration must be from right to left.","position":{"start":{"line":822,"column":81,"offset":32819},"end":{"line":822,"column":119,"offset":32857}}}],"position":{"start":{"line":822,"column":1,"offset":32739},"end":{"line":822,"column":119,"offset":32857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nlet getRow = function (rowIndex) {\n    if (rowIndex < 0) {\n        return [];\n    }\n\n    const row = [1];\n    for (let i = 1; i <= rowIndex; i++) {\n        for (let j = i - 1; j > 0; j--) {\n            row[j] += row[j - 1];\n        }\n        row.push(1);\n    }\n\n    return row;\n};\n"}],"position":{"start":{"line":824,"column":1,"offset":32859},"end":{"line":844,"column":4,"offset":33207}}}],"position":{"start":{"line":824,"column":1,"offset":32859},"end":{"line":844,"column":4,"offset":33207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":846,"column":1,"offset":33209},"end":{"line":846,"column":4,"offset":33212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Array\": ","position":{"start":{"line":848,"column":1,"offset":33214},"end":{"line":850,"column":10,"offset":33258}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":850,"column":10,"offset":33258},"end":{"line":850,"column":40,"offset":33288}}}],"position":{"start":{"line":850,"column":10,"offset":33258},"end":{"line":850,"column":40,"offset":33288}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":850,"column":40,"offset":33288},"end":{"line":851,"column":24,"offset":33312}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":851,"column":24,"offset":33312},"end":{"line":851,"column":68,"offset":33356}}}],"position":{"start":{"line":851,"column":24,"offset":33312},"end":{"line":851,"column":68,"offset":33356}}}],"position":{"start":{"line":848,"column":1,"offset":33214},"end":{"line":851,"column":68,"offset":33356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":853,"column":1,"offset":33358},"end":{"line":853,"column":4,"offset":33361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#120-trianglehttpsleetcodecomproblemstriangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":855,"column":2,"offset":33364},"end":{"line":855,"column":142,"offset":33504}}}],"position":{"start":{"line":855,"column":1,"offset":33363},"end":{"line":855,"column":201,"offset":33563}}}],"position":{"start":{"line":855,"column":1,"offset":33363},"end":{"line":855,"column":201,"offset":33563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":857,"column":4,"offset":33568},"end":{"line":857,"column":6,"offset":33570}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/triangle/description/"},"children":[{"type":"text","value":"120. Triangle","position":{"start":{"line":857,"column":7,"offset":33571},"end":{"line":857,"column":20,"offset":33584}}}],"position":{"start":{"line":857,"column":6,"offset":33570},"end":{"line":857,"column":74,"offset":33638}}}],"position":{"start":{"line":857,"column":1,"offset":33565},"end":{"line":857,"column":74,"offset":33638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":859,"column":5,"offset":33644},"end":{"line":859,"column":13,"offset":33652}}}],"position":{"start":{"line":859,"column":1,"offset":33640},"end":{"line":859,"column":13,"offset":33652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.","position":{"start":{"line":861,"column":1,"offset":33654},"end":{"line":861,"column":125,"offset":33778}}}],"position":{"start":{"line":861,"column":1,"offset":33654},"end":{"line":861,"column":125,"offset":33778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, given the following triangle","position":{"start":{"line":863,"column":1,"offset":33780},"end":{"line":863,"column":42,"offset":33821}}}],"position":{"start":{"line":863,"column":1,"offset":33780},"end":{"line":863,"column":42,"offset":33821}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n"}],"position":{"start":{"line":865,"column":1,"offset":33823},"end":{"line":873,"column":4,"offset":33880}}}],"position":{"start":{"line":865,"column":1,"offset":33823},"end":{"line":873,"column":4,"offset":33880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The minimum path sum from top to bottom is ","position":{"start":{"line":875,"column":1,"offset":33882},"end":{"line":875,"column":44,"offset":33925}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"11"}],"position":{"start":{"line":875,"column":44,"offset":33925},"end":{"line":875,"column":48,"offset":33929}}},{"type":"text","value":" (i.e., ","position":{"start":{"line":875,"column":48,"offset":33929},"end":{"line":875,"column":56,"offset":33937}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"2","position":{"start":{"line":875,"column":58,"offset":33939},"end":{"line":875,"column":59,"offset":33940}}}],"position":{"start":{"line":875,"column":56,"offset":33937},"end":{"line":875,"column":61,"offset":33942}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":61,"offset":33942},"end":{"line":875,"column":64,"offset":33945}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"3","position":{"start":{"line":875,"column":66,"offset":33947},"end":{"line":875,"column":67,"offset":33948}}}],"position":{"start":{"line":875,"column":64,"offset":33945},"end":{"line":875,"column":69,"offset":33950}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":69,"offset":33950},"end":{"line":875,"column":72,"offset":33953}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"5","position":{"start":{"line":875,"column":74,"offset":33955},"end":{"line":875,"column":75,"offset":33956}}}],"position":{"start":{"line":875,"column":72,"offset":33953},"end":{"line":875,"column":77,"offset":33958}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":77,"offset":33958},"end":{"line":875,"column":80,"offset":33961}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"1","position":{"start":{"line":875,"column":82,"offset":33963},"end":{"line":875,"column":83,"offset":33964}}}],"position":{"start":{"line":875,"column":80,"offset":33961},"end":{"line":875,"column":85,"offset":33966}}},{"type":"text","value":" = 11).","position":{"start":{"line":875,"column":85,"offset":33966},"end":{"line":875,"column":92,"offset":33973}}}],"position":{"start":{"line":875,"column":1,"offset":33882},"end":{"line":875,"column":92,"offset":33973}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":877,"column":3,"offset":33977},"end":{"line":877,"column":8,"offset":33982}}}],"position":{"start":{"line":877,"column":1,"offset":33975},"end":{"line":877,"column":10,"offset":33984}}}],"position":{"start":{"line":877,"column":1,"offset":33975},"end":{"line":877,"column":10,"offset":33984}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Bonus point if you are able to do this using only ","position":{"start":{"line":879,"column":1,"offset":33986},"end":{"line":879,"column":51,"offset":34036}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":879,"column":52,"offset":34037},"end":{"line":879,"column":53,"offset":34038}}}],"position":{"start":{"line":879,"column":51,"offset":34036},"end":{"line":879,"column":54,"offset":34039}}},{"type":"text","value":"(","position":{"start":{"line":879,"column":54,"offset":34039},"end":{"line":879,"column":55,"offset":34040}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":879,"column":56,"offset":34041},"end":{"line":879,"column":57,"offset":34042}}}],"position":{"start":{"line":879,"column":55,"offset":34040},"end":{"line":879,"column":58,"offset":34043}}},{"type":"text","value":") extra space, where ","position":{"start":{"line":879,"column":58,"offset":34043},"end":{"line":879,"column":79,"offset":34064}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":879,"column":80,"offset":34065},"end":{"line":879,"column":81,"offset":34066}}}],"position":{"start":{"line":879,"column":79,"offset":34064},"end":{"line":879,"column":82,"offset":34067}}},{"type":"text","value":" is the total number of rows in the triangle.","position":{"start":{"line":879,"column":82,"offset":34067},"end":{"line":879,"column":127,"offset":34112}}}],"position":{"start":{"line":879,"column":1,"offset":33986},"end":{"line":879,"column":127,"offset":34112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":881,"column":5,"offset":34118},"end":{"line":881,"column":14,"offset":34127}}}],"position":{"start":{"line":881,"column":1,"offset":34114},"end":{"line":881,"column":14,"offset":34127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":883,"column":1,"offset":34129},"end":{"line":883,"column":8,"offset":34136}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":883,"column":8,"offset":34136},"end":{"line":883,"column":17,"offset":34145}}},{"type":"text","value":" to be the minimum path sum from ","position":{"start":{"line":883,"column":17,"offset":34145},"end":{"line":883,"column":50,"offset":34178}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[0][0]"}],"position":{"start":{"line":883,"column":50,"offset":34178},"end":{"line":883,"column":66,"offset":34194}}},{"type":"text","value":" to ","position":{"start":{"line":883,"column":66,"offset":34194},"end":{"line":883,"column":70,"offset":34198}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[i][j]"}],"position":{"start":{"line":883,"column":70,"offset":34198},"end":{"line":883,"column":86,"offset":34214}}},{"type":"text","value":".","position":{"start":{"line":883,"column":86,"offset":34214},"end":{"line":883,"column":87,"offset":34215}}}],"position":{"start":{"line":883,"column":1,"offset":34129},"end":{"line":883,"column":87,"offset":34215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, 0) = f(i-1, j) + triangle[i][0]\nf(i, j) = min( f(i-1, j-1), f(i-1, j) ) + triangle[i][j], 0 < j < i\nf(i, i) = f(i-1, i-1) + triangle[i][i], i > 0\n"}],"position":{"start":{"line":885,"column":1,"offset":34217},"end":{"line":887,"column":50,"offset":34379}}}],"position":{"start":{"line":885,"column":1,"offset":34217},"end":{"line":887,"column":50,"offset":34379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":889,"column":1,"offset":34381},"end":{"line":889,"column":27,"offset":34407}}}],"position":{"start":{"line":889,"column":1,"offset":34381},"end":{"line":889,"column":27,"offset":34407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nlet minimumTotal = function (triangle) {\n    if (triangle.length <= 0) {\n        return 0;\n    }\n\n    const dp = [triangle[0][0]];\n    for (let i = 1; i < triangle.length; i++) {\n        dp[i] = dp[i - 1] + triangle[i][i];\n        for (let j = i - 1; j >= 1; j--) {\n            dp[j] = Math.min(dp[j], dp[j - 1]) + triangle[i][j];\n        }\n        dp[0] += triangle[i][0];\n    }\n    return Math.min(...dp);\n};\n"}],"position":{"start":{"line":891,"column":1,"offset":34409},"end":{"line":911,"column":4,"offset":34889}}}],"position":{"start":{"line":891,"column":1,"offset":34409},"end":{"line":911,"column":4,"offset":34889}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":913,"column":1,"offset":34891},"end":{"line":913,"column":4,"offset":34894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":915,"column":1,"offset":34896},"end":{"line":917,"column":10,"offset":34938}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":917,"column":10,"offset":34938},"end":{"line":917,"column":40,"offset":34968}}}],"position":{"start":{"line":917,"column":10,"offset":34938},"end":{"line":917,"column":40,"offset":34968}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":917,"column":40,"offset":34968},"end":{"line":918,"column":24,"offset":34992}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":918,"column":24,"offset":34992},"end":{"line":918,"column":68,"offset":35036}}}],"position":{"start":{"line":918,"column":24,"offset":34992},"end":{"line":918,"column":68,"offset":35036}}},{"type":"text","value":"\nSimilar Questions:\n\"Maximum Subarray\": ","position":{"start":{"line":918,"column":68,"offset":35036},"end":{"line":920,"column":21,"offset":35076}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-subarray"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-subarray","position":{"start":{"line":920,"column":21,"offset":35076},"end":{"line":920,"column":67,"offset":35122}}}],"position":{"start":{"line":920,"column":21,"offset":35076},"end":{"line":920,"column":67,"offset":35122}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":920,"column":67,"offset":35122},"end":{"line":921,"column":39,"offset":35161}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":921,"column":39,"offset":35161},"end":{"line":921,"column":103,"offset":35225}}}],"position":{"start":{"line":921,"column":39,"offset":35161},"end":{"line":921,"column":103,"offset":35225}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":921,"column":103,"offset":35225},"end":{"line":922,"column":40,"offset":35265}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":922,"column":40,"offset":35265},"end":{"line":922,"column":105,"offset":35330}}}],"position":{"start":{"line":922,"column":40,"offset":35265},"end":{"line":922,"column":105,"offset":35330}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":922,"column":105,"offset":35330},"end":{"line":923,"column":39,"offset":35369}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":923,"column":39,"offset":35369},"end":{"line":923,"column":103,"offset":35433}}}],"position":{"start":{"line":923,"column":39,"offset":35369},"end":{"line":923,"column":103,"offset":35433}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":923,"column":103,"offset":35433},"end":{"line":924,"column":50,"offset":35483}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":924,"column":50,"offset":35483},"end":{"line":924,"column":125,"offset":35558}}}],"position":{"start":{"line":924,"column":50,"offset":35483},"end":{"line":924,"column":125,"offset":35558}}}],"position":{"start":{"line":915,"column":1,"offset":34896},"end":{"line":924,"column":125,"offset":35558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":926,"column":1,"offset":35560},"end":{"line":926,"column":4,"offset":35563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stockdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":928,"column":2,"offset":35566},"end":{"line":928,"column":142,"offset":35706}}}],"position":{"start":{"line":928,"column":1,"offset":35565},"end":{"line":928,"column":247,"offset":35811}}}],"position":{"start":{"line":928,"column":1,"offset":35565},"end":{"line":928,"column":247,"offset":35811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":930,"column":4,"offset":35816},"end":{"line":930,"column":6,"offset":35818}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":930,"column":7,"offset":35819},"end":{"line":930,"column":43,"offset":35855}}}],"position":{"start":{"line":930,"column":6,"offset":35818},"end":{"line":930,"column":120,"offset":35932}}}],"position":{"start":{"line":930,"column":1,"offset":35813},"end":{"line":930,"column":120,"offset":35932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":932,"column":5,"offset":35938},"end":{"line":932,"column":13,"offset":35946}}}],"position":{"start":{"line":932,"column":1,"offset":35934},"end":{"line":932,"column":13,"offset":35946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":934,"column":1,"offset":35948},"end":{"line":934,"column":37,"offset":35984}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":934,"column":38,"offset":35985},"end":{"line":934,"column":39,"offset":35986}}}],"position":{"start":{"line":934,"column":37,"offset":35984},"end":{"line":934,"column":40,"offset":35987}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":934,"column":40,"offset":35987},"end":{"line":934,"column":88,"offset":36035}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":934,"column":89,"offset":36036},"end":{"line":934,"column":90,"offset":36037}}}],"position":{"start":{"line":934,"column":88,"offset":36035},"end":{"line":934,"column":91,"offset":36038}}},{"type":"text","value":".","position":{"start":{"line":934,"column":91,"offset":36038},"end":{"line":934,"column":92,"offset":36039}}}],"position":{"start":{"line":934,"column":1,"offset":35948},"end":{"line":934,"column":92,"offset":36039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.","position":{"start":{"line":936,"column":1,"offset":36041},"end":{"line":936,"column":160,"offset":36200}}}],"position":{"start":{"line":936,"column":1,"offset":36041},"end":{"line":936,"column":160,"offset":36200}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that you cannot sell a stock before you buy one.","position":{"start":{"line":938,"column":1,"offset":36202},"end":{"line":938,"column":54,"offset":36255}}}],"position":{"start":{"line":938,"column":1,"offset":36202},"end":{"line":938,"column":54,"offset":36255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":940,"column":3,"offset":36259},"end":{"line":940,"column":13,"offset":36269}}}],"position":{"start":{"line":940,"column":1,"offset":36257},"end":{"line":940,"column":15,"offset":36271}}}],"position":{"start":{"line":940,"column":1,"offset":36257},"end":{"line":940,"column":15,"offset":36271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n"}],"position":{"start":{"line":942,"column":1,"offset":36273},"end":{"line":948,"column":4,"offset":36480}}}],"position":{"start":{"line":942,"column":1,"offset":36273},"end":{"line":948,"column":4,"offset":36480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":950,"column":3,"offset":36484},"end":{"line":950,"column":13,"offset":36494}}}],"position":{"start":{"line":950,"column":1,"offset":36482},"end":{"line":950,"column":15,"offset":36496}}}],"position":{"start":{"line":950,"column":1,"offset":36482},"end":{"line":950,"column":15,"offset":36496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":952,"column":1,"offset":36498},"end":{"line":957,"column":4,"offset":36607}}}],"position":{"start":{"line":952,"column":1,"offset":36498},"end":{"line":957,"column":4,"offset":36607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":959,"column":5,"offset":36613},"end":{"line":959,"column":14,"offset":36622}}}],"position":{"start":{"line":959,"column":1,"offset":36609},"end":{"line":959,"column":14,"offset":36622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only care about positive profits. Take the frist item as base and scan to the right. If we encounter an item ","position":{"start":{"line":961,"column":1,"offset":36624},"end":{"line":961,"column":110,"offset":36733}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":961,"column":110,"offset":36733},"end":{"line":961,"column":113,"offset":36736}}},{"type":"text","value":" whose price ","position":{"start":{"line":961,"column":113,"offset":36736},"end":{"line":961,"column":126,"offset":36749}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":961,"column":126,"offset":36749},"end":{"line":961,"column":136,"offset":36759}}},{"type":"text","value":" is lower than the base (which means if we sell now the profit would be negative), we sell ","position":{"start":{"line":961,"column":136,"offset":36759},"end":{"line":961,"column":227,"offset":36850}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j-1"}],"position":{"start":{"line":961,"column":227,"offset":36850},"end":{"line":961,"column":232,"offset":36855}}},{"type":"text","value":" instead and make ","position":{"start":{"line":961,"column":232,"offset":36855},"end":{"line":961,"column":250,"offset":36873}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":961,"column":250,"offset":36873},"end":{"line":961,"column":253,"offset":36876}}},{"type":"text","value":" the new base.","position":{"start":{"line":961,"column":253,"offset":36876},"end":{"line":961,"column":267,"offset":36890}}}],"position":{"start":{"line":961,"column":1,"offset":36624},"end":{"line":961,"column":267,"offset":36890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because ","position":{"start":{"line":963,"column":1,"offset":36892},"end":{"line":963,"column":9,"offset":36900}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":963,"column":9,"offset":36900},"end":{"line":963,"column":19,"offset":36910}}},{"type":"text","value":" is lower that the base, using ","position":{"start":{"line":963,"column":19,"offset":36910},"end":{"line":963,"column":50,"offset":36941}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":963,"column":50,"offset":36941},"end":{"line":963,"column":53,"offset":36944}}},{"type":"text","value":" as new base is guaranteed to gain more profit comparing to the old one.","position":{"start":{"line":963,"column":53,"offset":36944},"end":{"line":963,"column":125,"offset":37016}}}],"position":{"start":{"line":963,"column":1,"offset":36892},"end":{"line":963,"column":125,"offset":37016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    let base = prices[0];\n    for (let i = 1; i < prices.length; i++) {\n        const profit = prices[i] - base;\n        if (profit > max) {\n            max = profit;\n        } else if (profit < 0) {\n            base = prices[i];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":965,"column":1,"offset":37018},"end":{"line":983,"column":4,"offset":37401}}}],"position":{"start":{"line":965,"column":1,"offset":37018},"end":{"line":983,"column":4,"offset":37401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":985,"column":1,"offset":37403},"end":{"line":985,"column":4,"offset":37406}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":987,"column":1,"offset":37408},"end":{"line":989,"column":10,"offset":37450}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":989,"column":10,"offset":37450},"end":{"line":989,"column":40,"offset":37480}}}],"position":{"start":{"line":989,"column":10,"offset":37450},"end":{"line":989,"column":40,"offset":37480}}},{"type":"text","value":"\n\"Greedy\": ","position":{"start":{"line":989,"column":40,"offset":37480},"end":{"line":990,"column":11,"offset":37491}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/greedy"},"children":[{"type":"text","value":"https://leetcode.com/tag/greedy","position":{"start":{"line":990,"column":11,"offset":37491},"end":{"line":990,"column":42,"offset":37522}}}],"position":{"start":{"line":990,"column":11,"offset":37491},"end":{"line":990,"column":42,"offset":37522}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":990,"column":42,"offset":37522},"end":{"line":992,"column":36,"offset":37577}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":992,"column":36,"offset":37577},"end":{"line":992,"column":97,"offset":37638}}}],"position":{"start":{"line":992,"column":36,"offset":37577},"end":{"line":992,"column":97,"offset":37638}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":992,"column":97,"offset":37638},"end":{"line":993,"column":40,"offset":37678}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":993,"column":40,"offset":37678},"end":{"line":993,"column":105,"offset":37743}}}],"position":{"start":{"line":993,"column":40,"offset":37678},"end":{"line":993,"column":105,"offset":37743}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":993,"column":105,"offset":37743},"end":{"line":994,"column":39,"offset":37782}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":994,"column":39,"offset":37782},"end":{"line":994,"column":103,"offset":37846}}}],"position":{"start":{"line":994,"column":39,"offset":37782},"end":{"line":994,"column":103,"offset":37846}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":994,"column":103,"offset":37846},"end":{"line":995,"column":50,"offset":37896}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":995,"column":50,"offset":37896},"end":{"line":995,"column":125,"offset":37971}}}],"position":{"start":{"line":995,"column":50,"offset":37896},"end":{"line":995,"column":125,"offset":37971}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Transaction Fee\": ","position":{"start":{"line":995,"column":125,"offset":37971},"end":{"line":996,"column":57,"offset":38028}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee","position":{"start":{"line":996,"column":57,"offset":38028},"end":{"line":996,"column":139,"offset":38110}}}],"position":{"start":{"line":996,"column":57,"offset":38028},"end":{"line":996,"column":139,"offset":38110}}}],"position":{"start":{"line":987,"column":1,"offset":37408},"end":{"line":996,"column":139,"offset":38110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":998,"column":1,"offset":38112},"end":{"line":998,"column":4,"offset":38115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1000,"column":2,"offset":38118},"end":{"line":1000,"column":142,"offset":38258}}}],"position":{"start":{"line":1000,"column":1,"offset":38117},"end":{"line":1000,"column":253,"offset":38369}}}],"position":{"start":{"line":1000,"column":1,"offset":38117},"end":{"line":1000,"column":253,"offset":38369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1002,"column":4,"offset":38374},"end":{"line":1002,"column":6,"offset":38376}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/"},"children":[{"type":"text","value":"122. Best Time to Buy and Sell Stock II","position":{"start":{"line":1002,"column":7,"offset":38377},"end":{"line":1002,"column":46,"offset":38416}}}],"position":{"start":{"line":1002,"column":6,"offset":38376},"end":{"line":1002,"column":126,"offset":38496}}}],"position":{"start":{"line":1002,"column":1,"offset":38371},"end":{"line":1002,"column":126,"offset":38496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1004,"column":5,"offset":38502},"end":{"line":1004,"column":13,"offset":38510}}}],"position":{"start":{"line":1004,"column":1,"offset":38498},"end":{"line":1004,"column":13,"offset":38510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1006,"column":1,"offset":38512},"end":{"line":1006,"column":37,"offset":38548}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1006,"column":38,"offset":38549},"end":{"line":1006,"column":39,"offset":38550}}}],"position":{"start":{"line":1006,"column":37,"offset":38548},"end":{"line":1006,"column":40,"offset":38551}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1006,"column":40,"offset":38551},"end":{"line":1006,"column":88,"offset":38599}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1006,"column":89,"offset":38600},"end":{"line":1006,"column":90,"offset":38601}}}],"position":{"start":{"line":1006,"column":88,"offset":38599},"end":{"line":1006,"column":91,"offset":38602}}},{"type":"text","value":".","position":{"start":{"line":1006,"column":91,"offset":38602},"end":{"line":1006,"column":92,"offset":38603}}}],"position":{"start":{"line":1006,"column":1,"offset":38512},"end":{"line":1006,"column":92,"offset":38603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).","position":{"start":{"line":1008,"column":1,"offset":38605},"end":{"line":1008,"column":162,"offset":38766}}}],"position":{"start":{"line":1008,"column":1,"offset":38605},"end":{"line":1008,"column":162,"offset":38766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1010,"column":3,"offset":38770},"end":{"line":1010,"column":8,"offset":38775}}}],"position":{"start":{"line":1010,"column":1,"offset":38768},"end":{"line":1010,"column":10,"offset":38777}}},{"type":"text","value":" You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1010,"column":10,"offset":38777},"end":{"line":1010,"column":125,"offset":38892}}}],"position":{"start":{"line":1010,"column":1,"offset":38768},"end":{"line":1010,"column":125,"offset":38892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1012,"column":3,"offset":38896},"end":{"line":1012,"column":13,"offset":38906}}}],"position":{"start":{"line":1012,"column":1,"offset":38894},"end":{"line":1012,"column":15,"offset":38908}}}],"position":{"start":{"line":1012,"column":1,"offset":38894},"end":{"line":1012,"column":15,"offset":38908}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n"}],"position":{"start":{"line":1014,"column":1,"offset":38910},"end":{"line":1020,"column":4,"offset":39128}}}],"position":{"start":{"line":1014,"column":1,"offset":38910},"end":{"line":1020,"column":4,"offset":39128}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1022,"column":3,"offset":39132},"end":{"line":1022,"column":13,"offset":39142}}}],"position":{"start":{"line":1022,"column":1,"offset":39130},"end":{"line":1022,"column":15,"offset":39144}}}],"position":{"start":{"line":1022,"column":1,"offset":39130},"end":{"line":1022,"column":15,"offset":39144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1024,"column":1,"offset":39146},"end":{"line":1031,"column":4,"offset":39460}}}],"position":{"start":{"line":1024,"column":1,"offset":39146},"end":{"line":1031,"column":4,"offset":39460}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1033,"column":3,"offset":39464},"end":{"line":1033,"column":13,"offset":39474}}}],"position":{"start":{"line":1033,"column":1,"offset":39462},"end":{"line":1033,"column":15,"offset":39476}}}],"position":{"start":{"line":1033,"column":1,"offset":39462},"end":{"line":1033,"column":15,"offset":39476}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1035,"column":1,"offset":39478},"end":{"line":1037,"column":76,"offset":39590}}}],"position":{"start":{"line":1035,"column":1,"offset":39478},"end":{"line":1037,"column":76,"offset":39590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1039,"column":5,"offset":39596},"end":{"line":1039,"column":14,"offset":39605}}}],"position":{"start":{"line":1039,"column":1,"offset":39592},"end":{"line":1039,"column":14,"offset":39605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sell immediately after the price drops. Or in other perspective, it is the sum of all the incremental pairs (buy in then immediately sell out).","position":{"start":{"line":1041,"column":1,"offset":39607},"end":{"line":1041,"column":144,"offset":39750}}}],"position":{"start":{"line":1041,"column":1,"offset":39607},"end":{"line":1041,"column":144,"offset":39750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max += prices[i] - prices[i - 1];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":1043,"column":1,"offset":39752},"end":{"line":1057,"column":4,"offset":40038}}}],"position":{"start":{"line":1043,"column":1,"offset":39752},"end":{"line":1057,"column":4,"offset":40038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1059,"column":1,"offset":40040},"end":{"line":1059,"column":4,"offset":40043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1061,"column":1,"offset":40045},"end":{"line":1063,"column":10,"offset":40087}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1063,"column":10,"offset":40087},"end":{"line":1063,"column":40,"offset":40117}}}],"position":{"start":{"line":1063,"column":10,"offset":40087},"end":{"line":1063,"column":40,"offset":40117}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":1063,"column":40,"offset":40117},"end":{"line":1064,"column":24,"offset":40141}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":1064,"column":24,"offset":40141},"end":{"line":1064,"column":68,"offset":40185}}}],"position":{"start":{"line":1064,"column":24,"offset":40141},"end":{"line":1064,"column":68,"offset":40185}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":1064,"column":68,"offset":40185},"end":{"line":1066,"column":36,"offset":40240}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":1066,"column":36,"offset":40240},"end":{"line":1066,"column":97,"offset":40301}}}],"position":{"start":{"line":1066,"column":36,"offset":40240},"end":{"line":1066,"column":97,"offset":40301}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":1066,"column":97,"offset":40301},"end":{"line":1067,"column":39,"offset":40340}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":1067,"column":39,"offset":40340},"end":{"line":1067,"column":103,"offset":40404}}}],"position":{"start":{"line":1067,"column":39,"offset":40340},"end":{"line":1067,"column":103,"offset":40404}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":1067,"column":103,"offset":40404},"end":{"line":1068,"column":39,"offset":40443}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":1068,"column":39,"offset":40443},"end":{"line":1068,"column":103,"offset":40507}}}],"position":{"start":{"line":1068,"column":39,"offset":40443},"end":{"line":1068,"column":103,"offset":40507}}},{"type":"text","value":"\n\"Maximum Sum of 3 Non-Overlapping Subarrays\": ","position":{"start":{"line":1068,"column":103,"offset":40507},"end":{"line":1069,"column":47,"offset":40554}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays","position":{"start":{"line":1069,"column":47,"offset":40554},"end":{"line":1069,"column":119,"offset":40626}}}],"position":{"start":{"line":1069,"column":47,"offset":40554},"end":{"line":1069,"column":119,"offset":40626}}}],"position":{"start":{"line":1061,"column":1,"offset":40045},"end":{"line":1069,"column":119,"offset":40626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1071,"column":1,"offset":40628},"end":{"line":1071,"column":4,"offset":40631}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#123-best-time-to-buy-and-sell-stock-iiihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iiidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1073,"column":2,"offset":40634},"end":{"line":1073,"column":142,"offset":40774}}}],"position":{"start":{"line":1073,"column":1,"offset":40633},"end":{"line":1073,"column":255,"offset":40887}}}],"position":{"start":{"line":1073,"column":1,"offset":40633},"end":{"line":1073,"column":255,"offset":40887}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1075,"column":4,"offset":40892},"end":{"line":1075,"column":6,"offset":40894}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/"},"children":[{"type":"text","value":"123. Best Time to Buy and Sell Stock III","position":{"start":{"line":1075,"column":7,"offset":40895},"end":{"line":1075,"column":47,"offset":40935}}}],"position":{"start":{"line":1075,"column":6,"offset":40894},"end":{"line":1075,"column":128,"offset":41016}}}],"position":{"start":{"line":1075,"column":1,"offset":40889},"end":{"line":1075,"column":128,"offset":41016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1077,"column":5,"offset":41022},"end":{"line":1077,"column":13,"offset":41030}}}],"position":{"start":{"line":1077,"column":1,"offset":41018},"end":{"line":1077,"column":13,"offset":41030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1079,"column":1,"offset":41032},"end":{"line":1079,"column":37,"offset":41068}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1079,"column":38,"offset":41069},"end":{"line":1079,"column":39,"offset":41070}}}],"position":{"start":{"line":1079,"column":37,"offset":41068},"end":{"line":1079,"column":40,"offset":41071}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1079,"column":40,"offset":41071},"end":{"line":1079,"column":88,"offset":41119}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1079,"column":89,"offset":41120},"end":{"line":1079,"column":90,"offset":41121}}}],"position":{"start":{"line":1079,"column":88,"offset":41119},"end":{"line":1079,"column":91,"offset":41122}}},{"type":"text","value":".","position":{"start":{"line":1079,"column":91,"offset":41122},"end":{"line":1079,"column":92,"offset":41123}}}],"position":{"start":{"line":1079,"column":1,"offset":41032},"end":{"line":1079,"column":92,"offset":41123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete at most ","position":{"start":{"line":1081,"column":1,"offset":41125},"end":{"line":1081,"column":74,"offset":41198}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1081,"column":75,"offset":41199},"end":{"line":1081,"column":78,"offset":41202}}}],"position":{"start":{"line":1081,"column":74,"offset":41198},"end":{"line":1081,"column":79,"offset":41203}}},{"type":"text","value":" transactions.","position":{"start":{"line":1081,"column":79,"offset":41203},"end":{"line":1081,"column":93,"offset":41217}}}],"position":{"start":{"line":1081,"column":1,"offset":41125},"end":{"line":1081,"column":93,"offset":41217}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"*","position":{"start":{"line":1083,"column":1,"offset":41219},"end":{"line":1083,"column":3,"offset":41221}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":3,"offset":41221},"end":{"line":1083,"column":5,"offset":41223}}},{"type":"text","value":"Note:","position":{"start":{"line":1083,"column":5,"offset":41223},"end":{"line":1083,"column":10,"offset":41228}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":10,"offset":41228},"end":{"line":1083,"column":12,"offset":41230}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":12,"offset":41230},"end":{"line":1083,"column":14,"offset":41232}}},{"type":"text","value":"You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1083,"column":14,"offset":41232},"end":{"line":1083,"column":128,"offset":41346}}}],"position":{"start":{"line":1083,"column":1,"offset":41219},"end":{"line":1083,"column":128,"offset":41346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1085,"column":3,"offset":41350},"end":{"line":1085,"column":13,"offset":41360}}}],"position":{"start":{"line":1085,"column":1,"offset":41348},"end":{"line":1085,"column":15,"offset":41362}}}],"position":{"start":{"line":1085,"column":1,"offset":41348},"end":{"line":1085,"column":15,"offset":41362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n"}],"position":{"start":{"line":1087,"column":1,"offset":41364},"end":{"line":1090,"column":96,"offset":41593}}}],"position":{"start":{"line":1087,"column":1,"offset":41364},"end":{"line":1090,"column":96,"offset":41593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1092,"column":3,"offset":41597},"end":{"line":1092,"column":13,"offset":41607}}}],"position":{"start":{"line":1092,"column":1,"offset":41595},"end":{"line":1092,"column":15,"offset":41609}}}],"position":{"start":{"line":1092,"column":1,"offset":41595},"end":{"line":1092,"column":15,"offset":41609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1094,"column":1,"offset":41611},"end":{"line":1101,"column":4,"offset":41925}}}],"position":{"start":{"line":1094,"column":1,"offset":41611},"end":{"line":1101,"column":4,"offset":41925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1103,"column":3,"offset":41929},"end":{"line":1103,"column":13,"offset":41939}}}],"position":{"start":{"line":1103,"column":1,"offset":41927},"end":{"line":1103,"column":15,"offset":41941}}}],"position":{"start":{"line":1103,"column":1,"offset":41927},"end":{"line":1103,"column":15,"offset":41941}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1105,"column":1,"offset":41943},"end":{"line":1107,"column":76,"offset":42055}}}],"position":{"start":{"line":1105,"column":1,"offset":41943},"end":{"line":1107,"column":76,"offset":42055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1109,"column":5,"offset":42061},"end":{"line":1109,"column":14,"offset":42070}}}],"position":{"start":{"line":1109,"column":1,"offset":42057},"end":{"line":1109,"column":14,"offset":42070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Multiple transactions may not be engaged in at the same time. That means if we view the days that involed in the same transaction as a group, there won't be any intersection. We may complete at most ","position":{"start":{"line":1111,"column":1,"offset":42072},"end":{"line":1111,"column":200,"offset":42271}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1111,"column":201,"offset":42272},"end":{"line":1111,"column":204,"offset":42275}}}],"position":{"start":{"line":1111,"column":200,"offset":42271},"end":{"line":1111,"column":205,"offset":42276}}},{"type":"text","value":" transactions, so divide the days into two groups, ","position":{"start":{"line":1111,"column":205,"offset":42276},"end":{"line":1111,"column":256,"offset":42327}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...k]"}],"position":{"start":{"line":1111,"column":256,"offset":42327},"end":{"line":1111,"column":265,"offset":42336}}},{"type":"text","value":" and ","position":{"start":{"line":1111,"column":265,"offset":42336},"end":{"line":1111,"column":270,"offset":42341}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[k...n-1]"}],"position":{"start":{"line":1111,"column":270,"offset":42341},"end":{"line":1111,"column":281,"offset":42352}}},{"type":"text","value":". Notice ","position":{"start":{"line":1111,"column":281,"offset":42352},"end":{"line":1111,"column":290,"offset":42361}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"k"}],"position":{"start":{"line":1111,"column":290,"offset":42361},"end":{"line":1111,"column":293,"offset":42364}}},{"type":"text","value":" exists in both groups because technically we can sell out then immediately buy in at the same day.","position":{"start":{"line":1111,"column":293,"offset":42364},"end":{"line":1111,"column":392,"offset":42463}}}],"position":{"start":{"line":1111,"column":1,"offset":42072},"end":{"line":1111,"column":392,"offset":42463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1113,"column":1,"offset":42465},"end":{"line":1113,"column":8,"offset":42472}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(i)"}],"position":{"start":{"line":1113,"column":8,"offset":42472},"end":{"line":1113,"column":15,"offset":42479}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1113,"column":15,"offset":42479},"end":{"line":1113,"column":44,"offset":42508}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...i]"}],"position":{"start":{"line":1113,"column":44,"offset":42508},"end":{"line":1113,"column":53,"offset":42517}}},{"type":"text","value":". This is just like the problem of ","position":{"start":{"line":1113,"column":53,"offset":42517},"end":{"line":1113,"column":88,"offset":42552}}},{"type":"element","tagName":"a","properties":{"href":"./121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock.md"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":1113,"column":89,"offset":42553},"end":{"line":1113,"column":125,"offset":42589}}}],"position":{"start":{"line":1113,"column":88,"offset":42552},"end":{"line":1113,"column":183,"offset":42647}}},{"type":"text","value":".","position":{"start":{"line":1113,"column":183,"offset":42647},"end":{"line":1113,"column":184,"offset":42648}}}],"position":{"start":{"line":1113,"column":1,"offset":42465},"end":{"line":1113,"column":184,"offset":42648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(0) = 0\np1(i) = max( p1(i-1), prices[i] - min(prices[0], ..., prices[i-1]) ), 0 < i <= n-1\n"}],"position":{"start":{"line":1115,"column":1,"offset":42650},"end":{"line":1116,"column":87,"offset":42750}}}],"position":{"start":{"line":1115,"column":1,"offset":42650},"end":{"line":1116,"column":87,"offset":42750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1118,"column":1,"offset":42752},"end":{"line":1118,"column":8,"offset":42759}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(i)"}],"position":{"start":{"line":1118,"column":8,"offset":42759},"end":{"line":1118,"column":15,"offset":42766}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1118,"column":15,"offset":42766},"end":{"line":1118,"column":44,"offset":42795}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[i...n-1]"}],"position":{"start":{"line":1118,"column":44,"offset":42795},"end":{"line":1118,"column":55,"offset":42806}}},{"type":"text","value":". This is the mirror of ","position":{"start":{"line":1118,"column":55,"offset":42806},"end":{"line":1118,"column":79,"offset":42830}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1"}],"position":{"start":{"line":1118,"column":79,"offset":42830},"end":{"line":1118,"column":83,"offset":42834}}},{"type":"text","value":".","position":{"start":{"line":1118,"column":83,"offset":42834},"end":{"line":1118,"column":84,"offset":42835}}}],"position":{"start":{"line":1118,"column":1,"offset":42752},"end":{"line":1118,"column":84,"offset":42835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(n-1) = 0\np2(i) = max( p2(i+1), max(prices[i], ..., prices[n-1]) - prices[i] ), n-1 > i >= 0\n"}],"position":{"start":{"line":1120,"column":1,"offset":42837},"end":{"line":1121,"column":87,"offset":42939}}}],"position":{"start":{"line":1120,"column":1,"offset":42837},"end":{"line":1121,"column":87,"offset":42939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1123,"column":1,"offset":42941},"end":{"line":1123,"column":8,"offset":42948}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(k)"}],"position":{"start":{"line":1123,"column":8,"offset":42948},"end":{"line":1123,"column":14,"offset":42954}}},{"type":"text","value":" to be ","position":{"start":{"line":1123,"column":14,"offset":42954},"end":{"line":1123,"column":21,"offset":42961}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(k) + p2(k)"}],"position":{"start":{"line":1123,"column":21,"offset":42961},"end":{"line":1123,"column":36,"offset":42976}}},{"type":"text","value":". We need to get ","position":{"start":{"line":1123,"column":36,"offset":42976},"end":{"line":1123,"column":53,"offset":42993}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"max( f(0), ..., f(n-1) )"}],"position":{"start":{"line":1123,"column":53,"offset":42993},"end":{"line":1123,"column":79,"offset":43019}}},{"type":"text","value":".","position":{"start":{"line":1123,"column":79,"offset":43019},"end":{"line":1123,"column":80,"offset":43020}}}],"position":{"start":{"line":1123,"column":1,"offset":42941},"end":{"line":1123,"column":80,"offset":43020}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    const len = prices.length;\n    if (len <= 1) {\n        return 0;\n    }\n\n    const dp = [0];\n\n    let min = prices[0];\n    for (let i = 1; i < len; i++) {\n        dp[i] = Math.max(dp[i - 1], prices[i] - min);\n        min = Math.min(prices[i], min);\n    }\n\n    let p2 = 0;\n    let max = prices[len - 1];\n    for (let i = len - 2; i >= 0; i--) {\n        max = Math.max(prices[i], max);\n        p2 = Math.max(p2, max - prices[i]);\n        dp[i] += p2;\n    }\n\n    return Math.max(...dp);\n};\n"}],"position":{"start":{"line":1125,"column":1,"offset":43022},"end":{"line":1154,"column":4,"offset":43613}}}],"position":{"start":{"line":1125,"column":1,"offset":43022},"end":{"line":1154,"column":4,"offset":43613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1156,"column":1,"offset":43615},"end":{"line":1156,"column":4,"offset":43618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1158,"column":1,"offset":43620},"end":{"line":1160,"column":9,"offset":43661}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1160,"column":9,"offset":43661},"end":{"line":1160,"column":38,"offset":43690}}}],"position":{"start":{"line":1160,"column":9,"offset":43661},"end":{"line":1160,"column":38,"offset":43690}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1160,"column":38,"offset":43690},"end":{"line":1161,"column":23,"offset":43713}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1161,"column":23,"offset":43713},"end":{"line":1161,"column":66,"offset":43756}}}],"position":{"start":{"line":1161,"column":23,"offset":43713},"end":{"line":1161,"column":66,"offset":43756}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1161,"column":66,"offset":43756},"end":{"line":1163,"column":13,"offset":43788}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1163,"column":13,"offset":43788},"end":{"line":1163,"column":51,"offset":43826}}}],"position":{"start":{"line":1163,"column":13,"offset":43788},"end":{"line":1163,"column":51,"offset":43826}}},{"type":"text","value":"\n\"Sum Root to Leaf Numbers\": ","position":{"start":{"line":1163,"column":51,"offset":43826},"end":{"line":1164,"column":29,"offset":43855}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers"},"children":[{"type":"text","value":"https://leetcode.com/problems/sum-root-to-leaf-numbers","position":{"start":{"line":1164,"column":29,"offset":43855},"end":{"line":1164,"column":83,"offset":43909}}}],"position":{"start":{"line":1164,"column":29,"offset":43855},"end":{"line":1164,"column":83,"offset":43909}}},{"type":"text","value":"\n\"Path Sum IV\": ","position":{"start":{"line":1164,"column":83,"offset":43909},"end":{"line":1165,"column":16,"offset":43925}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum-iv","position":{"start":{"line":1165,"column":16,"offset":43925},"end":{"line":1165,"column":57,"offset":43966}}}],"position":{"start":{"line":1165,"column":16,"offset":43925},"end":{"line":1165,"column":57,"offset":43966}}},{"type":"text","value":"\n\"Longest Univalue Path\": ","position":{"start":{"line":1165,"column":57,"offset":43966},"end":{"line":1166,"column":26,"offset":43992}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-univalue-path"},"children":[{"type":"text","value":"https://leetcode.com/problems/longest-univalue-path","position":{"start":{"line":1166,"column":26,"offset":43992},"end":{"line":1166,"column":77,"offset":44043}}}],"position":{"start":{"line":1166,"column":26,"offset":43992},"end":{"line":1166,"column":77,"offset":44043}}}],"position":{"start":{"line":1158,"column":1,"offset":43620},"end":{"line":1166,"column":77,"offset":44043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1168,"column":1,"offset":44045},"end":{"line":1168,"column":4,"offset":44048}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sumdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1170,"column":2,"offset":44051},"end":{"line":1170,"column":142,"offset":44191}}}],"position":{"start":{"line":1170,"column":1,"offset":44050},"end":{"line":1170,"column":241,"offset":44290}}}],"position":{"start":{"line":1170,"column":1,"offset":44050},"end":{"line":1170,"column":241,"offset":44290}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1172,"column":4,"offset":44295},"end":{"line":1172,"column":6,"offset":44297}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum/description/"},"children":[{"type":"text","value":"124. Binary Tree Maximum Path Sum","position":{"start":{"line":1172,"column":7,"offset":44298},"end":{"line":1172,"column":40,"offset":44331}}}],"position":{"start":{"line":1172,"column":6,"offset":44297},"end":{"line":1172,"column":114,"offset":44405}}}],"position":{"start":{"line":1172,"column":1,"offset":44292},"end":{"line":1172,"column":114,"offset":44405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1174,"column":5,"offset":44411},"end":{"line":1174,"column":13,"offset":44419}}}],"position":{"start":{"line":1174,"column":1,"offset":44407},"end":{"line":1174,"column":13,"offset":44419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a ","position":{"start":{"line":1176,"column":1,"offset":44421},"end":{"line":1176,"column":9,"offset":44429}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"non-empty","position":{"start":{"line":1176,"column":11,"offset":44431},"end":{"line":1176,"column":20,"offset":44440}}}],"position":{"start":{"line":1176,"column":9,"offset":44429},"end":{"line":1176,"column":22,"offset":44442}}},{"type":"text","value":" binary tree, find the maximum path sum.","position":{"start":{"line":1176,"column":22,"offset":44442},"end":{"line":1176,"column":62,"offset":44482}}}],"position":{"start":{"line":1176,"column":1,"offset":44421},"end":{"line":1176,"column":62,"offset":44482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain ","position":{"start":{"line":1178,"column":1,"offset":44484},"end":{"line":1178,"column":168,"offset":44651}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"at least one node","position":{"start":{"line":1178,"column":170,"offset":44653},"end":{"line":1178,"column":187,"offset":44670}}}],"position":{"start":{"line":1178,"column":168,"offset":44651},"end":{"line":1178,"column":189,"offset":44672}}},{"type":"text","value":" and does not need to go through the root.","position":{"start":{"line":1178,"column":189,"offset":44672},"end":{"line":1178,"column":231,"offset":44714}}}],"position":{"start":{"line":1178,"column":1,"offset":44484},"end":{"line":1178,"column":231,"offset":44714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1180,"column":3,"offset":44718},"end":{"line":1180,"column":13,"offset":44728}}}],"position":{"start":{"line":1180,"column":1,"offset":44716},"end":{"line":1180,"column":15,"offset":44730}}}],"position":{"start":{"line":1180,"column":1,"offset":44716},"end":{"line":1180,"column":15,"offset":44730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n"}],"position":{"start":{"line":1182,"column":1,"offset":44732},"end":{"line":1191,"column":4,"offset":44797}}}],"position":{"start":{"line":1182,"column":1,"offset":44732},"end":{"line":1191,"column":4,"offset":44797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1193,"column":3,"offset":44801},"end":{"line":1193,"column":13,"offset":44811}}}],"position":{"start":{"line":1193,"column":1,"offset":44799},"end":{"line":1193,"column":15,"offset":44813}}}],"position":{"start":{"line":1193,"column":1,"offset":44799},"end":{"line":1193,"column":15,"offset":44813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n"}],"position":{"start":{"line":1195,"column":1,"offset":44815},"end":{"line":1206,"column":4,"offset":44910}}}],"position":{"start":{"line":1195,"column":1,"offset":44815},"end":{"line":1206,"column":4,"offset":44910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1208,"column":5,"offset":44916},"end":{"line":1208,"column":14,"offset":44925}}}],"position":{"start":{"line":1208,"column":1,"offset":44912},"end":{"line":1208,"column":14,"offset":44925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":1210,"column":1,"offset":44927},"end":{"line":1210,"column":11,"offset":44937}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":1210,"column":11,"offset":44937},"end":{"line":1210,"column":17,"offset":44943}}},{"type":"text","value":", there are six possible ways to get the max path sum:","position":{"start":{"line":1210,"column":17,"offset":44943},"end":{"line":1210,"column":71,"offset":44997}}}],"position":{"start":{"line":1210,"column":1,"offset":44927},"end":{"line":1210,"column":71,"offset":44997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With ","position":{"start":{"line":1212,"column":5,"offset":45003},"end":{"line":1212,"column":10,"offset":45008}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1212,"column":10,"offset":45008},"end":{"line":1212,"column":20,"offset":45018}}}],"position":{"start":{"line":1212,"column":5,"offset":45003},"end":{"line":1212,"column":20,"offset":45018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1213,"column":9,"offset":45027},"end":{"line":1213,"column":19,"offset":45037}}},{"type":"text","value":" plus the max sum of a path that ends with ","position":{"start":{"line":1213,"column":19,"offset":45037},"end":{"line":1213,"column":62,"offset":45080}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1213,"column":62,"offset":45080},"end":{"line":1213,"column":73,"offset":45091}}},{"type":"text","value":".","position":{"start":{"line":1213,"column":73,"offset":45091},"end":{"line":1213,"column":74,"offset":45092}}}],"position":{"start":{"line":1213,"column":5,"offset":45023},"end":{"line":1213,"column":74,"offset":45092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1214,"column":9,"offset":45101},"end":{"line":1214,"column":19,"offset":45111}}},{"type":"text","value":" plus the max sum of a path that starts with ","position":{"start":{"line":1214,"column":19,"offset":45111},"end":{"line":1214,"column":64,"offset":45156}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1214,"column":64,"offset":45156},"end":{"line":1214,"column":76,"offset":45168}}},{"type":"text","value":".","position":{"start":{"line":1214,"column":76,"offset":45168},"end":{"line":1214,"column":77,"offset":45169}}}],"position":{"start":{"line":1214,"column":5,"offset":45097},"end":{"line":1214,"column":77,"offset":45169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1215,"column":9,"offset":45178},"end":{"line":1215,"column":19,"offset":45188}}},{"type":"text","value":" plus the max sum of both paths.","position":{"start":{"line":1215,"column":19,"offset":45188},"end":{"line":1215,"column":51,"offset":45220}}}],"position":{"start":{"line":1215,"column":5,"offset":45174},"end":{"line":1215,"column":51,"offset":45220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Just ","position":{"start":{"line":1216,"column":9,"offset":45229},"end":{"line":1216,"column":14,"offset":45234}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1216,"column":14,"offset":45234},"end":{"line":1216,"column":24,"offset":45244}}},{"type":"text","value":" (the max sum of both paths are negative).","position":{"start":{"line":1216,"column":24,"offset":45244},"end":{"line":1216,"column":66,"offset":45286}}}],"position":{"start":{"line":1216,"column":5,"offset":45225},"end":{"line":1216,"column":66,"offset":45286}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1213,"column":5,"offset":45023},"end":{"line":1216,"column":66,"offset":45286}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1212,"column":1,"offset":44999},"end":{"line":1216,"column":66,"offset":45286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Without","position":{"start":{"line":1217,"column":5,"offset":45291},"end":{"line":1217,"column":12,"offset":45298}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1217,"column":12,"offset":45298},"end":{"line":1217,"column":22,"offset":45308}}},{"type":"text","value":" (disconnected)","position":{"start":{"line":1217,"column":22,"offset":45308},"end":{"line":1217,"column":37,"offset":45323}}}],"position":{"start":{"line":1217,"column":5,"offset":45291},"end":{"line":1217,"column":37,"offset":45323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1218,"column":9,"offset":45332},"end":{"line":1218,"column":49,"offset":45372}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1218,"column":49,"offset":45372},"end":{"line":1218,"column":60,"offset":45383}}},{"type":"text","value":" subtree.","position":{"start":{"line":1218,"column":60,"offset":45383},"end":{"line":1218,"column":69,"offset":45392}}}],"position":{"start":{"line":1218,"column":5,"offset":45328},"end":{"line":1218,"column":69,"offset":45392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1219,"column":9,"offset":45401},"end":{"line":1219,"column":49,"offset":45441}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1219,"column":49,"offset":45441},"end":{"line":1219,"column":61,"offset":45453}}},{"type":"text","value":" subtree.","position":{"start":{"line":1219,"column":61,"offset":45453},"end":{"line":1219,"column":70,"offset":45462}}}],"position":{"start":{"line":1219,"column":5,"offset":45397},"end":{"line":1219,"column":70,"offset":45462}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1218,"column":5,"offset":45328},"end":{"line":1219,"column":70,"offset":45462}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1217,"column":1,"offset":45287},"end":{"line":1219,"column":70,"offset":45462}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1212,"column":1,"offset":44999},"end":{"line":1219,"column":70,"offset":45462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are two ways to implement this.","position":{"start":{"line":1221,"column":1,"offset":45464},"end":{"line":1221,"column":38,"offset":45501}}}],"position":{"start":{"line":1221,"column":1,"offset":45464},"end":{"line":1221,"column":38,"offset":45501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1223,"column":6,"offset":45508},"end":{"line":1223,"column":9,"offset":45511}}}],"position":{"start":{"line":1223,"column":1,"offset":45503},"end":{"line":1223,"column":9,"offset":45511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a function that returns two values. The max sum of a path that may or may not end with ","position":{"start":{"line":1225,"column":1,"offset":45513},"end":{"line":1225,"column":95,"offset":45607}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1225,"column":95,"offset":45607},"end":{"line":1225,"column":101,"offset":45613}}},{"type":"text","value":" node, and the max sum of the path that ends with ","position":{"start":{"line":1225,"column":101,"offset":45613},"end":{"line":1225,"column":151,"offset":45663}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1225,"column":151,"offset":45663},"end":{"line":1225,"column":157,"offset":45669}}},{"type":"text","value":" node.","position":{"start":{"line":1225,"column":157,"offset":45669},"end":{"line":1225,"column":163,"offset":45675}}}],"position":{"start":{"line":1225,"column":1,"offset":45513},"end":{"line":1225,"column":163,"offset":45675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    return Math.max(..._maxPathSum(root));\n};\n\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nfunction _maxPathSum(root) {\n    if (!root) {\n        return [-Infinity, -Infinity];\n    }\n\n    const left = _maxPathSum(root.left);\n    const right = _maxPathSum(root.right);\n    return [Math.max(left[0], right[0], root.val + Math.max(0, left[1], right[1], left[1] + right[1])), Math.max(left[1], right[1], 0) + root.val];\n}\n"}],"position":{"start":{"line":1227,"column":1,"offset":45677},"end":{"line":1256,"column":4,"offset":46344}}}],"position":{"start":{"line":1227,"column":1,"offset":45677},"end":{"line":1256,"column":4,"offset":46344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1258,"column":6,"offset":46351},"end":{"line":1258,"column":9,"offset":46354}}}],"position":{"start":{"line":1258,"column":1,"offset":46346},"end":{"line":1258,"column":9,"offset":46354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just return the later (max sum of a path that ends with ","position":{"start":{"line":1260,"column":1,"offset":46356},"end":{"line":1260,"column":57,"offset":46412}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1260,"column":57,"offset":46412},"end":{"line":1260,"column":63,"offset":46418}}},{"type":"text","value":"). Maintain a global variable to store the disconnected max sum.","position":{"start":{"line":1260,"column":63,"offset":46418},"end":{"line":1260,"column":127,"offset":46482}}}],"position":{"start":{"line":1260,"column":1,"offset":46356},"end":{"line":1260,"column":127,"offset":46482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    const global = { max: -Infinity };\n    _maxPathSum(root, global);\n    return global.max;\n};\n\n/**\n * @param {TreeNode} root\n * @param {object} global\n * @param {number} global.max\n * @return {number[]}\n */\nfunction _maxPathSum(root, global) {\n    if (!root) {\n        return -Infinity;\n    }\n\n    const left = _maxPathSum(root.left, global);\n    const right = _maxPathSum(root.right, global);\n    const localMax = Math.max(left, right, 0) + root.val;\n    global.max = Math.max(global.max, localMax, root.val + left + right);\n    return localMax;\n}\n"}],"position":{"start":{"line":1262,"column":1,"offset":46484},"end":{"line":1297,"column":4,"offset":47273}}}],"position":{"start":{"line":1262,"column":1,"offset":46484},"end":{"line":1297,"column":4,"offset":47273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1299,"column":1,"offset":47275},"end":{"line":1299,"column":4,"offset":47278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Two Pointers\": ","position":{"start":{"line":1301,"column":1,"offset":47280},"end":{"line":1303,"column":17,"offset":47329}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/two-pointers"},"children":[{"type":"text","value":"https://leetcode.com/tag/two-pointers","position":{"start":{"line":1303,"column":17,"offset":47329},"end":{"line":1303,"column":54,"offset":47366}}}],"position":{"start":{"line":1303,"column":17,"offset":47329},"end":{"line":1303,"column":54,"offset":47366}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1303,"column":54,"offset":47366},"end":{"line":1304,"column":11,"offset":47377}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1304,"column":11,"offset":47377},"end":{"line":1304,"column":42,"offset":47408}}}],"position":{"start":{"line":1304,"column":11,"offset":47377},"end":{"line":1304,"column":42,"offset":47408}}},{"type":"text","value":"\nSimilar Questions:\n\"Palindrome Linked List\": ","position":{"start":{"line":1304,"column":42,"offset":47408},"end":{"line":1306,"column":27,"offset":47454}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/palindrome-linked-list"},"children":[{"type":"text","value":"https://leetcode.com/problems/palindrome-linked-list","position":{"start":{"line":1306,"column":27,"offset":47454},"end":{"line":1306,"column":79,"offset":47506}}}],"position":{"start":{"line":1306,"column":27,"offset":47454},"end":{"line":1306,"column":79,"offset":47506}}},{"type":"text","value":"\n\"Valid Palindrome II\": ","position":{"start":{"line":1306,"column":79,"offset":47506},"end":{"line":1307,"column":24,"offset":47530}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/valid-palindrome-ii","position":{"start":{"line":1307,"column":24,"offset":47530},"end":{"line":1307,"column":73,"offset":47579}}}],"position":{"start":{"line":1307,"column":24,"offset":47530},"end":{"line":1307,"column":73,"offset":47579}}}],"position":{"start":{"line":1301,"column":1,"offset":47280},"end":{"line":1307,"column":73,"offset":47579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1309,"column":1,"offset":47581},"end":{"line":1309,"column":4,"offset":47584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1311,"column":2,"offset":47587},"end":{"line":1311,"column":142,"offset":47727}}}],"position":{"start":{"line":1311,"column":1,"offset":47586},"end":{"line":1311,"column":217,"offset":47802}}}],"position":{"start":{"line":1311,"column":1,"offset":47586},"end":{"line":1311,"column":217,"offset":47802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1313,"column":4,"offset":47807},"end":{"line":1313,"column":6,"offset":47809}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome/description/"},"children":[{"type":"text","value":"125. Valid Palindrome","position":{"start":{"line":1313,"column":7,"offset":47810},"end":{"line":1313,"column":28,"offset":47831}}}],"position":{"start":{"line":1313,"column":6,"offset":47809},"end":{"line":1313,"column":90,"offset":47893}}}],"position":{"start":{"line":1313,"column":1,"offset":47804},"end":{"line":1313,"column":90,"offset":47893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1315,"column":5,"offset":47899},"end":{"line":1315,"column":13,"offset":47907}}}],"position":{"start":{"line":1315,"column":1,"offset":47895},"end":{"line":1315,"column":13,"offset":47907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.","position":{"start":{"line":1317,"column":1,"offset":47909},"end":{"line":1317,"column":110,"offset":48018}}}],"position":{"start":{"line":1317,"column":1,"offset":47909},"end":{"line":1317,"column":110,"offset":48018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1319,"column":3,"offset":48022},"end":{"line":1319,"column":8,"offset":48027}}}],"position":{"start":{"line":1319,"column":1,"offset":48020},"end":{"line":1319,"column":10,"offset":48029}}},{"type":"text","value":" For the purpose of this problem, we define empty string as valid palindrome.","position":{"start":{"line":1319,"column":10,"offset":48029},"end":{"line":1319,"column":87,"offset":48106}}}],"position":{"start":{"line":1319,"column":1,"offset":48020},"end":{"line":1319,"column":87,"offset":48106}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1321,"column":3,"offset":48110},"end":{"line":1321,"column":13,"offset":48120}}}],"position":{"start":{"line":1321,"column":1,"offset":48108},"end":{"line":1321,"column":15,"offset":48122}}}],"position":{"start":{"line":1321,"column":1,"offset":48108},"end":{"line":1321,"column":15,"offset":48122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"A man, a plan, a canal: Panama\"\nOutput: true\n"}],"position":{"start":{"line":1323,"column":1,"offset":48124},"end":{"line":1327,"column":4,"offset":48185}}}],"position":{"start":{"line":1323,"column":1,"offset":48124},"end":{"line":1327,"column":4,"offset":48185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1329,"column":3,"offset":48189},"end":{"line":1329,"column":13,"offset":48199}}}],"position":{"start":{"line":1329,"column":1,"offset":48187},"end":{"line":1329,"column":15,"offset":48201}}}],"position":{"start":{"line":1329,"column":1,"offset":48187},"end":{"line":1329,"column":15,"offset":48201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"race a car\"\nOutput: false\n"}],"position":{"start":{"line":1331,"column":1,"offset":48203},"end":{"line":1335,"column":4,"offset":48245}}}],"position":{"start":{"line":1331,"column":1,"offset":48203},"end":{"line":1335,"column":4,"offset":48245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1337,"column":5,"offset":48251},"end":{"line":1337,"column":14,"offset":48260}}}],"position":{"start":{"line":1337,"column":1,"offset":48247},"end":{"line":1337,"column":14,"offset":48260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1339,"column":6,"offset":48267},"end":{"line":1339,"column":9,"offset":48270}}}],"position":{"start":{"line":1339,"column":1,"offset":48262},"end":{"line":1339,"column":9,"offset":48270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.toLowerCase().split(/[^a-z0-9]*/);\n    return clean.join('') === clean.reverse().join('');\n};\n"}],"position":{"start":{"line":1341,"column":1,"offset":48272},"end":{"line":1350,"column":4,"offset":48479}}}],"position":{"start":{"line":1341,"column":1,"offset":48272},"end":{"line":1350,"column":4,"offset":48479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1352,"column":6,"offset":48486},"end":{"line":1352,"column":9,"offset":48489}}}],"position":{"start":{"line":1352,"column":1,"offset":48481},"end":{"line":1352,"column":9,"offset":48489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remove non-alphanumeric characters then compare.","position":{"start":{"line":1354,"column":1,"offset":48491},"end":{"line":1354,"column":49,"offset":48539}}}],"position":{"start":{"line":1354,"column":1,"offset":48491},"end":{"line":1354,"column":49,"offset":48539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    for (let i = 0, j = clean.length - 1; i < j; i++, j--) {\n        if (clean[i] !== clean[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n"}],"position":{"start":{"line":1356,"column":1,"offset":48541},"end":{"line":1370,"column":4,"offset":48858}}}],"position":{"start":{"line":1356,"column":1,"offset":48541},"end":{"line":1370,"column":4,"offset":48858}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":1372,"column":6,"offset":48865},"end":{"line":1372,"column":11,"offset":48870}}}],"position":{"start":{"line":1372,"column":1,"offset":48860},"end":{"line":1372,"column":11,"offset":48870}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compare the char codes.","position":{"start":{"line":1374,"column":1,"offset":48872},"end":{"line":1374,"column":24,"offset":48895}}}],"position":{"start":{"line":1374,"column":1,"offset":48872},"end":{"line":1374,"column":24,"offset":48895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    for (let i = 0, j = s.length - 1; i < j; i++, j--) {\n        let left = s.charCodeAt(i);\n        while (i < j && (left < 48 || (left > 57 && left < 65) || (left > 90 && left < 97) || left > 122)) {\n            left = s.charCodeAt(++i);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (left >= 65 && left <= 90) {\n            left += 32;\n        }\n\n        let right = s.charCodeAt(j);\n        while (i < j && (right < 48 || (right > 57 && right < 65) || (right > 90 && right < 97) || right > 122)) {\n            right = s.charCodeAt(--j);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (right >= 65 && right <= 90) {\n            right += 32;\n        }\n\n        if (left !== right) {\n            return false;\n        }\n    }\n\n    return true;\n};\n"}],"position":{"start":{"line":1376,"column":1,"offset":48897},"end":{"line":1412,"column":4,"offset":49801}}}],"position":{"start":{"line":1376,"column":1,"offset":48897},"end":{"line":1412,"column":4,"offset":49801}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1414,"column":1,"offset":49803},"end":{"line":1414,"column":4,"offset":49806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1416,"column":1,"offset":49808},"end":{"line":1418,"column":10,"offset":49850}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1418,"column":10,"offset":49850},"end":{"line":1418,"column":40,"offset":49880}}}],"position":{"start":{"line":1418,"column":10,"offset":49850},"end":{"line":1418,"column":40,"offset":49880}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1418,"column":40,"offset":49880},"end":{"line":1419,"column":11,"offset":49891}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1419,"column":11,"offset":49891},"end":{"line":1419,"column":42,"offset":49922}}}],"position":{"start":{"line":1419,"column":11,"offset":49891},"end":{"line":1419,"column":42,"offset":49922}}},{"type":"text","value":"\n\"Backtracking\": ","position":{"start":{"line":1419,"column":42,"offset":49922},"end":{"line":1420,"column":17,"offset":49939}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/backtracking"},"children":[{"type":"text","value":"https://leetcode.com/tag/backtracking","position":{"start":{"line":1420,"column":17,"offset":49939},"end":{"line":1420,"column":54,"offset":49976}}}],"position":{"start":{"line":1420,"column":17,"offset":49939},"end":{"line":1420,"column":54,"offset":49976}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1420,"column":54,"offset":49976},"end":{"line":1421,"column":25,"offset":50001}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1421,"column":25,"offset":50001},"end":{"line":1421,"column":70,"offset":50046}}}],"position":{"start":{"line":1421,"column":25,"offset":50001},"end":{"line":1421,"column":70,"offset":50046}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder\": ","position":{"start":{"line":1421,"column":70,"offset":50046},"end":{"line":1423,"column":16,"offset":50081}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder","position":{"start":{"line":1423,"column":16,"offset":50081},"end":{"line":1423,"column":57,"offset":50122}}}],"position":{"start":{"line":1423,"column":16,"offset":50081},"end":{"line":1423,"column":57,"offset":50122}}}],"position":{"start":{"line":1416,"column":1,"offset":49808},"end":{"line":1423,"column":57,"offset":50122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1425,"column":1,"offset":50124},"end":{"line":1425,"column":4,"offset":50127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1427,"column":2,"offset":50130},"end":{"line":1427,"column":142,"offset":50270}}}],"position":{"start":{"line":1427,"column":1,"offset":50129},"end":{"line":1427,"column":213,"offset":50341}}}],"position":{"start":{"line":1427,"column":1,"offset":50129},"end":{"line":1427,"column":213,"offset":50341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1429,"column":4,"offset":50346},"end":{"line":1429,"column":6,"offset":50348}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii/description/"},"children":[{"type":"text","value":"126. Word Ladder II","position":{"start":{"line":1429,"column":7,"offset":50349},"end":{"line":1429,"column":26,"offset":50368}}}],"position":{"start":{"line":1429,"column":6,"offset":50348},"end":{"line":1429,"column":86,"offset":50428}}}],"position":{"start":{"line":1429,"column":1,"offset":50343},"end":{"line":1429,"column":86,"offset":50428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1431,"column":5,"offset":50434},"end":{"line":1431,"column":13,"offset":50442}}}],"position":{"start":{"line":1431,"column":1,"offset":50430},"end":{"line":1431,"column":13,"offset":50442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1433,"column":1,"offset":50444},"end":{"line":1433,"column":18,"offset":50461}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1433,"column":19,"offset":50462},"end":{"line":1433,"column":28,"offset":50471}}}],"position":{"start":{"line":1433,"column":18,"offset":50461},"end":{"line":1433,"column":29,"offset":50472}}},{"type":"text","value":" and ","position":{"start":{"line":1433,"column":29,"offset":50472},"end":{"line":1433,"column":34,"offset":50477}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1433,"column":35,"offset":50478},"end":{"line":1433,"column":42,"offset":50485}}}],"position":{"start":{"line":1433,"column":34,"offset":50477},"end":{"line":1433,"column":43,"offset":50486}}},{"type":"text","value":"), and a dictionary's word list, find all shortest transformation sequence(s) from ","position":{"start":{"line":1433,"column":43,"offset":50486},"end":{"line":1433,"column":126,"offset":50569}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1433,"column":127,"offset":50570},"end":{"line":1433,"column":136,"offset":50579}}}],"position":{"start":{"line":1433,"column":126,"offset":50569},"end":{"line":1433,"column":137,"offset":50580}}},{"type":"text","value":" to ","position":{"start":{"line":1433,"column":137,"offset":50580},"end":{"line":1433,"column":141,"offset":50584}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1433,"column":142,"offset":50585},"end":{"line":1433,"column":149,"offset":50592}}}],"position":{"start":{"line":1433,"column":141,"offset":50584},"end":{"line":1433,"column":150,"offset":50593}}},{"type":"text","value":", such that:","position":{"start":{"line":1433,"column":150,"offset":50593},"end":{"line":1433,"column":162,"offset":50605}}}],"position":{"start":{"line":1433,"column":1,"offset":50444},"end":{"line":1433,"column":162,"offset":50605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time","position":{"start":{"line":1435,"column":5,"offset":50611},"end":{"line":1435,"column":45,"offset":50651}}}],"position":{"start":{"line":1435,"column":1,"offset":50607},"end":{"line":1435,"column":45,"offset":50651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1436,"column":5,"offset":50656},"end":{"line":1436,"column":66,"offset":50717}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1436,"column":67,"offset":50718},"end":{"line":1436,"column":76,"offset":50727}}}],"position":{"start":{"line":1436,"column":66,"offset":50717},"end":{"line":1436,"column":77,"offset":50728}}},{"type":"text","value":" is ","position":{"start":{"line":1436,"column":77,"offset":50728},"end":{"line":1436,"column":81,"offset":50732}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1436,"column":82,"offset":50733},"end":{"line":1436,"column":85,"offset":50736}}}],"position":{"start":{"line":1436,"column":81,"offset":50732},"end":{"line":1436,"column":86,"offset":50737}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1436,"column":86,"offset":50737},"end":{"line":1436,"column":106,"offset":50757}}}],"position":{"start":{"line":1436,"column":1,"offset":50652},"end":{"line":1436,"column":106,"offset":50757}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1435,"column":1,"offset":50607},"end":{"line":1436,"column":106,"offset":50757}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1438,"column":3,"offset":50761},"end":{"line":1438,"column":8,"offset":50766}}}],"position":{"start":{"line":1438,"column":1,"offset":50759},"end":{"line":1438,"column":10,"offset":50768}}}],"position":{"start":{"line":1438,"column":1,"offset":50759},"end":{"line":1438,"column":10,"offset":50768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return an empty list if there is no such transformation sequence.","position":{"start":{"line":1440,"column":5,"offset":50774},"end":{"line":1440,"column":70,"offset":50839}}}],"position":{"start":{"line":1440,"column":1,"offset":50770},"end":{"line":1440,"column":70,"offset":50839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1441,"column":5,"offset":50844},"end":{"line":1441,"column":36,"offset":50875}}}],"position":{"start":{"line":1441,"column":1,"offset":50840},"end":{"line":1441,"column":36,"offset":50875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1442,"column":5,"offset":50880},"end":{"line":1442,"column":60,"offset":50935}}}],"position":{"start":{"line":1442,"column":1,"offset":50876},"end":{"line":1442,"column":60,"offset":50935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1443,"column":5,"offset":50940},"end":{"line":1443,"column":51,"offset":50986}}}],"position":{"start":{"line":1443,"column":1,"offset":50936},"end":{"line":1443,"column":51,"offset":50986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1444,"column":5,"offset":50991},"end":{"line":1444,"column":20,"offset":51006}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1444,"column":21,"offset":51007},"end":{"line":1444,"column":30,"offset":51016}}}],"position":{"start":{"line":1444,"column":20,"offset":51006},"end":{"line":1444,"column":31,"offset":51017}}},{"type":"text","value":" and ","position":{"start":{"line":1444,"column":31,"offset":51017},"end":{"line":1444,"column":36,"offset":51022}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1444,"column":37,"offset":51023},"end":{"line":1444,"column":44,"offset":51030}}}],"position":{"start":{"line":1444,"column":36,"offset":51022},"end":{"line":1444,"column":45,"offset":51031}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1444,"column":45,"offset":51031},"end":{"line":1444,"column":81,"offset":51067}}}],"position":{"start":{"line":1444,"column":1,"offset":50987},"end":{"line":1444,"column":81,"offset":51067}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1440,"column":1,"offset":50770},"end":{"line":1444,"column":81,"offset":51067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1446,"column":3,"offset":51071},"end":{"line":1446,"column":13,"offset":51081}}}],"position":{"start":{"line":1446,"column":1,"offset":51069},"end":{"line":1446,"column":15,"offset":51083}}}],"position":{"start":{"line":1446,"column":1,"offset":51069},"end":{"line":1446,"column":15,"offset":51083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput:\n[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n"}],"position":{"start":{"line":1448,"column":1,"offset":51085},"end":{"line":1460,"column":4,"offset":51267}}}],"position":{"start":{"line":1448,"column":1,"offset":51085},"end":{"line":1460,"column":4,"offset":51267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1462,"column":3,"offset":51271},"end":{"line":1462,"column":13,"offset":51281}}}],"position":{"start":{"line":1462,"column":1,"offset":51269},"end":{"line":1462,"column":15,"offset":51283}}}],"position":{"start":{"line":1462,"column":1,"offset":51269},"end":{"line":1462,"column":15,"offset":51283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: []\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1464,"column":1,"offset":51285},"end":{"line":1474,"column":4,"offset":51479}}}],"position":{"start":{"line":1464,"column":1,"offset":51285},"end":{"line":1474,"column":4,"offset":51479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1476,"column":5,"offset":51485},"end":{"line":1476,"column":14,"offset":51494}}}],"position":{"start":{"line":1476,"column":1,"offset":51481},"end":{"line":1476,"column":14,"offset":51494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is just like ","position":{"start":{"line":1478,"column":1,"offset":51496},"end":{"line":1478,"column":19,"offset":51514}}},{"type":"element","tagName":"a","properties":{"href":"./127.%20Word%20Ladder"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1478,"column":20,"offset":51515},"end":{"line":1478,"column":36,"offset":51531}}}],"position":{"start":{"line":1478,"column":19,"offset":51514},"end":{"line":1478,"column":61,"offset":51556}}},{"type":"text","value":".","position":{"start":{"line":1478,"column":61,"offset":51556},"end":{"line":1478,"column":62,"offset":51557}}}],"position":{"start":{"line":1478,"column":1,"offset":51496},"end":{"line":1478,"column":62,"offset":51557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The constrain still works, but instead of deleting the words right away, collect them and delete them all when a level ends, so that we can reuse the words (matching different parents in the same level).","position":{"start":{"line":1480,"column":1,"offset":51559},"end":{"line":1480,"column":204,"offset":51762}}}],"position":{"start":{"line":1480,"column":1,"offset":51559},"end":{"line":1480,"column":204,"offset":51762}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The items in the queue are not just words now. Parent nodes are also kept so that we can backtrack the path from the end.","position":{"start":{"line":1482,"column":1,"offset":51764},"end":{"line":1482,"column":122,"offset":51885}}}],"position":{"start":{"line":1482,"column":1,"offset":51764},"end":{"line":1482,"column":122,"offset":51885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nfunction findLadders(beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return [];\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    const result = [];\n    let isEndWordFound = false;\n    const levelWords = new Set();\n    const queue = [[beginWord, null], null];\n    while (queue.length > 1) {\n        const node = queue.shift();\n\n        if (node === null) {\n            if (isEndWordFound) {\n                break;\n            }\n            levelWords.forEach((word) => wordList.delete(word));\n            levelWords.clear();\n            queue.push(null);\n            continue;\n        }\n\n        const word = node[0];\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const w = head + ALPHABET[c] + tail;\n                    if (w === endWord) {\n                        const path = [endWord];\n                        for (let n = node; n !== null; n = n[1]) {\n                            path.unshift(n[0]);\n                        }\n                        result.push(path);\n                        isEndWordFound = true;\n                    }\n                    if (wordList.has(w)) {\n                        levelWords.add(w);\n                        queue.push([w, node]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n"}],"position":{"start":{"line":1484,"column":1,"offset":51887},"end":{"line":1544,"column":4,"offset":53561}}}],"position":{"start":{"line":1484,"column":1,"offset":51887},"end":{"line":1544,"column":4,"offset":53561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1546,"column":1,"offset":53563},"end":{"line":1546,"column":4,"offset":53566}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Breadth-first Search\": ","position":{"start":{"line":1548,"column":1,"offset":53568},"end":{"line":1550,"column":25,"offset":53627}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1550,"column":25,"offset":53627},"end":{"line":1550,"column":70,"offset":53672}}}],"position":{"start":{"line":1550,"column":25,"offset":53627},"end":{"line":1550,"column":70,"offset":53672}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder II\": ","position":{"start":{"line":1550,"column":70,"offset":53672},"end":{"line":1552,"column":19,"offset":53710}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder-ii","position":{"start":{"line":1552,"column":19,"offset":53710},"end":{"line":1552,"column":63,"offset":53754}}}],"position":{"start":{"line":1552,"column":19,"offset":53710},"end":{"line":1552,"column":63,"offset":53754}}},{"type":"text","value":"\n\"Minimum Genetic Mutation\": ","position":{"start":{"line":1552,"column":63,"offset":53754},"end":{"line":1553,"column":29,"offset":53783}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/minimum-genetic-mutation"},"children":[{"type":"text","value":"https://leetcode.com/problems/minimum-genetic-mutation","position":{"start":{"line":1553,"column":29,"offset":53783},"end":{"line":1553,"column":83,"offset":53837}}}],"position":{"start":{"line":1553,"column":29,"offset":53783},"end":{"line":1553,"column":83,"offset":53837}}}],"position":{"start":{"line":1548,"column":1,"offset":53568},"end":{"line":1553,"column":83,"offset":53837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1555,"column":1,"offset":53839},"end":{"line":1555,"column":4,"offset":53842}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#127-word-ladderhttpsleetcodecomproblemsword-ladderdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1557,"column":2,"offset":53845},"end":{"line":1557,"column":142,"offset":53985}}}],"position":{"start":{"line":1557,"column":1,"offset":53844},"end":{"line":1557,"column":207,"offset":54050}}}],"position":{"start":{"line":1557,"column":1,"offset":53844},"end":{"line":1557,"column":207,"offset":54050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1559,"column":4,"offset":54055},"end":{"line":1559,"column":6,"offset":54057}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder/description/"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1559,"column":7,"offset":54058},"end":{"line":1559,"column":23,"offset":54074}}}],"position":{"start":{"line":1559,"column":6,"offset":54057},"end":{"line":1559,"column":80,"offset":54131}}}],"position":{"start":{"line":1559,"column":1,"offset":54052},"end":{"line":1559,"column":80,"offset":54131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1561,"column":5,"offset":54137},"end":{"line":1561,"column":13,"offset":54145}}}],"position":{"start":{"line":1561,"column":1,"offset":54133},"end":{"line":1561,"column":13,"offset":54145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1563,"column":1,"offset":54147},"end":{"line":1563,"column":18,"offset":54164}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1563,"column":19,"offset":54165},"end":{"line":1563,"column":28,"offset":54174}}}],"position":{"start":{"line":1563,"column":18,"offset":54164},"end":{"line":1563,"column":29,"offset":54175}}},{"type":"text","value":" and ","position":{"start":{"line":1563,"column":29,"offset":54175},"end":{"line":1563,"column":34,"offset":54180}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1563,"column":35,"offset":54181},"end":{"line":1563,"column":42,"offset":54188}}}],"position":{"start":{"line":1563,"column":34,"offset":54180},"end":{"line":1563,"column":43,"offset":54189}}},{"type":"text","value":"), and a dictionary's word list, find the length of shortest transformation sequence from ","position":{"start":{"line":1563,"column":43,"offset":54189},"end":{"line":1563,"column":133,"offset":54279}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1563,"column":134,"offset":54280},"end":{"line":1563,"column":143,"offset":54289}}}],"position":{"start":{"line":1563,"column":133,"offset":54279},"end":{"line":1563,"column":144,"offset":54290}}},{"type":"text","value":" to ","position":{"start":{"line":1563,"column":144,"offset":54290},"end":{"line":1563,"column":148,"offset":54294}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1563,"column":149,"offset":54295},"end":{"line":1563,"column":156,"offset":54302}}}],"position":{"start":{"line":1563,"column":148,"offset":54294},"end":{"line":1563,"column":157,"offset":54303}}},{"type":"text","value":", such that:","position":{"start":{"line":1563,"column":157,"offset":54303},"end":{"line":1563,"column":169,"offset":54315}}}],"position":{"start":{"line":1563,"column":1,"offset":54147},"end":{"line":1563,"column":169,"offset":54315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time.","position":{"start":{"line":1565,"column":5,"offset":54321},"end":{"line":1565,"column":46,"offset":54362}}}],"position":{"start":{"line":1565,"column":1,"offset":54317},"end":{"line":1565,"column":46,"offset":54362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1566,"column":5,"offset":54367},"end":{"line":1566,"column":66,"offset":54428}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1566,"column":67,"offset":54429},"end":{"line":1566,"column":76,"offset":54438}}}],"position":{"start":{"line":1566,"column":66,"offset":54428},"end":{"line":1566,"column":77,"offset":54439}}},{"type":"text","value":" is ","position":{"start":{"line":1566,"column":77,"offset":54439},"end":{"line":1566,"column":81,"offset":54443}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1566,"column":82,"offset":54444},"end":{"line":1566,"column":85,"offset":54447}}}],"position":{"start":{"line":1566,"column":81,"offset":54443},"end":{"line":1566,"column":86,"offset":54448}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1566,"column":86,"offset":54448},"end":{"line":1566,"column":106,"offset":54468}}}],"position":{"start":{"line":1566,"column":1,"offset":54363},"end":{"line":1566,"column":106,"offset":54468}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1565,"column":1,"offset":54317},"end":{"line":1566,"column":106,"offset":54468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1568,"column":3,"offset":54472},"end":{"line":1568,"column":8,"offset":54477}}}],"position":{"start":{"line":1568,"column":1,"offset":54470},"end":{"line":1568,"column":10,"offset":54479}}}],"position":{"start":{"line":1568,"column":1,"offset":54470},"end":{"line":1568,"column":10,"offset":54479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return 0 if there is no such transformation sequence.","position":{"start":{"line":1570,"column":5,"offset":54485},"end":{"line":1570,"column":58,"offset":54538}}}],"position":{"start":{"line":1570,"column":1,"offset":54481},"end":{"line":1570,"column":58,"offset":54538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1571,"column":5,"offset":54543},"end":{"line":1571,"column":36,"offset":54574}}}],"position":{"start":{"line":1571,"column":1,"offset":54539},"end":{"line":1571,"column":36,"offset":54574}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1572,"column":5,"offset":54579},"end":{"line":1572,"column":60,"offset":54634}}}],"position":{"start":{"line":1572,"column":1,"offset":54575},"end":{"line":1572,"column":60,"offset":54634}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1573,"column":5,"offset":54639},"end":{"line":1573,"column":51,"offset":54685}}}],"position":{"start":{"line":1573,"column":1,"offset":54635},"end":{"line":1573,"column":51,"offset":54685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1574,"column":5,"offset":54690},"end":{"line":1574,"column":20,"offset":54705}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1574,"column":21,"offset":54706},"end":{"line":1574,"column":30,"offset":54715}}}],"position":{"start":{"line":1574,"column":20,"offset":54705},"end":{"line":1574,"column":31,"offset":54716}}},{"type":"text","value":" and ","position":{"start":{"line":1574,"column":31,"offset":54716},"end":{"line":1574,"column":36,"offset":54721}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1574,"column":37,"offset":54722},"end":{"line":1574,"column":44,"offset":54729}}}],"position":{"start":{"line":1574,"column":36,"offset":54721},"end":{"line":1574,"column":45,"offset":54730}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1574,"column":45,"offset":54730},"end":{"line":1574,"column":81,"offset":54766}}}],"position":{"start":{"line":1574,"column":1,"offset":54686},"end":{"line":1574,"column":81,"offset":54766}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1570,"column":1,"offset":54481},"end":{"line":1574,"column":81,"offset":54766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1576,"column":3,"offset":54770},"end":{"line":1576,"column":13,"offset":54780}}}],"position":{"start":{"line":1576,"column":1,"offset":54768},"end":{"line":1576,"column":15,"offset":54782}}}],"position":{"start":{"line":1576,"column":1,"offset":54768},"end":{"line":1576,"column":15,"offset":54782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n"}],"position":{"start":{"line":1578,"column":1,"offset":54784},"end":{"line":1589,"column":4,"offset":55007}}}],"position":{"start":{"line":1578,"column":1,"offset":54784},"end":{"line":1589,"column":4,"offset":55007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1591,"column":3,"offset":55011},"end":{"line":1591,"column":13,"offset":55021}}}],"position":{"start":{"line":1591,"column":1,"offset":55009},"end":{"line":1591,"column":15,"offset":55023}}}],"position":{"start":{"line":1591,"column":1,"offset":55009},"end":{"line":1591,"column":15,"offset":55023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1593,"column":1,"offset":55025},"end":{"line":1603,"column":4,"offset":55218}}}],"position":{"start":{"line":1593,"column":1,"offset":55025},"end":{"line":1603,"column":4,"offset":55218}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1605,"column":5,"offset":55224},"end":{"line":1605,"column":14,"offset":55233}}}],"position":{"start":{"line":1605,"column":1,"offset":55220},"end":{"line":1605,"column":14,"offset":55233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of it as building a tree, with ","position":{"start":{"line":1607,"column":1,"offset":55235},"end":{"line":1607,"column":38,"offset":55272}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"begineWord"}],"position":{"start":{"line":1607,"column":38,"offset":55272},"end":{"line":1607,"column":50,"offset":55284}}},{"type":"text","value":" as root and ","position":{"start":{"line":1607,"column":50,"offset":55284},"end":{"line":1607,"column":63,"offset":55297}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"endWord"}],"position":{"start":{"line":1607,"column":63,"offset":55297},"end":{"line":1607,"column":72,"offset":55306}}},{"type":"text","value":" as leaves.","position":{"start":{"line":1607,"column":72,"offset":55306},"end":{"line":1607,"column":83,"offset":55317}}}],"position":{"start":{"line":1607,"column":1,"offset":55235},"end":{"line":1607,"column":83,"offset":55317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The best way control the depth (length of the shortest transformations) while building the tree is level-order traversal (BFS).","position":{"start":{"line":1609,"column":1,"offset":55319},"end":{"line":1609,"column":128,"offset":55446}}}],"position":{"start":{"line":1609,"column":1,"offset":55319},"end":{"line":1609,"column":128,"offset":55446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We do not actually build the tree because it is expensive (astronomical if the list is huge). In fact, we only need one shortest path. So just like Dijkstra's algorithm, we say that the first time (level ","position":{"start":{"line":1611,"column":1,"offset":55448},"end":{"line":1611,"column":205,"offset":55652}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1611,"column":205,"offset":55652},"end":{"line":1611,"column":208,"offset":55655}}},{"type":"text","value":") we encounter a word that turns out to be in a shortest path, then level ","position":{"start":{"line":1611,"column":208,"offset":55655},"end":{"line":1611,"column":282,"offset":55729}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1611,"column":282,"offset":55729},"end":{"line":1611,"column":285,"offset":55732}}},{"type":"text","value":" is the lowest level this word could ever get. We can safely remove it from the ","position":{"start":{"line":1611,"column":285,"offset":55732},"end":{"line":1611,"column":365,"offset":55812}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1611,"column":365,"offset":55812},"end":{"line":1611,"column":375,"offset":55822}}},{"type":"text","value":".","position":{"start":{"line":1611,"column":375,"offset":55822},"end":{"line":1611,"column":376,"offset":55823}}}],"position":{"start":{"line":1611,"column":1,"offset":55448},"end":{"line":1611,"column":376,"offset":55823}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To find all the next words, instead of filtering the ","position":{"start":{"line":1613,"column":1,"offset":55825},"end":{"line":1613,"column":54,"offset":55878}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1613,"column":54,"offset":55878},"end":{"line":1613,"column":64,"offset":55888}}},{"type":"text","value":", enumerate all 25 possible words and check if in ","position":{"start":{"line":1613,"column":64,"offset":55888},"end":{"line":1613,"column":114,"offset":55938}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1613,"column":114,"offset":55938},"end":{"line":1613,"column":124,"offset":55948}}},{"type":"text","value":".","position":{"start":{"line":1613,"column":124,"offset":55948},"end":{"line":1613,"column":125,"offset":55949}}}],"position":{"start":{"line":1613,"column":1,"offset":55825},"end":{"line":1613,"column":125,"offset":55949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nlet ladderLength = function (beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return 0;\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    let level = 1;\n    const queue = [beginWord, null];\n    while (queue.length > 1) {\n        const word = queue.shift();\n\n        if (word === null) {\n            level++;\n            queue.push(null);\n            continue;\n        }\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const word = head + ALPHABET[c] + tail;\n                    if (word === endWord) {\n                        return level + 1;\n                    }\n                    if (wordList.delete(word)) {\n                        queue.push(word);\n                    }\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n"}],"position":{"start":{"line":1615,"column":1,"offset":55951},"end":{"line":1661,"column":4,"offset":57095}}}],"position":{"start":{"line":1615,"column":1,"offset":55951},"end":{"line":1661,"column":4,"offset":57095}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1663,"column":1,"offset":57097},"end":{"line":1663,"column":4,"offset":57100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1665,"column":1,"offset":57102},"end":{"line":1667,"column":10,"offset":57144}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1667,"column":10,"offset":57144},"end":{"line":1667,"column":40,"offset":57174}}}],"position":{"start":{"line":1667,"column":10,"offset":57144},"end":{"line":1667,"column":40,"offset":57174}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1667,"column":40,"offset":57174},"end":{"line":1668,"column":15,"offset":57189}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1668,"column":15,"offset":57189},"end":{"line":1668,"column":50,"offset":57224}}}],"position":{"start":{"line":1668,"column":15,"offset":57189},"end":{"line":1668,"column":50,"offset":57224}}},{"type":"text","value":"\nSimilar Questions:\n\"Binary Tree Longest Consecutive Sequence\": ","position":{"start":{"line":1668,"column":50,"offset":57224},"end":{"line":1670,"column":45,"offset":57288}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence","position":{"start":{"line":1670,"column":45,"offset":57288},"end":{"line":1670,"column":115,"offset":57358}}}],"position":{"start":{"line":1670,"column":45,"offset":57288},"end":{"line":1670,"column":115,"offset":57358}}}],"position":{"start":{"line":1665,"column":1,"offset":57102},"end":{"line":1670,"column":115,"offset":57358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1672,"column":1,"offset":57360},"end":{"line":1672,"column":4,"offset":57363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequencedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1674,"column":2,"offset":57366},"end":{"line":1674,"column":142,"offset":57506}}}],"position":{"start":{"line":1674,"column":1,"offset":57365},"end":{"line":1674,"column":241,"offset":57605}}}],"position":{"start":{"line":1674,"column":1,"offset":57365},"end":{"line":1674,"column":241,"offset":57605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1676,"column":4,"offset":57610},"end":{"line":1676,"column":6,"offset":57612}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-consecutive-sequence/description/"},"children":[{"type":"text","value":"128. Longest Consecutive Sequence","position":{"start":{"line":1676,"column":7,"offset":57613},"end":{"line":1676,"column":40,"offset":57646}}}],"position":{"start":{"line":1676,"column":6,"offset":57612},"end":{"line":1676,"column":114,"offset":57720}}}],"position":{"start":{"line":1676,"column":1,"offset":57607},"end":{"line":1676,"column":114,"offset":57720}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1678,"column":5,"offset":57726},"end":{"line":1678,"column":13,"offset":57734}}}],"position":{"start":{"line":1678,"column":1,"offset":57722},"end":{"line":1678,"column":13,"offset":57734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence.","position":{"start":{"line":1680,"column":1,"offset":57736},"end":{"line":1680,"column":99,"offset":57834}}}],"position":{"start":{"line":1680,"column":1,"offset":57736},"end":{"line":1680,"column":99,"offset":57834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your algorithm should run in O(","position":{"start":{"line":1682,"column":1,"offset":57836},"end":{"line":1682,"column":32,"offset":57867}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":1682,"column":33,"offset":57868},"end":{"line":1682,"column":34,"offset":57869}}}],"position":{"start":{"line":1682,"column":32,"offset":57867},"end":{"line":1682,"column":35,"offset":57870}}},{"type":"text","value":") complexity.","position":{"start":{"line":1682,"column":35,"offset":57870},"end":{"line":1682,"column":48,"offset":57883}}}],"position":{"start":{"line":1682,"column":1,"offset":57836},"end":{"line":1682,"column":48,"offset":57883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1684,"column":3,"offset":57887},"end":{"line":1684,"column":11,"offset":57895}}}],"position":{"start":{"line":1684,"column":1,"offset":57885},"end":{"line":1684,"column":13,"offset":57897}}}],"position":{"start":{"line":1684,"column":1,"offset":57885},"end":{"line":1684,"column":13,"offset":57897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"}],"position":{"start":{"line":1686,"column":1,"offset":57899},"end":{"line":1691,"column":4,"offset":58046}}}],"position":{"start":{"line":1686,"column":1,"offset":57899},"end":{"line":1691,"column":4,"offset":58046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1693,"column":5,"offset":58052},"end":{"line":1693,"column":14,"offset":58061}}}],"position":{"start":{"line":1693,"column":1,"offset":58048},"end":{"line":1693,"column":14,"offset":58061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Build a Set from the list. Pick a number, find all it's adjacent numbers that are also in the Set. Count them and remove them all from the Set. Repeat until the Set is empty. Time complexity O(n + n) = O(n).","position":{"start":{"line":1695,"column":1,"offset":58063},"end":{"line":1695,"column":208,"offset":58270}}}],"position":{"start":{"line":1695,"column":1,"offset":58063},"end":{"line":1695,"column":208,"offset":58270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} nums\n * @return {number}\n */\nlet longestConsecutive = function (nums) {\n    const numSet = new Set(nums);\n    let maxCount = 0;\n    while (numSet.size > 0) {\n        const num = numSet.values().next().value;\n        numSet.delete(num);\n        let count = 1;\n        for (let n = num + 1; numSet.delete(n); n++) {\n            count++;\n        }\n        for (let n = num - 1; numSet.delete(n); n--) {\n            count++;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n    return maxCount;\n};\n"}],"position":{"start":{"line":1697,"column":1,"offset":58272},"end":{"line":1721,"column":4,"offset":58839}}}],"position":{"start":{"line":1697,"column":1,"offset":58272},"end":{"line":1721,"column":4,"offset":58839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1723,"column":1,"offset":58841},"end":{"line":1723,"column":4,"offset":58844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1725,"column":1,"offset":58846},"end":{"line":1727,"column":9,"offset":58889}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1727,"column":9,"offset":58889},"end":{"line":1727,"column":38,"offset":58918}}}],"position":{"start":{"line":1727,"column":9,"offset":58889},"end":{"line":1727,"column":38,"offset":58918}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1727,"column":38,"offset":58918},"end":{"line":1728,"column":23,"offset":58941}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1728,"column":23,"offset":58941},"end":{"line":1728,"column":66,"offset":58984}}}],"position":{"start":{"line":1728,"column":23,"offset":58941},"end":{"line":1728,"column":66,"offset":58984}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1728,"column":66,"offset":58984},"end":{"line":1730,"column":13,"offset":59016}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1730,"column":13,"offset":59016},"end":{"line":1730,"column":51,"offset":59054}}}],"position":{"start":{"line":1730,"column":13,"offset":59016},"end":{"line":1730,"column":51,"offset":59054}}},{"type":"text","value":"\n\"Binary Tree Maximum Path Sum\": ","position":{"start":{"line":1730,"column":51,"offset":59054},"end":{"line":1731,"column":33,"offset":59087}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-maximum-path-sum","position":{"start":{"line":1731,"column":33,"offset":59087},"end":{"line":1731,"column":91,"offset":59145}}}],"position":{"start":{"line":1731,"column":33,"offset":59087},"end":{"line":1731,"column":91,"offset":59145}}}],"position":{"start":{"line":1725,"column":1,"offset":58846},"end":{"line":1731,"column":91,"offset":59145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1733,"column":1,"offset":59147},"end":{"line":1733,"column":4,"offset":59150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbersdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1735,"column":2,"offset":59153},"end":{"line":1735,"column":142,"offset":59293}}}],"position":{"start":{"line":1735,"column":1,"offset":59152},"end":{"line":1735,"column":233,"offset":59384}}}],"position":{"start":{"line":1735,"column":1,"offset":59152},"end":{"line":1735,"column":233,"offset":59384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1737,"column":4,"offset":59389},"end":{"line":1737,"column":6,"offset":59391}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers/description/"},"children":[{"type":"text","value":"129. Sum Root to Leaf Numbers","position":{"start":{"line":1737,"column":7,"offset":59392},"end":{"line":1737,"column":36,"offset":59421}}}],"position":{"start":{"line":1737,"column":6,"offset":59391},"end":{"line":1737,"column":106,"offset":59491}}}],"position":{"start":{"line":1737,"column":1,"offset":59386},"end":{"line":1737,"column":106,"offset":59491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1739,"column":5,"offset":59497},"end":{"line":1739,"column":13,"offset":59505}}}],"position":{"start":{"line":1739,"column":1,"offset":59493},"end":{"line":1739,"column":13,"offset":59505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree containing digits from ","position":{"start":{"line":1741,"column":1,"offset":59507},"end":{"line":1741,"column":44,"offset":59550}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0-9"}],"position":{"start":{"line":1741,"column":44,"offset":59550},"end":{"line":1741,"column":49,"offset":59555}}},{"type":"text","value":" only, each root-to-leaf path could represent a number.","position":{"start":{"line":1741,"column":49,"offset":59555},"end":{"line":1741,"column":104,"offset":59610}}}],"position":{"start":{"line":1741,"column":1,"offset":59507},"end":{"line":1741,"column":104,"offset":59610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An example is the root-to-leaf path ","position":{"start":{"line":1743,"column":1,"offset":59612},"end":{"line":1743,"column":37,"offset":59648}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1->2->3"}],"position":{"start":{"line":1743,"column":37,"offset":59648},"end":{"line":1743,"column":46,"offset":59657}}},{"type":"text","value":" which represents the number ","position":{"start":{"line":1743,"column":46,"offset":59657},"end":{"line":1743,"column":75,"offset":59686}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"123"}],"position":{"start":{"line":1743,"column":75,"offset":59686},"end":{"line":1743,"column":80,"offset":59691}}},{"type":"text","value":".","position":{"start":{"line":1743,"column":80,"offset":59691},"end":{"line":1743,"column":81,"offset":59692}}}],"position":{"start":{"line":1743,"column":1,"offset":59612},"end":{"line":1743,"column":81,"offset":59692}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find the total sum of all root-to-leaf numbers.","position":{"start":{"line":1745,"column":1,"offset":59694},"end":{"line":1745,"column":48,"offset":59741}}}],"position":{"start":{"line":1745,"column":1,"offset":59694},"end":{"line":1745,"column":48,"offset":59741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1747,"column":3,"offset":59745},"end":{"line":1747,"column":8,"offset":59750}}}],"position":{"start":{"line":1747,"column":1,"offset":59743},"end":{"line":1747,"column":10,"offset":59752}}},{"type":"text","value":" A leaf is a node with no children.","position":{"start":{"line":1747,"column":10,"offset":59752},"end":{"line":1747,"column":45,"offset":59787}}}],"position":{"start":{"line":1747,"column":1,"offset":59743},"end":{"line":1747,"column":45,"offset":59787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1749,"column":3,"offset":59791},"end":{"line":1749,"column":11,"offset":59799}}}],"position":{"start":{"line":1749,"column":1,"offset":59789},"end":{"line":1749,"column":13,"offset":59801}}}],"position":{"start":{"line":1749,"column":1,"offset":59789},"end":{"line":1749,"column":13,"offset":59801}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n"}],"position":{"start":{"line":1751,"column":1,"offset":59803},"end":{"line":1759,"column":35,"offset":60035}}}],"position":{"start":{"line":1751,"column":1,"offset":59803},"end":{"line":1759,"column":35,"offset":60035}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1761,"column":3,"offset":60039},"end":{"line":1761,"column":13,"offset":60049}}}],"position":{"start":{"line":1761,"column":1,"offset":60037},"end":{"line":1761,"column":15,"offset":60051}}}],"position":{"start":{"line":1761,"column":1,"offset":60037},"end":{"line":1761,"column":15,"offset":60051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n"}],"position":{"start":{"line":1763,"column":1,"offset":60053},"end":{"line":1774,"column":44,"offset":60384}}}],"position":{"start":{"line":1763,"column":1,"offset":60053},"end":{"line":1774,"column":44,"offset":60384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1776,"column":5,"offset":60390},"end":{"line":1776,"column":14,"offset":60399}}}],"position":{"start":{"line":1776,"column":1,"offset":60386},"end":{"line":1776,"column":14,"offset":60399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To write a clean solution for this promblem, use ","position":{"start":{"line":1778,"column":1,"offset":60401},"end":{"line":1778,"column":50,"offset":60450}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1778,"column":50,"offset":60450},"end":{"line":1778,"column":53,"offset":60453}}},{"type":"text","value":" as indicator of leaf node. If all the children get ","position":{"start":{"line":1778,"column":53,"offset":60453},"end":{"line":1778,"column":105,"offset":60505}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1778,"column":105,"offset":60505},"end":{"line":1778,"column":108,"offset":60508}}},{"type":"text","value":", it is a leaf node, return the sum of current level.","position":{"start":{"line":1778,"column":108,"offset":60508},"end":{"line":1778,"column":161,"offset":60561}}}],"position":{"start":{"line":1778,"column":1,"offset":60401},"end":{"line":1778,"column":161,"offset":60561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet sumNumbers = function (root, sum = 0) {\n    if (!root) {\n        return 0;\n    }\n    sum = sum * 10 + root.val;\n    return sumNumbers(root.left, sum) + sumNumbers(root.right, sum) || sum;\n};\n"}],"position":{"start":{"line":1780,"column":1,"offset":60563},"end":{"line":1799,"column":4,"offset":60961}}}],"position":{"start":{"line":1780,"column":1,"offset":60563},"end":{"line":1799,"column":4,"offset":60961}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1801,"column":1,"offset":60963},"end":{"line":1801,"column":4,"offset":60966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1803,"column":1,"offset":60968},"end":{"line":1805,"column":23,"offset":61025}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1805,"column":23,"offset":61025},"end":{"line":1805,"column":66,"offset":61068}}}],"position":{"start":{"line":1805,"column":23,"offset":61025},"end":{"line":1805,"column":66,"offset":61068}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1805,"column":66,"offset":61068},"end":{"line":1806,"column":25,"offset":61093}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1806,"column":25,"offset":61093},"end":{"line":1806,"column":70,"offset":61138}}}],"position":{"start":{"line":1806,"column":25,"offset":61093},"end":{"line":1806,"column":70,"offset":61138}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1806,"column":70,"offset":61138},"end":{"line":1807,"column":15,"offset":61153}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1807,"column":15,"offset":61153},"end":{"line":1807,"column":50,"offset":61188}}}],"position":{"start":{"line":1807,"column":15,"offset":61153},"end":{"line":1807,"column":50,"offset":61188}}},{"type":"text","value":"\nSimilar Questions:\n\"Number of Islands\": ","position":{"start":{"line":1807,"column":50,"offset":61188},"end":{"line":1809,"column":22,"offset":61229}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/number-of-islands"},"children":[{"type":"text","value":"https://leetcode.com/problems/number-of-islands","position":{"start":{"line":1809,"column":22,"offset":61229},"end":{"line":1809,"column":69,"offset":61276}}}],"position":{"start":{"line":1809,"column":22,"offset":61229},"end":{"line":1809,"column":69,"offset":61276}}},{"type":"text","value":"\n\"Walls and Gates\": ","position":{"start":{"line":1809,"column":69,"offset":61276},"end":{"line":1810,"column":20,"offset":61296}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/walls-and-gates"},"children":[{"type":"text","value":"https://leetcode.com/problems/walls-and-gates","position":{"start":{"line":1810,"column":20,"offset":61296},"end":{"line":1810,"column":65,"offset":61341}}}],"position":{"start":{"line":1810,"column":20,"offset":61296},"end":{"line":1810,"column":65,"offset":61341}}}],"position":{"start":{"line":1803,"column":1,"offset":60968},"end":{"line":1810,"column":65,"offset":61341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1812,"column":1,"offset":61343},"end":{"line":1812,"column":4,"offset":61346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regionsdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1814,"column":2,"offset":61349},"end":{"line":1814,"column":142,"offset":61489}}}],"position":{"start":{"line":1814,"column":1,"offset":61348},"end":{"line":1814,"column":221,"offset":61568}}}],"position":{"start":{"line":1814,"column":1,"offset":61348},"end":{"line":1814,"column":221,"offset":61568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1816,"column":4,"offset":61573},"end":{"line":1816,"column":6,"offset":61575}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/surrounded-regions/description/"},"children":[{"type":"text","value":"130. Surrounded Regions","position":{"start":{"line":1816,"column":7,"offset":61576},"end":{"line":1816,"column":30,"offset":61599}}}],"position":{"start":{"line":1816,"column":6,"offset":61575},"end":{"line":1816,"column":94,"offset":61663}}}],"position":{"start":{"line":1816,"column":1,"offset":61570},"end":{"line":1816,"column":94,"offset":61663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1818,"column":5,"offset":61669},"end":{"line":1818,"column":13,"offset":61677}}}],"position":{"start":{"line":1818,"column":1,"offset":61665},"end":{"line":1818,"column":13,"offset":61677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a 2D board containing ","position":{"start":{"line":1820,"column":1,"offset":61679},"end":{"line":1820,"column":29,"offset":61707}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1820,"column":29,"offset":61707},"end":{"line":1820,"column":34,"offset":61712}}},{"type":"text","value":" and ","position":{"start":{"line":1820,"column":34,"offset":61712},"end":{"line":1820,"column":39,"offset":61717}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1820,"column":39,"offset":61717},"end":{"line":1820,"column":44,"offset":61722}}},{"type":"text","value":" (","position":{"start":{"line":1820,"column":44,"offset":61722},"end":{"line":1820,"column":46,"offset":61724}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the letter O","position":{"start":{"line":1820,"column":48,"offset":61726},"end":{"line":1820,"column":60,"offset":61738}}}],"position":{"start":{"line":1820,"column":46,"offset":61724},"end":{"line":1820,"column":62,"offset":61740}}},{"type":"text","value":"), capture all regions surrounded by ","position":{"start":{"line":1820,"column":62,"offset":61740},"end":{"line":1820,"column":99,"offset":61777}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1820,"column":99,"offset":61777},"end":{"line":1820,"column":104,"offset":61782}}},{"type":"text","value":".","position":{"start":{"line":1820,"column":104,"offset":61782},"end":{"line":1820,"column":105,"offset":61783}}}],"position":{"start":{"line":1820,"column":1,"offset":61679},"end":{"line":1820,"column":105,"offset":61783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A region is captured by flipping all ","position":{"start":{"line":1822,"column":1,"offset":61785},"end":{"line":1822,"column":38,"offset":61822}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1822,"column":38,"offset":61822},"end":{"line":1822,"column":43,"offset":61827}}},{"type":"text","value":"s into ","position":{"start":{"line":1822,"column":43,"offset":61827},"end":{"line":1822,"column":50,"offset":61834}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1822,"column":50,"offset":61834},"end":{"line":1822,"column":55,"offset":61839}}},{"type":"text","value":"s in that surrounded region.","position":{"start":{"line":1822,"column":55,"offset":61839},"end":{"line":1822,"column":83,"offset":61867}}}],"position":{"start":{"line":1822,"column":1,"offset":61785},"end":{"line":1822,"column":83,"offset":61867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1824,"column":3,"offset":61871},"end":{"line":1824,"column":11,"offset":61879}}}],"position":{"start":{"line":1824,"column":1,"offset":61869},"end":{"line":1824,"column":13,"offset":61881}}}],"position":{"start":{"line":1824,"column":1,"offset":61869},"end":{"line":1824,"column":13,"offset":61881}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX O O X\nX X O X\nX O X X\n"}],"position":{"start":{"line":1826,"column":1,"offset":61883},"end":{"line":1832,"column":4,"offset":61923}}}],"position":{"start":{"line":1826,"column":1,"offset":61883},"end":{"line":1832,"column":4,"offset":61923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After running your function, the board should be:","position":{"start":{"line":1834,"column":1,"offset":61925},"end":{"line":1834,"column":50,"offset":61974}}}],"position":{"start":{"line":1834,"column":1,"offset":61925},"end":{"line":1834,"column":50,"offset":61974}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX X X X\nX X X X\nX O X X\n"}],"position":{"start":{"line":1836,"column":1,"offset":61976},"end":{"line":1842,"column":4,"offset":62016}}}],"position":{"start":{"line":1836,"column":1,"offset":61976},"end":{"line":1842,"column":4,"offset":62016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":1844,"column":3,"offset":62020},"end":{"line":1844,"column":15,"offset":62032}}}],"position":{"start":{"line":1844,"column":1,"offset":62018},"end":{"line":1844,"column":17,"offset":62034}}}],"position":{"start":{"line":1844,"column":1,"offset":62018},"end":{"line":1844,"column":17,"offset":62034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Surrounded regions shouldn't be on the border, which means that any ","position":{"start":{"line":1846,"column":1,"offset":62036},"end":{"line":1846,"column":69,"offset":62104}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":69,"offset":62104},"end":{"line":1846,"column":74,"offset":62109}}},{"type":"text","value":" on the border of the board are not flipped to ","position":{"start":{"line":1846,"column":74,"offset":62109},"end":{"line":1846,"column":121,"offset":62156}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1846,"column":121,"offset":62156},"end":{"line":1846,"column":126,"offset":62161}}},{"type":"text","value":". Any ","position":{"start":{"line":1846,"column":126,"offset":62161},"end":{"line":1846,"column":132,"offset":62167}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":132,"offset":62167},"end":{"line":1846,"column":137,"offset":62172}}},{"type":"text","value":" that is not on the border and it is not connected to an ","position":{"start":{"line":1846,"column":137,"offset":62172},"end":{"line":1846,"column":194,"offset":62229}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":194,"offset":62229},"end":{"line":1846,"column":199,"offset":62234}}},{"type":"text","value":" on the border will be flipped to ","position":{"start":{"line":1846,"column":199,"offset":62234},"end":{"line":1846,"column":233,"offset":62268}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1846,"column":233,"offset":62268},"end":{"line":1846,"column":238,"offset":62273}}},{"type":"text","value":". Two cells are connected if they are adjacent cells connected horizontally or vertically.","position":{"start":{"line":1846,"column":238,"offset":62273},"end":{"line":1846,"column":328,"offset":62363}}}],"position":{"start":{"line":1846,"column":1,"offset":62036},"end":{"line":1846,"column":328,"offset":62363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1848,"column":5,"offset":62369},"end":{"line":1848,"column":14,"offset":62378}}}],"position":{"start":{"line":1848,"column":1,"offset":62365},"end":{"line":1848,"column":14,"offset":62378}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find all the ","position":{"start":{"line":1850,"column":1,"offset":62380},"end":{"line":1850,"column":14,"offset":62393}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":14,"offset":62393},"end":{"line":1850,"column":17,"offset":62396}}},{"type":"text","value":"s that are connected to the ","position":{"start":{"line":1850,"column":17,"offset":62396},"end":{"line":1850,"column":45,"offset":62424}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":45,"offset":62424},"end":{"line":1850,"column":48,"offset":62427}}},{"type":"text","value":"s on the border, change them to ","position":{"start":{"line":1850,"column":48,"offset":62427},"end":{"line":1850,"column":80,"offset":62459}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1850,"column":80,"offset":62459},"end":{"line":1850,"column":83,"offset":62462}}},{"type":"text","value":". Then scan the board, change ","position":{"start":{"line":1850,"column":83,"offset":62462},"end":{"line":1850,"column":113,"offset":62492}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":113,"offset":62492},"end":{"line":1850,"column":116,"offset":62495}}},{"type":"text","value":" to ","position":{"start":{"line":1850,"column":116,"offset":62495},"end":{"line":1850,"column":120,"offset":62499}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X"}],"position":{"start":{"line":1850,"column":120,"offset":62499},"end":{"line":1850,"column":123,"offset":62502}}},{"type":"text","value":" and ","position":{"start":{"line":1850,"column":123,"offset":62502},"end":{"line":1850,"column":128,"offset":62507}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1850,"column":128,"offset":62507},"end":{"line":1850,"column":131,"offset":62510}}},{"type":"text","value":" back to ","position":{"start":{"line":1850,"column":131,"offset":62510},"end":{"line":1850,"column":140,"offset":62519}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":140,"offset":62519},"end":{"line":1850,"column":143,"offset":62522}}},{"type":"text","value":".","position":{"start":{"line":1850,"column":143,"offset":62522},"end":{"line":1850,"column":144,"offset":62523}}}],"position":{"start":{"line":1850,"column":1,"offset":62380},"end":{"line":1850,"column":144,"offset":62523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The process of finding the connected ","position":{"start":{"line":1852,"column":1,"offset":62525},"end":{"line":1852,"column":38,"offset":62562}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1852,"column":38,"offset":62562},"end":{"line":1852,"column":41,"offset":62565}}},{"type":"text","value":"s is just like tree traversal. ","position":{"start":{"line":1852,"column":41,"offset":62565},"end":{"line":1852,"column":72,"offset":62596}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1852,"column":72,"offset":62596},"end":{"line":1852,"column":75,"offset":62599}}},{"type":"text","value":"s on the border are the same level. Their children are the second level. And so on.","position":{"start":{"line":1852,"column":75,"offset":62599},"end":{"line":1852,"column":158,"offset":62682}}}],"position":{"start":{"line":1852,"column":1,"offset":62525},"end":{"line":1852,"column":158,"offset":62682}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So both BFS and DFS are good. I prefer BFS when pruning is not needed in favor of its readability.","position":{"start":{"line":1854,"column":1,"offset":62684},"end":{"line":1854,"column":99,"offset":62782}}}],"position":{"start":{"line":1854,"column":1,"offset":62684},"end":{"line":1854,"column":99,"offset":62782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nlet solve = function (board) {\n    const height = board.length;\n    if (height <= 1) {\n        return;\n    }\n    const width = board[0].length;\n    if (width <= 1) {\n        return;\n    }\n\n    const rowend = height - 1;\n    const colend = width - 1;\n\n    const queue = [];\n\n    for (let row = 0; row < height; row++) {\n        if (board[row][0] === 'O') {\n            board[row][0] = '#';\n            queue.push(row, 0);\n        }\n        if (board[row][colend] === 'O') {\n            board[row][colend] = '#';\n            queue.push(row, colend);\n        }\n    }\n\n    for (let col = 0; col < width; col++) {\n        if (board[0][col] === 'O') {\n            board[0][col] = '#';\n            queue.push(0, col);\n        }\n        if (board[rowend][col] === 'O') {\n            board[rowend][col] = '#';\n            queue.push(rowend, col);\n        }\n    }\n\n    while (queue.length > 0) {\n        const row = queue.shift();\n        const col = queue.shift();\n        if (row < rowend && board[row + 1][col] === 'O') {\n            board[row + 1][col] = '#';\n            queue.push(row + 1, col);\n        }\n        if (row > 0 && board[row - 1][col] === 'O') {\n            board[row - 1][col] = '#';\n            queue.push(row - 1, col);\n        }\n        if (board[row][col + 1] === 'O') {\n            board[row][col + 1] = '#';\n            queue.push(row, col + 1);\n        }\n        if (board[row][col - 1] === 'O') {\n            board[row][col - 1] = '#';\n            queue.push(row, col - 1);\n        }\n    }\n\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            if (board[row][col] === '#') {\n                board[row][col] = 'O';\n            } else if (board[row][col] === 'O') {\n                board[row][col] = 'X';\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":1856,"column":1,"offset":62784},"end":{"line":1929,"column":4,"offset":64713}}}],"position":{"start":{"line":1856,"column":1,"offset":62784},"end":{"line":1929,"column":4,"offset":64713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1931,"column":1,"offset":64715},"end":{"line":1931,"column":4,"offset":64718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1933,"column":1,"offset":64720},"end":{"line":1935,"column":23,"offset":64777}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1935,"column":23,"offset":64777},"end":{"line":1935,"column":66,"offset":64820}}}],"position":{"start":{"line":1935,"column":23,"offset":64777},"end":{"line":1935,"column":66,"offset":64820}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1935,"column":66,"offset":64820},"end":{"line":1936,"column":25,"offset":64845}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1936,"column":25,"offset":64845},"end":{"line":1936,"column":70,"offset":64890}}}],"position":{"start":{"line":1936,"column":25,"offset":64845},"end":{"line":1936,"column":70,"offset":64890}}},{"type":"text","value":"\n\"Graph\": ","position":{"start":{"line":1936,"column":70,"offset":64890},"end":{"line":1937,"column":10,"offset":64900}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/graph"},"children":[{"type":"text","value":"https://leetcode.com/tag/graph","position":{"start":{"line":1937,"column":10,"offset":64900},"end":{"line":1937,"column":40,"offset":64930}}}],"position":{"start":{"line":1937,"column":10,"offset":64900},"end":{"line":1937,"column":40,"offset":64930}}},{"type":"text","value":"\nSimilar Questions:\n\"Copy List with Random Pointer\": ","position":{"start":{"line":1937,"column":40,"offset":64930},"end":{"line":1939,"column":34,"offset":64983}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/copy-list-with-random-pointer"},"children":[{"type":"text","value":"https://leetcode.com/problems/copy-list-with-random-pointer","position":{"start":{"line":1939,"column":34,"offset":64983},"end":{"line":1939,"column":93,"offset":65042}}}],"position":{"start":{"line":1939,"column":34,"offset":64983},"end":{"line":1939,"column":93,"offset":65042}}}],"position":{"start":{"line":1933,"column":1,"offset":64720},"end":{"line":1939,"column":93,"offset":65042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1941,"column":1,"offset":65044},"end":{"line":1941,"column":4,"offset":65047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#133-clone-graphhttpsleetcodecomproblemsclone-graphdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1943,"column":2,"offset":65050},"end":{"line":1943,"column":142,"offset":65190}}}],"position":{"start":{"line":1943,"column":1,"offset":65049},"end":{"line":1943,"column":207,"offset":65255}}}],"position":{"start":{"line":1943,"column":1,"offset":65049},"end":{"line":1943,"column":207,"offset":65255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1945,"column":4,"offset":65260},"end":{"line":1945,"column":6,"offset":65262}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/clone-graph/description/"},"children":[{"type":"text","value":"133. Clone Graph","position":{"start":{"line":1945,"column":7,"offset":65263},"end":{"line":1945,"column":23,"offset":65279}}}],"position":{"start":{"line":1945,"column":6,"offset":65262},"end":{"line":1945,"column":80,"offset":65336}}}],"position":{"start":{"line":1945,"column":1,"offset":65257},"end":{"line":1945,"column":80,"offset":65336}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1947,"column":5,"offset":65342},"end":{"line":1947,"column":13,"offset":65350}}}],"position":{"start":{"line":1947,"column":1,"offset":65338},"end":{"line":1947,"column":13,"offset":65350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a ","position":{"start":{"line":1949,"column":1,"offset":65352},"end":{"line":1949,"column":103,"offset":65454}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":1949,"column":103,"offset":65454},"end":{"line":1949,"column":110,"offset":65461}}},{"type":"text","value":" (","position":{"start":{"line":1949,"column":110,"offset":65461},"end":{"line":1949,"column":112,"offset":65463}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}],"position":{"start":{"line":1949,"column":112,"offset":65463},"end":{"line":1949,"column":117,"offset":65468}}},{"type":"text","value":") and a list (","position":{"start":{"line":1949,"column":117,"offset":65468},"end":{"line":1949,"column":131,"offset":65482}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List[UndirectedGraphNode]"}],"position":{"start":{"line":1949,"column":131,"offset":65482},"end":{"line":1949,"column":158,"offset":65509}}},{"type":"text","value":") of its ","position":{"start":{"line":1949,"column":158,"offset":65509},"end":{"line":1949,"column":167,"offset":65518}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"neighbors"}],"position":{"start":{"line":1949,"column":167,"offset":65518},"end":{"line":1949,"column":178,"offset":65529}}},{"type":"text","value":". There is an edge between the given node and each of the nodes in its neighbors.","position":{"start":{"line":1949,"column":178,"offset":65529},"end":{"line":1949,"column":259,"offset":65610}}}],"position":{"start":{"line":1949,"column":1,"offset":65352},"end":{"line":1949,"column":259,"offset":65610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"OJ's undirected graph serialization (so you can understand error output):","position":{"start":{"line":1951,"column":1,"offset":65612},"end":{"line":1951,"column":74,"offset":65685}}}],"position":{"start":{"line":1951,"column":1,"offset":65612},"end":{"line":1951,"column":74,"offset":65685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Nodes are labeled uniquely.","position":{"start":{"line":1953,"column":1,"offset":65687},"end":{"line":1953,"column":28,"offset":65714}}}],"position":{"start":{"line":1953,"column":1,"offset":65687},"end":{"line":1953,"column":28,"offset":65714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We use ","position":{"start":{"line":1955,"column":1,"offset":65716},"end":{"line":1955,"column":8,"offset":65723}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1955,"column":8,"offset":65723},"end":{"line":1955,"column":11,"offset":65726}}},{"type":"text","value":" as a separator for each node, and ","position":{"start":{"line":1955,"column":11,"offset":65726},"end":{"line":1955,"column":46,"offset":65761}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":","}],"position":{"start":{"line":1955,"column":46,"offset":65761},"end":{"line":1955,"column":49,"offset":65764}}},{"type":"text","value":" as a separator for node label and each neighbor of the node.","position":{"start":{"line":1955,"column":49,"offset":65764},"end":{"line":1955,"column":110,"offset":65825}}}],"position":{"start":{"line":1955,"column":1,"offset":65716},"end":{"line":1955,"column":110,"offset":65825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As an example, consider the serialized graph ","position":{"start":{"line":1957,"column":1,"offset":65827},"end":{"line":1957,"column":46,"offset":65872}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{0,1,2#1,2#2,2}"}],"position":{"start":{"line":1957,"column":46,"offset":65872},"end":{"line":1957,"column":63,"offset":65889}}},{"type":"text","value":".","position":{"start":{"line":1957,"column":63,"offset":65889},"end":{"line":1957,"column":64,"offset":65890}}}],"position":{"start":{"line":1957,"column":1,"offset":65827},"end":{"line":1957,"column":64,"offset":65890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The graph has a total of three nodes, and therefore contains three parts as separated by ","position":{"start":{"line":1959,"column":1,"offset":65892},"end":{"line":1959,"column":90,"offset":65981}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1959,"column":90,"offset":65981},"end":{"line":1959,"column":93,"offset":65984}}},{"type":"text","value":".","position":{"start":{"line":1959,"column":93,"offset":65984},"end":{"line":1959,"column":94,"offset":65985}}}],"position":{"start":{"line":1959,"column":1,"offset":65892},"end":{"line":1959,"column":94,"offset":65985}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"First node is labeled as ","position":{"start":{"line":1961,"column":5,"offset":65991},"end":{"line":1961,"column":30,"offset":66016}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1961,"column":30,"offset":66016},"end":{"line":1961,"column":33,"offset":66019}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1961,"column":33,"offset":66019},"end":{"line":1961,"column":48,"offset":66034}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1961,"column":48,"offset":66034},"end":{"line":1961,"column":51,"offset":66037}}},{"type":"text","value":" to both nodes ","position":{"start":{"line":1961,"column":51,"offset":66037},"end":{"line":1961,"column":66,"offset":66052}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1961,"column":66,"offset":66052},"end":{"line":1961,"column":69,"offset":66055}}},{"type":"text","value":" and ","position":{"start":{"line":1961,"column":69,"offset":66055},"end":{"line":1961,"column":74,"offset":66060}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1961,"column":74,"offset":66060},"end":{"line":1961,"column":77,"offset":66063}}},{"type":"text","value":".","position":{"start":{"line":1961,"column":77,"offset":66063},"end":{"line":1961,"column":78,"offset":66064}}}],"position":{"start":{"line":1961,"column":1,"offset":65987},"end":{"line":1961,"column":78,"offset":66064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Second node is labeled as ","position":{"start":{"line":1962,"column":5,"offset":66069},"end":{"line":1962,"column":31,"offset":66095}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1962,"column":31,"offset":66095},"end":{"line":1962,"column":34,"offset":66098}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1962,"column":34,"offset":66098},"end":{"line":1962,"column":49,"offset":66113}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1962,"column":49,"offset":66113},"end":{"line":1962,"column":52,"offset":66116}}},{"type":"text","value":" to node ","position":{"start":{"line":1962,"column":52,"offset":66116},"end":{"line":1962,"column":61,"offset":66125}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1962,"column":61,"offset":66125},"end":{"line":1962,"column":64,"offset":66128}}},{"type":"text","value":".","position":{"start":{"line":1962,"column":64,"offset":66128},"end":{"line":1962,"column":65,"offset":66129}}}],"position":{"start":{"line":1962,"column":1,"offset":66065},"end":{"line":1962,"column":65,"offset":66129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Third node is labeled as ","position":{"start":{"line":1963,"column":5,"offset":66134},"end":{"line":1963,"column":30,"offset":66159}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":30,"offset":66159},"end":{"line":1963,"column":33,"offset":66162}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1963,"column":33,"offset":66162},"end":{"line":1963,"column":48,"offset":66177}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":48,"offset":66177},"end":{"line":1963,"column":51,"offset":66180}}},{"type":"text","value":" to node ","position":{"start":{"line":1963,"column":51,"offset":66180},"end":{"line":1963,"column":60,"offset":66189}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":60,"offset":66189},"end":{"line":1963,"column":63,"offset":66192}}},{"type":"text","value":" (itself), thus forming a self-cycle.","position":{"start":{"line":1963,"column":63,"offset":66192},"end":{"line":1963,"column":100,"offset":66229}}}],"position":{"start":{"line":1963,"column":1,"offset":66130},"end":{"line":1963,"column":100,"offset":66229}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1961,"column":1,"offset":65987},"end":{"line":1963,"column":100,"offset":66229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Visually, the graph looks like the following:","position":{"start":{"line":1965,"column":1,"offset":66231},"end":{"line":1965,"column":46,"offset":66276}}}],"position":{"start":{"line":1965,"column":1,"offset":66231},"end":{"line":1965,"column":46,"offset":66276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n"}],"position":{"start":{"line":1967,"column":1,"offset":66278},"end":{"line":1975,"column":4,"offset":66354}}}],"position":{"start":{"line":1967,"column":1,"offset":66278},"end":{"line":1975,"column":4,"offset":66354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note","position":{"start":{"line":1977,"column":3,"offset":66358},"end":{"line":1977,"column":7,"offset":66362}}}],"position":{"start":{"line":1977,"column":1,"offset":66356},"end":{"line":1977,"column":9,"offset":66364}}},{"type":"text","value":": The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.","position":{"start":{"line":1977,"column":9,"offset":66364},"end":{"line":1977,"column":205,"offset":66560}}}],"position":{"start":{"line":1977,"column":1,"offset":66356},"end":{"line":1977,"column":205,"offset":66560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1979,"column":5,"offset":66566},"end":{"line":1979,"column":14,"offset":66575}}}],"position":{"start":{"line":1979,"column":1,"offset":66562},"end":{"line":1979,"column":14,"offset":66575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DFS. Cache the visited node before entering the next recursion.","position":{"start":{"line":1981,"column":1,"offset":66577},"end":{"line":1981,"column":64,"offset":66640}}}],"position":{"start":{"line":1981,"column":1,"offset":66577},"end":{"line":1981,"column":64,"offset":66640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for undirected graph.\n * function UndirectedGraphNode(label) {\n *     this.label = label;\n *     this.neighbors = [];   // Array of UndirectedGraphNode\n * }\n */\n\n/**\n * @param {UndirectedGraphNode} graph\n * @return {UndirectedGraphNode}\n */\nlet cloneGraph = function (graph) {\n    const cache = {};\n    return _clone(graph);\n\n    function _clone(graph) {\n        if (!graph) {\n            return graph;\n        }\n        const label = graph.label;\n        if (!cache[label]) {\n            cache[label] = new UndirectedGraphNode(label);\n            cache[label].neighbors = graph.neighbors.map(_clone);\n        }\n        return cache[label];\n    }\n};\n"}],"position":{"start":{"line":1983,"column":1,"offset":66642},"end":{"line":2012,"column":4,"offset":67319}}}],"position":{"start":{"line":1983,"column":1,"offset":66642},"end":{"line":2012,"column":4,"offset":67319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/binary-tree-upside-down.webp","alt":"alt text","title":"binary-tree-upside-down"},"children":[],"position":{"start":{"line":2014,"column":1,"offset":67321},"end":{"line":2014,"column":127,"offset":67447}}}],"position":{"start":{"line":2014,"column":1,"offset":67321},"end":{"line":2014,"column":127,"offset":67447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst upsideDownBinaryTree = function (root) {\n    let curr = root;\n    let next = null;\n    let temp = null;\n    let prev = null;\n    while (curr !== null) {\n        next = curr.left;\n        curr.left = temp;\n        temp = curr.right;\n        curr.right = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n\n// another\n\nconst upsideDownBinaryTree = function (root) {\n    if (root == null || root.left == null) {\n        return root;\n    }\n    const newRoot = upsideDownBinaryTree(root.left);\n    root.left.left = root.right;\n    root.left.right = root;\n    root.left = null;\n    root.right = null;\n    return newRoot;\n};\n"}],"position":{"start":{"line":2016,"column":1,"offset":67449},"end":{"line":2057,"column":4,"offset":68301}}}],"position":{"start":{"line":2016,"column":1,"offset":67449},"end":{"line":2057,"column":4,"offset":68301}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/maximum-sum-circular-subarray.png","alt":"alt text","title":"maximum-sum-circular-subarray"},"children":[],"position":{"start":{"line":2059,"column":1,"offset":68303},"end":{"line":2059,"column":138,"offset":68440}}}],"position":{"start":{"line":2059,"column":1,"offset":68303},"end":{"line":2059,"column":138,"offset":68440}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxSubarraySumCircular = function (A) {\n    let minSum = Infinity,\n        sum = 0,\n        maxSum = -Infinity,\n        curMax = 0,\n        curMin = 0;\n    for (let a of A) {\n        sum += a;\n        curMax = Math.max(curMax + a, a);\n        maxSum = Math.max(maxSum, curMax);\n        curMin = Math.min(curMin + a, a);\n        minSum = Math.min(minSum, curMin);\n    }\n    return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;\n};\n"}],"position":{"start":{"line":2061,"column":1,"offset":68442},"end":{"line":2081,"column":4,"offset":68945}}}],"position":{"start":{"line":2061,"column":1,"offset":68442},"end":{"line":2081,"column":4,"offset":68945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#balanced-binary-tree---leetcode"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2083,"column":2,"offset":68948},"end":{"line":2083,"column":142,"offset":69088}}}],"position":{"start":{"line":2083,"column":1,"offset":68947},"end":{"line":2083,"column":177,"offset":69123}}}],"position":{"start":{"line":2083,"column":1,"offset":68947},"end":{"line":2083,"column":177,"offset":69123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"➤ Balanced Binary Tree - LeetCode","position":{"start":{"line":2085,"column":3,"offset":69127},"end":{"line":2085,"column":36,"offset":69160}}}],"position":{"start":{"line":2085,"column":1,"offset":69125},"end":{"line":2085,"column":36,"offset":69160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2087,"column":3,"offset":69164},"end":{"line":2087,"column":144,"offset":69305}}}],"position":{"start":{"line":2087,"column":3,"offset":69164},"end":{"line":2087,"column":144,"offset":69305}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2087,"column":1,"offset":69162},"end":{"line":2087,"column":144,"offset":69305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree, determine if it is height-balanced.","position":{"start":{"line":2089,"column":1,"offset":69307},"end":{"line":2089,"column":57,"offset":69363}}}],"position":{"start":{"line":2089,"column":1,"offset":69307},"end":{"line":2089,"column":57,"offset":69363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as:","position":{"start":{"line":2091,"column":1,"offset":69365},"end":{"line":2091,"column":63,"offset":69427}}}],"position":{"start":{"line":2091,"column":1,"offset":69365},"end":{"line":2091,"column":63,"offset":69427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"a binary tree in which the left and right subtrees of ","position":{"start":{"line":2093,"column":3,"offset":69431},"end":{"line":2093,"column":57,"offset":69485}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2093,"column":58,"offset":69486},"end":{"line":2093,"column":63,"offset":69491}}}],"position":{"start":{"line":2093,"column":57,"offset":69485},"end":{"line":2093,"column":64,"offset":69492}}},{"type":"text","value":" node differ in height by no more than 1.","position":{"start":{"line":2093,"column":64,"offset":69492},"end":{"line":2093,"column":105,"offset":69533}}}],"position":{"start":{"line":2093,"column":3,"offset":69431},"end":{"line":2093,"column":105,"offset":69533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2093,"column":1,"offset":69429},"end":{"line":2093,"column":105,"offset":69533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2095,"column":3,"offset":69537},"end":{"line":2095,"column":13,"offset":69547}}}],"position":{"start":{"line":2095,"column":1,"offset":69535},"end":{"line":2095,"column":15,"offset":69549}}}],"position":{"start":{"line":2095,"column":1,"offset":69535},"end":{"line":2095,"column":15,"offset":69549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg","alt":null},"children":[],"position":{"start":{"line":2097,"column":1,"offset":69551},"end":{"line":2097,"column":66,"offset":69616}}}],"position":{"start":{"line":2097,"column":1,"offset":69551},"end":{"line":2097,"column":66,"offset":69616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2099,"column":3,"offset":69620},"end":{"line":2099,"column":9,"offset":69626}}}],"position":{"start":{"line":2099,"column":1,"offset":69618},"end":{"line":2099,"column":11,"offset":69628}}},{"type":"text","value":" root = ","position":{"start":{"line":2099,"column":11,"offset":69628},"end":{"line":2099,"column":19,"offset":69636}}},{"type":"text","value":"[","position":{"start":{"line":2099,"column":19,"offset":69636},"end":{"line":2099,"column":21,"offset":69638}}},{"type":"text","value":"3,9,20,null,null,15,7]\n","position":{"start":{"line":2099,"column":21,"offset":69638},"end":{"line":2100,"column":1,"offset":69661}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2100,"column":3,"offset":69663},"end":{"line":2100,"column":10,"offset":69670}}}],"position":{"start":{"line":2100,"column":1,"offset":69661},"end":{"line":2100,"column":12,"offset":69672}}},{"type":"text","value":" true","position":{"start":{"line":2100,"column":12,"offset":69672},"end":{"line":2100,"column":17,"offset":69677}}}],"position":{"start":{"line":2099,"column":1,"offset":69618},"end":{"line":2100,"column":17,"offset":69677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2102,"column":3,"offset":69681},"end":{"line":2102,"column":13,"offset":69691}}}],"position":{"start":{"line":2102,"column":1,"offset":69679},"end":{"line":2102,"column":15,"offset":69693}}}],"position":{"start":{"line":2102,"column":1,"offset":69679},"end":{"line":2102,"column":15,"offset":69693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg","alt":null},"children":[],"position":{"start":{"line":2104,"column":1,"offset":69695},"end":{"line":2104,"column":66,"offset":69760}}}],"position":{"start":{"line":2104,"column":1,"offset":69695},"end":{"line":2104,"column":66,"offset":69760}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2106,"column":3,"offset":69764},"end":{"line":2106,"column":9,"offset":69770}}}],"position":{"start":{"line":2106,"column":1,"offset":69762},"end":{"line":2106,"column":11,"offset":69772}}},{"type":"text","value":" root = ","position":{"start":{"line":2106,"column":11,"offset":69772},"end":{"line":2106,"column":19,"offset":69780}}},{"type":"text","value":"[","position":{"start":{"line":2106,"column":19,"offset":69780},"end":{"line":2106,"column":21,"offset":69782}}},{"type":"text","value":"1,2,2,3,3,null,null,4,4]\n","position":{"start":{"line":2106,"column":21,"offset":69782},"end":{"line":2107,"column":1,"offset":69807}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2107,"column":3,"offset":69809},"end":{"line":2107,"column":10,"offset":69816}}}],"position":{"start":{"line":2107,"column":1,"offset":69807},"end":{"line":2107,"column":12,"offset":69818}}},{"type":"text","value":" false","position":{"start":{"line":2107,"column":12,"offset":69818},"end":{"line":2107,"column":18,"offset":69824}}}],"position":{"start":{"line":2106,"column":1,"offset":69762},"end":{"line":2107,"column":18,"offset":69824}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2109,"column":3,"offset":69828},"end":{"line":2109,"column":13,"offset":69838}}}],"position":{"start":{"line":2109,"column":1,"offset":69826},"end":{"line":2109,"column":15,"offset":69840}}}],"position":{"start":{"line":2109,"column":1,"offset":69826},"end":{"line":2109,"column":15,"offset":69840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2111,"column":3,"offset":69844},"end":{"line":2111,"column":9,"offset":69850}}}],"position":{"start":{"line":2111,"column":1,"offset":69842},"end":{"line":2111,"column":11,"offset":69852}}},{"type":"text","value":" root = ","position":{"start":{"line":2111,"column":11,"offset":69852},"end":{"line":2111,"column":19,"offset":69860}}},{"type":"text","value":"[","position":{"start":{"line":2111,"column":19,"offset":69860},"end":{"line":2111,"column":21,"offset":69862}}},{"type":"text","value":"]\n","position":{"start":{"line":2111,"column":21,"offset":69862},"end":{"line":2112,"column":1,"offset":69864}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2112,"column":3,"offset":69866},"end":{"line":2112,"column":10,"offset":69873}}}],"position":{"start":{"line":2112,"column":1,"offset":69864},"end":{"line":2112,"column":12,"offset":69875}}},{"type":"text","value":" true","position":{"start":{"line":2112,"column":12,"offset":69875},"end":{"line":2112,"column":17,"offset":69880}}}],"position":{"start":{"line":2111,"column":1,"offset":69842},"end":{"line":2112,"column":17,"offset":69880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2114,"column":3,"offset":69884},"end":{"line":2114,"column":15,"offset":69896}}}],"position":{"start":{"line":2114,"column":1,"offset":69882},"end":{"line":2114,"column":17,"offset":69898}}}],"position":{"start":{"line":2114,"column":1,"offset":69882},"end":{"line":2114,"column":17,"offset":69898}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2116,"column":5,"offset":69904},"end":{"line":2116,"column":53,"offset":69952}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 5000]"}],"position":{"start":{"line":2116,"column":53,"offset":69952},"end":{"line":2116,"column":64,"offset":69963}}},{"type":"text","value":".","position":{"start":{"line":2116,"column":64,"offset":69963},"end":{"line":2116,"column":65,"offset":69964}}}],"position":{"start":{"line":2116,"column":1,"offset":69900},"end":{"line":2116,"column":65,"offset":69964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-104 <= Node.val <= 104"}],"position":{"start":{"line":2117,"column":5,"offset":69969},"end":{"line":2117,"column":30,"offset":69994}}}],"position":{"start":{"line":2117,"column":1,"offset":69965},"end":{"line":2117,"column":30,"offset":69994}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2116,"column":1,"offset":69900},"end":{"line":2117,"column":30,"offset":69994}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/balanced-binary-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2119,"column":2,"offset":69997},"end":{"line":2119,"column":8,"offset":70003}}}],"position":{"start":{"line":2119,"column":1,"offset":69996},"end":{"line":2119,"column":62,"offset":70057}}},{"type":"text","value":"# Convert Sorted Array to Binary Search Tree","position":{"start":{"line":2119,"column":62,"offset":70057},"end":{"line":2119,"column":106,"offset":70101}}}],"position":{"start":{"line":2119,"column":1,"offset":69996},"end":{"line":2119,"column":106,"offset":70101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2121,"column":3,"offset":70105},"end":{"line":2121,"column":144,"offset":70246}}}],"position":{"start":{"line":2121,"column":3,"offset":70105},"end":{"line":2121,"column":144,"offset":70246}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2121,"column":1,"offset":70103},"end":{"line":2121,"column":144,"offset":70246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.","position":{"start":{"line":2123,"column":1,"offset":70248},"end":{"line":2123,"column":98,"offset":70345}}}],"position":{"start":{"line":2123,"column":1,"offset":70248},"end":{"line":2123,"column":98,"offset":70345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of ","position":{"start":{"line":2125,"column":1,"offset":70347},"end":{"line":2125,"column":119,"offset":70465}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2125,"column":120,"offset":70466},"end":{"line":2125,"column":125,"offset":70471}}}],"position":{"start":{"line":2125,"column":119,"offset":70465},"end":{"line":2125,"column":126,"offset":70472}}},{"type":"text","value":" node never differ by more than 1.","position":{"start":{"line":2125,"column":126,"offset":70472},"end":{"line":2125,"column":160,"offset":70506}}}],"position":{"start":{"line":2125,"column":1,"offset":70347},"end":{"line":2125,"column":160,"offset":70506}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":2127,"column":3,"offset":70510},"end":{"line":2127,"column":11,"offset":70518}}}],"position":{"start":{"line":2127,"column":1,"offset":70508},"end":{"line":2127,"column":13,"offset":70520}}}],"position":{"start":{"line":2127,"column":1,"offset":70508},"end":{"line":2127,"column":13,"offset":70520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the sorted array: ","position":{"start":{"line":2129,"column":1,"offset":70522},"end":{"line":2129,"column":25,"offset":70546}}},{"type":"text","value":"[","position":{"start":{"line":2129,"column":25,"offset":70546},"end":{"line":2129,"column":27,"offset":70548}}},{"type":"text","value":"-10,-3,0,5,9],","position":{"start":{"line":2129,"column":27,"offset":70548},"end":{"line":2129,"column":41,"offset":70562}}}],"position":{"start":{"line":2129,"column":1,"offset":70522},"end":{"line":2129,"column":41,"offset":70562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One possible answer is: ","position":{"start":{"line":2131,"column":1,"offset":70564},"end":{"line":2131,"column":25,"offset":70588}}},{"type":"text","value":"[","position":{"start":{"line":2131,"column":25,"offset":70588},"end":{"line":2131,"column":27,"offset":70590}}},{"type":"text","value":"0,-3,9,-10,null,5], which represents the following height balanced BST:","position":{"start":{"line":2131,"column":27,"offset":70590},"end":{"line":2131,"column":98,"offset":70661}}}],"position":{"start":{"line":2131,"column":1,"offset":70564},"end":{"line":2131,"column":98,"offset":70661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"  0\n / \\\\\n"}],"position":{"start":{"line":2133,"column":1,"offset":70663},"end":{"line":2134,"column":10,"offset":70680}}}],"position":{"start":{"line":2133,"column":1,"offset":70663},"end":{"line":2134,"column":10,"offset":70680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"-","position":{"start":{"line":2136,"column":1,"offset":70682},"end":{"line":2136,"column":3,"offset":70684}}},{"type":"text","value":"3 9\n/ /\n","position":{"start":{"line":2136,"column":3,"offset":70684},"end":{"line":2138,"column":1,"offset":70692}}},{"type":"text","value":"-","position":{"start":{"line":2138,"column":1,"offset":70692},"end":{"line":2138,"column":3,"offset":70694}}},{"type":"text","value":"10 5","position":{"start":{"line":2138,"column":3,"offset":70694},"end":{"line":2138,"column":7,"offset":70698}}}],"position":{"start":{"line":2136,"column":1,"offset":70682},"end":{"line":2138,"column":7,"offset":70698}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2140,"column":2,"offset":70701},"end":{"line":2140,"column":8,"offset":70707}}}],"position":{"start":{"line":2140,"column":1,"offset":70700},"end":{"line":2140,"column":84,"offset":70783}}},{"type":"text","value":"# Delete Node in a BST","position":{"start":{"line":2140,"column":84,"offset":70783},"end":{"line":2140,"column":106,"offset":70805}}}],"position":{"start":{"line":2140,"column":1,"offset":70700},"end":{"line":2140,"column":106,"offset":70805}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2142,"column":3,"offset":70809},"end":{"line":2142,"column":144,"offset":70950}}}],"position":{"start":{"line":2142,"column":3,"offset":70809},"end":{"line":2142,"column":144,"offset":70950}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2142,"column":1,"offset":70807},"end":{"line":2142,"column":144,"offset":70950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.","position":{"start":{"line":2144,"column":1,"offset":70952},"end":{"line":2144,"column":157,"offset":71108}}}],"position":{"start":{"line":2144,"column":1,"offset":70952},"end":{"line":2144,"column":157,"offset":71108}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Basically, the deletion can be divided into two stages:","position":{"start":{"line":2146,"column":1,"offset":71110},"end":{"line":2146,"column":56,"offset":71165}}}],"position":{"start":{"line":2146,"column":1,"offset":71110},"end":{"line":2146,"column":56,"offset":71165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Search for a node to remove.","position":{"start":{"line":2148,"column":5,"offset":71171},"end":{"line":2148,"column":33,"offset":71199}}}],"position":{"start":{"line":2148,"column":1,"offset":71167},"end":{"line":2148,"column":33,"offset":71199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node is found, delete the node.","position":{"start":{"line":2149,"column":5,"offset":71204},"end":{"line":2149,"column":43,"offset":71242}}}],"position":{"start":{"line":2149,"column":1,"offset":71200},"end":{"line":2149,"column":43,"offset":71242}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2148,"column":1,"offset":71167},"end":{"line":2149,"column":43,"offset":71242}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":2151,"column":3,"offset":71246},"end":{"line":2151,"column":13,"offset":71256}}}],"position":{"start":{"line":2151,"column":1,"offset":71244},"end":{"line":2151,"column":15,"offset":71258}}},{"type":"text","value":" Can you solve it with time complexity ","position":{"start":{"line":2151,"column":15,"offset":71258},"end":{"line":2151,"column":54,"offset":71297}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(height of tree)"}],"position":{"start":{"line":2151,"column":54,"offset":71297},"end":{"line":2151,"column":73,"offset":71316}}},{"type":"text","value":"?","position":{"start":{"line":2151,"column":73,"offset":71316},"end":{"line":2151,"column":74,"offset":71317}}}],"position":{"start":{"line":2151,"column":1,"offset":71244},"end":{"line":2151,"column":74,"offset":71317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2153,"column":3,"offset":71321},"end":{"line":2153,"column":13,"offset":71331}}}],"position":{"start":{"line":2153,"column":1,"offset":71319},"end":{"line":2153,"column":15,"offset":71333}}}],"position":{"start":{"line":2153,"column":1,"offset":71319},"end":{"line":2153,"column":15,"offset":71333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg","alt":null},"children":[],"position":{"start":{"line":2155,"column":1,"offset":71335},"end":{"line":2155,"column":67,"offset":71401}}}],"position":{"start":{"line":2155,"column":1,"offset":71335},"end":{"line":2155,"column":67,"offset":71401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2157,"column":3,"offset":71405},"end":{"line":2157,"column":9,"offset":71411}}}],"position":{"start":{"line":2157,"column":1,"offset":71403},"end":{"line":2157,"column":11,"offset":71413}}},{"type":"text","value":" root = ","position":{"start":{"line":2157,"column":11,"offset":71413},"end":{"line":2157,"column":19,"offset":71421}}},{"type":"text","value":"[","position":{"start":{"line":2157,"column":19,"offset":71421},"end":{"line":2157,"column":21,"offset":71423}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 3\n","position":{"start":{"line":2157,"column":21,"offset":71423},"end":{"line":2158,"column":1,"offset":71450}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2158,"column":3,"offset":71452},"end":{"line":2158,"column":10,"offset":71459}}}],"position":{"start":{"line":2158,"column":1,"offset":71450},"end":{"line":2158,"column":12,"offset":71461}}},{"type":"text","value":" ","position":{"start":{"line":2158,"column":12,"offset":71461},"end":{"line":2158,"column":13,"offset":71462}}},{"type":"text","value":"[","position":{"start":{"line":2158,"column":13,"offset":71462},"end":{"line":2158,"column":15,"offset":71464}}},{"type":"text","value":"5,4,6,2,null,null,7]\n","position":{"start":{"line":2158,"column":15,"offset":71464},"end":{"line":2159,"column":1,"offset":71485}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2159,"column":3,"offset":71487},"end":{"line":2159,"column":15,"offset":71499}}}],"position":{"start":{"line":2159,"column":1,"offset":71485},"end":{"line":2159,"column":17,"offset":71501}}},{"type":"text","value":" Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is ","position":{"start":{"line":2159,"column":17,"offset":71501},"end":{"line":2160,"column":21,"offset":71596}}},{"type":"text","value":"[","position":{"start":{"line":2160,"column":21,"offset":71596},"end":{"line":2160,"column":23,"offset":71598}}},{"type":"text","value":"5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is ","position":{"start":{"line":2160,"column":23,"offset":71598},"end":{"line":2161,"column":44,"offset":71687}}},{"type":"text","value":"[","position":{"start":{"line":2161,"column":44,"offset":71687},"end":{"line":2161,"column":46,"offset":71689}}},{"type":"text","value":"5,2,6,null,4,null,7] and it's also accepted.\n","position":{"start":{"line":2161,"column":46,"offset":71689},"end":{"line":2162,"column":1,"offset":71734}}},{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg","alt":null},"children":[],"position":{"start":{"line":2162,"column":1,"offset":71734},"end":{"line":2162,"column":70,"offset":71803}}}],"position":{"start":{"line":2157,"column":1,"offset":71403},"end":{"line":2162,"column":70,"offset":71803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2164,"column":3,"offset":71807},"end":{"line":2164,"column":13,"offset":71817}}}],"position":{"start":{"line":2164,"column":1,"offset":71805},"end":{"line":2164,"column":15,"offset":71819}}}],"position":{"start":{"line":2164,"column":1,"offset":71805},"end":{"line":2164,"column":15,"offset":71819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2166,"column":3,"offset":71823},"end":{"line":2166,"column":9,"offset":71829}}}],"position":{"start":{"line":2166,"column":1,"offset":71821},"end":{"line":2166,"column":11,"offset":71831}}},{"type":"text","value":" root = ","position":{"start":{"line":2166,"column":11,"offset":71831},"end":{"line":2166,"column":19,"offset":71839}}},{"type":"text","value":"[","position":{"start":{"line":2166,"column":19,"offset":71839},"end":{"line":2166,"column":21,"offset":71841}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 0\n","position":{"start":{"line":2166,"column":21,"offset":71841},"end":{"line":2167,"column":1,"offset":71868}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2167,"column":3,"offset":71870},"end":{"line":2167,"column":10,"offset":71877}}}],"position":{"start":{"line":2167,"column":1,"offset":71868},"end":{"line":2167,"column":12,"offset":71879}}},{"type":"text","value":" ","position":{"start":{"line":2167,"column":12,"offset":71879},"end":{"line":2167,"column":13,"offset":71880}}},{"type":"text","value":"[","position":{"start":{"line":2167,"column":13,"offset":71880},"end":{"line":2167,"column":15,"offset":71882}}},{"type":"text","value":"5,3,6,2,4,null,7]\n","position":{"start":{"line":2167,"column":15,"offset":71882},"end":{"line":2168,"column":1,"offset":71900}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2168,"column":3,"offset":71902},"end":{"line":2168,"column":15,"offset":71914}}}],"position":{"start":{"line":2168,"column":1,"offset":71900},"end":{"line":2168,"column":17,"offset":71916}}},{"type":"text","value":" The tree does not contain a node with value = 0.","position":{"start":{"line":2168,"column":17,"offset":71916},"end":{"line":2168,"column":66,"offset":71965}}}],"position":{"start":{"line":2166,"column":1,"offset":71821},"end":{"line":2168,"column":66,"offset":71965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2170,"column":3,"offset":71969},"end":{"line":2170,"column":13,"offset":71979}}}],"position":{"start":{"line":2170,"column":1,"offset":71967},"end":{"line":2170,"column":15,"offset":71981}}}],"position":{"start":{"line":2170,"column":1,"offset":71967},"end":{"line":2170,"column":15,"offset":71981}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2172,"column":3,"offset":71985},"end":{"line":2172,"column":9,"offset":71991}}}],"position":{"start":{"line":2172,"column":1,"offset":71983},"end":{"line":2172,"column":11,"offset":71993}}},{"type":"text","value":" root = ","position":{"start":{"line":2172,"column":11,"offset":71993},"end":{"line":2172,"column":19,"offset":72001}}},{"type":"text","value":"[","position":{"start":{"line":2172,"column":19,"offset":72001},"end":{"line":2172,"column":21,"offset":72003}}},{"type":"text","value":"], key = 0\n","position":{"start":{"line":2172,"column":21,"offset":72003},"end":{"line":2173,"column":1,"offset":72014}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2173,"column":3,"offset":72016},"end":{"line":2173,"column":10,"offset":72023}}}],"position":{"start":{"line":2173,"column":1,"offset":72014},"end":{"line":2173,"column":12,"offset":72025}}},{"type":"text","value":" ","position":{"start":{"line":2173,"column":12,"offset":72025},"end":{"line":2173,"column":13,"offset":72026}}},{"type":"text","value":"[","position":{"start":{"line":2173,"column":13,"offset":72026},"end":{"line":2173,"column":15,"offset":72028}}},{"type":"text","value":"]","position":{"start":{"line":2173,"column":15,"offset":72028},"end":{"line":2173,"column":16,"offset":72029}}}],"position":{"start":{"line":2172,"column":1,"offset":71983},"end":{"line":2173,"column":16,"offset":72029}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2175,"column":3,"offset":72033},"end":{"line":2175,"column":15,"offset":72045}}}],"position":{"start":{"line":2175,"column":1,"offset":72031},"end":{"line":2175,"column":17,"offset":72047}}}],"position":{"start":{"line":2175,"column":1,"offset":72031},"end":{"line":2175,"column":17,"offset":72047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2177,"column":5,"offset":72053},"end":{"line":2177,"column":53,"offset":72101}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 104]"}],"position":{"start":{"line":2177,"column":53,"offset":72101},"end":{"line":2177,"column":63,"offset":72111}}},{"type":"text","value":".","position":{"start":{"line":2177,"column":63,"offset":72111},"end":{"line":2177,"column":64,"offset":72112}}}],"position":{"start":{"line":2177,"column":1,"offset":72049},"end":{"line":2177,"column":64,"offset":72112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= Node.val <= 105"}],"position":{"start":{"line":2178,"column":5,"offset":72117},"end":{"line":2178,"column":30,"offset":72142}}}],"position":{"start":{"line":2178,"column":1,"offset":72113},"end":{"line":2178,"column":30,"offset":72142}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each node has a ","position":{"start":{"line":2179,"column":5,"offset":72147},"end":{"line":2179,"column":21,"offset":72163}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"unique","position":{"start":{"line":2179,"column":23,"offset":72165},"end":{"line":2179,"column":29,"offset":72171}}}],"position":{"start":{"line":2179,"column":21,"offset":72163},"end":{"line":2179,"column":31,"offset":72173}}},{"type":"text","value":" value.","position":{"start":{"line":2179,"column":31,"offset":72173},"end":{"line":2179,"column":38,"offset":72180}}}],"position":{"start":{"line":2179,"column":1,"offset":72143},"end":{"line":2179,"column":38,"offset":72180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":2180,"column":5,"offset":72185},"end":{"line":2180,"column":11,"offset":72191}}},{"type":"text","value":" is a valid binary search tree.","position":{"start":{"line":2180,"column":11,"offset":72191},"end":{"line":2180,"column":42,"offset":72222}}}],"position":{"start":{"line":2180,"column":1,"offset":72181},"end":{"line":2180,"column":42,"offset":72222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= key <= 105"}],"position":{"start":{"line":2181,"column":5,"offset":72227},"end":{"line":2181,"column":25,"offset":72247}}}],"position":{"start":{"line":2181,"column":1,"offset":72223},"end":{"line":2181,"column":25,"offset":72247}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2177,"column":1,"offset":72049},"end":{"line":2181,"column":25,"offset":72247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/delete-node-in-a-bst/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2183,"column":2,"offset":72250},"end":{"line":2183,"column":8,"offset":72256}}}],"position":{"start":{"line":2183,"column":1,"offset":72249},"end":{"line":2183,"column":62,"offset":72310}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-0.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2183,"column":62,"offset":72310},"end":{"line":2183,"column":173,"offset":72421}}},{"type":"text","value":"\n","position":{"start":{"line":2183,"column":173,"offset":72421},"end":{"line":2184,"column":1,"offset":72422}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-1.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2184,"column":1,"offset":72422},"end":{"line":2184,"column":112,"offset":72533}}}],"position":{"start":{"line":2183,"column":1,"offset":72249},"end":{"line":2184,"column":112,"offset":72533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nconst minMeetingRooms = function (intervals) {\n    const len = intervals.length;\n    const starts = new Array(len);\n    const ends = new Array(len);\n    for (let i = 0; i < len; i++) {\n        starts[i] = intervals[i][0];\n        ends[i] = intervals[i][1];\n    }\n    starts.sort((a, b) => a - b);\n    ends.sort((a, b) => a - b);\n    let rooms = 0;\n    let endsIdx = 0;\n    for (let i = 0; i < len; i++) {\n        if (starts[i] < ends[endsIdx]) rooms++;\n        else endsIdx++;\n    }\n    return rooms;\n};\n"}],"position":{"start":{"line":2186,"column":1,"offset":72535},"end":{"line":2209,"column":4,"offset":73109}}}],"position":{"start":{"line":2186,"column":1,"offset":72535},"end":{"line":2209,"column":4,"offset":73109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#-"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2211,"column":2,"offset":73112},"end":{"line":2211,"column":142,"offset":73252}}}],"position":{"start":{"line":2211,"column":1,"offset":73111},"end":{"line":2211,"column":147,"offset":73257}}}],"position":{"start":{"line":2211,"column":1,"offset":73111},"end":{"line":2211,"column":147,"offset":73257}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2212,"column":1,"offset":73258}}}}